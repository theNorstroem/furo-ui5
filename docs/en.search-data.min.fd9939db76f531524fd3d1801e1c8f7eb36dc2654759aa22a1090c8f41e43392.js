'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/typerenderer/cell/','title':"cell",'section':"Typerenderer",'content':"cell #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-float.js'; exports CellFloat js exports \u0026lt;cell-float\u0026gt; custom-element-definition superclass LitElement\n Summary: cell display renderer for float\n Description #  cell-float The cell-float component displays a FieldNode of type float in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  _displayValue #  default: ''\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':1,'href':'/docs/typerenderer/cell-bool/','title':"cell-bool",'section':"Typerenderer",'content':"cell-bool #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-bool.js'; exports CellBool js exports \u0026lt;cell-bool\u0026gt; custom-element-definition superclass LitElement\n Summary: cell display renderer for bool\n Description #  cell-bool The cell-bool component displays a FieldNode of type bool in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode of type bool, furo.fat.Bool, google.wrapper.BoolValue   "});index.add({'id':2,'href':'/docs/typerenderer/cell-double/','title':"cell-double",'section':"Typerenderer",'content':"cell-double #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-double.js'; exports CellDouble js exports \u0026lt;cell-double\u0026gt; custom-element-definition superclass LitElement\n Summary: cell display renderer for double\n Description #  cell-double The cell-double component displays a FieldNode of type double in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':3,'href':'/docs/typerenderer/cell-furo-bigdecimal/','title':"cell-furo-bigdecimal",'section':"Typerenderer",'content':"cell-furo-bigdecimal #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-bigdecimal.js'; exports \u0026lt;cell-furo-bigdecimal\u0026gt; custom-element-definition extends /src/typerenderer/cell-float.js superclass CellFloat\n Summary: cell display renderer for type furo.BigDecimal\n Description #  The cell-furo-bigdecimal component displays a FieldNode of type furo.BigDecimal in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nAttributes and Properties #  _displayValue #  default: ''\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':4,'href':'/docs/typerenderer/cell-furo-fat-bool/','title':"cell-furo-fat-bool",'section':"Typerenderer",'content':"cell-furo-fat-bool #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-fat-bool.js'; exports \u0026lt;cell-furo-fat-bool\u0026gt; custom-element-definition extends /src/typerenderer/cell-bool.js superclass CellBool\n Summary: cell display renderer for furo.fat.Bool\n Description #  cell-furo-fat-bool The cell-furo-fat-bool component displays a FieldNode of type furo.fat.bool in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode of type bool, furo.fat.Bool, google.wrapper.BoolValue   "});index.add({'id':5,'href':'/docs/typerenderer/cell-furo-fat-double/','title':"cell-furo-fat-double",'section':"Typerenderer",'content':"cell-furo-fat-double #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-fat-double.js'; exports \u0026lt;cell-furo-fat-double\u0026gt; custom-element-definition extends /src/typerenderer/cell-double.js superclass CellDouble\n Summary: cell display renderer for furo.fat.Double\n Description #  cell-furo-fat-double The cell-furo-fat-double component displays a FieldNode of type furo.fat.Double in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':6,'href':'/docs/typerenderer/cell-furo-fat-float/','title':"cell-furo-fat-float",'section':"Typerenderer",'content':"cell-furo-fat-float #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-fat-float.js'; exports \u0026lt;cell-furo-fat-float\u0026gt; custom-element-definition extends /src/typerenderer/cell-float.js superclass CellFloat\n Summary: cell display renderer for furo.fat.Float\n Description #  cell-furo-fat-float The cell-furo-fat-float component displays a FieldNode of type furo.fat.Float in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  _displayValue #  default: ''\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':7,'href':'/docs/typerenderer/cell-furo-fat-int32/','title':"cell-furo-fat-int32",'section':"Typerenderer",'content':"cell-furo-fat-int32 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-fat-int32.js'; exports CellFuroFatInt32 js exports \u0026lt;cell-furo-fat-int32\u0026gt; custom-element-definition extends /src/typerenderer/cell-int32.js superclass CellInt32\n Summary: cell display renderer for furo.fat.Int32\n Description #  cell-int32 The cell-int32 component displays a FieldNode of type furo.fat.Int32 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':8,'href':'/docs/typerenderer/cell-furo-fat-int64/','title':"cell-furo-fat-int64",'section':"Typerenderer",'content':"cell-furo-fat-int64 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-fat-int64.js'; exports CellFuroFatInt64 js exports \u0026lt;cell-furo-fat-int64\u0026gt; custom-element-definition extends /src/typerenderer/cell-furo-fat-int32.js superclass CellFuroFatInt32\n Summary: cell display renderer for furo.fat.Int64\n Description #  cell-furo-fat-int64 The cell-furo-fat-int64 component displays a FieldNode of type furo.fat.int64 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':9,'href':'/docs/typerenderer/cell-furo-fat-string/','title':"cell-furo-fat-string",'section':"Typerenderer",'content':"cell-furo-fat-string #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-fat-string.js'; exports \u0026lt;cell-furo-fat-string\u0026gt; custom-element-definition superclass LitElement\n Summary: cell display renderer for furo.fat.String\n Description #  cell-furo-fat-string The cell-furo-fat-string component displays a FieldNode of type furo.fat.String in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _updateMeta #  _updateMeta() ⟹ void\n* → ƒ\u0026ndash;update-meta\n\n"});index.add({'id':10,'href':'/docs/typerenderer/cell-furo-fat-uint32/','title':"cell-furo-fat-uint32",'section':"Typerenderer",'content':"cell-furo-fat-uint32 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-fat-uint32.js'; exports \u0026lt;cell-furo-fat-uint32\u0026gt; custom-element-definition extends /src/typerenderer/cell-furo-fat-int32.js superclass CellFuroFatInt32\n Summary: cell display renderer for furo.fat.Uint32\n Description #  cell-furo-fat-uint32 The cell-furo-fat-uint32 component displays a FieldNode of type furo.fat.Uint32 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':11,'href':'/docs/typerenderer/cell-furo-fat-uint64/','title':"cell-furo-fat-uint64",'section':"Typerenderer",'content':"cell-furo-fat-uint64 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-fat-uint64.js'; exports \u0026lt;cell-furo-fat-uint64\u0026gt; custom-element-definition extends /src/typerenderer/cell-furo-fat-int64.js superclass CellFuroFatInt64\n Summary: cell display renderer for furo.fat.Uint64\n Description #  cell-furo-fat-uint64 The cell-furo-fat-uint64 component displays a FieldNode of type furo.fat.uint64 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':12,'href':'/docs/typerenderer/cell-furo-integerproperty/','title':"cell-furo-integerproperty",'section':"Typerenderer",'content':"cell-furo-integerproperty #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-integerproperty.js'; exports CellFuroIntegerproperty js exports \u0026lt;cell-furo-integerproperty\u0026gt; custom-element-definition extends /src/typerenderer/cell-int32.js superclass CellInt32\n Summary: cell display renderer for furo.Integerproperty\n Description #  cell-furo-integerproperty The cell-furo-integerproperty component displays a FieldNode of type furo.Integerproperty in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':13,'href':'/docs/typerenderer/cell-furo-link/','title':"cell-furo-link",'section':"Typerenderer",'content':"cell-furo-link #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-link.js'; exports \u0026lt;cell-furo-link\u0026gt; custom-element-definition superclass LitElement\n Summary: cell display renderer for furo.Link\n Description #  cell-furo-link The cell-furo-link component displays a FieldNode of type furo.Link in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':14,'href':'/docs/typerenderer/cell-furo-numberproperty/','title':"cell-furo-numberproperty",'section':"Typerenderer",'content':"cell-furo-numberproperty #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-numberproperty.js'; exports CellFuroNumberproperty js exports \u0026lt;cell-furo-numberproperty\u0026gt; custom-element-definition extends /src/typerenderer/cell-furo-integerproperty.js superclass CellFuroIntegerproperty\n Summary: cell display renderer for furo.Numberproperty\n Description #  cell-furo-numberproperty The cell-furo-numberrproperty component displays a FieldNode of type furo.Numberproperty in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':15,'href':'/docs/typerenderer/cell-furo-property/','title':"cell-furo-property",'section':"Typerenderer",'content':"cell-furo-property #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-property.js'; exports CellFuroProperty js exports \u0026lt;cell-furo-property\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: cell display renderer for furo.Property\n Description #  cell-furo-property The cell-furo-property component displays a FieldNode of type furo.Property in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  noDataText #  noDataText string default: ''\nDefines the empty state display With a furo.Property type, the effective type is only known when the data is transmitted. Default: '' _typeResolved #  default: false\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the cell-furo-property is a simple proxy element to show the initial state if no data is available.\n fieldNode    "});index.add({'id':16,'href':'/docs/typerenderer/cell-furo-property-repeated/','title':"cell-furo-property-repeated",'section':"Typerenderer",'content':"cell-furo-property-repeated #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-property-repeated.js'; exports CellFuroPropertyRepeated js exports \u0026lt;cell-furo-property-repeated\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: cell display renderer for [] furo.Property\n Description #  cell-furo-property-repeats The cell-furo-property-repeats component displays a FieldNode of type furo.Property in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  elementList #  default: []\n\n_typeResolved #  default: false\n\nnoDataText #  noDataText \nDefines the empty state display With a furo.Property type, the effective type is only known when the data is transmitted. Default: '' Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the cell-furo-property-repeats is a simple proxy element to show the initial state if no data is available.\n fieldNode    _updateFieldList #  _updateFieldList() ⟹ void\n* → ƒ\u0026ndash;update-field-list\n\n"});index.add({'id':17,'href':'/docs/typerenderer/cell-furo-reference/','title':"cell-furo-reference",'section':"Typerenderer",'content':"cell-furo-reference #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-reference.js'; exports \u0026lt;cell-furo-reference\u0026gt; custom-element-definition superclass LitElement\n Summary: cell display renderer for furo.Reference\n Description #  cell-furo-reference The cell-furo-reference component displays a FieldNode of type furo.Reference in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':18,'href':'/docs/typerenderer/cell-furo-stringoptionproperty/','title':"cell-furo-stringoptionproperty",'section':"Typerenderer",'content':"cell-furo-stringoptionproperty #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-stringoptionproperty.js'; exports CellFuroStringoptionproperty js exports \u0026lt;cell-furo-stringoptionproperty\u0026gt; custom-element-definition extends /src/typerenderer/cell-furo-stringproperty.js superclass CellFuroStringproperty\n Summary: cell display renderer for furo.Stringoptionproperty\n Description #  cell-furo-stringoptionproperty The cell-furo-numberrproperty component displays a FieldNode of type furo.Stringoptionproperty in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':19,'href':'/docs/typerenderer/cell-furo-stringproperty/','title':"cell-furo-stringproperty",'section':"Typerenderer",'content':"cell-furo-stringproperty #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-stringproperty.js'; exports CellFuroStringproperty js exports \u0026lt;cell-furo-stringproperty\u0026gt; custom-element-definition extends /src/typerenderer/cell-string.js superclass CellString\n Summary: cell display renderer for furo.Stringproperty\n Description #  cell-furo-stringproperty The cell-furo-stringproperty component displays a FieldNode of type furo.Stringproperty in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':20,'href':'/docs/typerenderer/cell-furo-type-date/','title':"cell-furo-type-date",'section':"Typerenderer",'content':"cell-furo-type-date #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-type-date.js'; exports \u0026lt;cell-furo-type-date\u0026gt; custom-element-definition extends /src/typerenderer/cell-google-type-date.js superclass CellGoogleTypeDate\n Summary: cell display renderer for furo.type.Date\n Description #  cell-furo-type-date The cell-furo-type-date component displays a FieldNode of type furo.type.Date in read only mode.\nif the field display_name is set, the component will use that value for the display.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':21,'href':'/docs/typerenderer/cell-furo-type-money/','title':"cell-furo-type-money",'section':"Typerenderer",'content':"cell-furo-type-money #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-furo-type-money.js'; exports \u0026lt;cell-furo-type-money\u0026gt; custom-element-definition extends /src/typerenderer/cell-google-type-money.js superclass CellGoogleTypeMoney\n Summary: cell display renderer for furo.type.Money\n Description #  cell-furo-type-money The cell-furo-type-money component displays a FieldNode of type furo.type.Money in read only mode.\nif the field display_name is set, the component will use that value for the display.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':22,'href':'/docs/typerenderer/cell-google-protobuf-/','title':"cell-google-protobuf-",'section':"Typerenderer",'content':"cell-google-protobuf- #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-google-protobuf-floatvalue.js'; exports \u0026lt;cell-google-protobuf-floatvalue\u0026gt; custom-element-definition extends /src/typerenderer/cell-float.js superclass CellFloat\n Summary: cell display renderer for google.protobuf.\n Description #  cell-google-protobuf-floatvalue The cell-google-protobuf-floatvalue component displays a FieldNode of type google.protobuf.FloatValue in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  _displayValue #  default: ''\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':23,'href':'/docs/typerenderer/cell-google-protobuf-any/','title':"cell-google-protobuf-any",'section':"Typerenderer",'content':"cell-google-protobuf-any #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-google-protobuf-any.js'; exports \u0026lt;cell-google-protobuf-any\u0026gt; custom-element-definition superclass LitElement\n Summary: cell display renderer for google.protobuf.Any\n Description #  cell-google-protobuf-any The cell-google-protobuf-any component is a wrapper displays of type google.protobuf.Any in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  _typeResolved #  default: false\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the cell-google-protobuf-any is a simple proxy element to show the initial state if no data is available.\n fieldNode    "});index.add({'id':24,'href':'/docs/typerenderer/cell-google-protobuf-boolvalue/','title':"cell-google-protobuf-boolvalue",'section':"Typerenderer",'content':"cell-google-protobuf-boolvalue #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-google-protobuf-boolvalue.js'; exports \u0026lt;cell-google-protobuf-boolvalue\u0026gt; custom-element-definition extends /src/typerenderer/cell-bool.js superclass CellBool\n Summary: cell display renderer for google.protobuf.BoolValue\n Description #  cell-google-protobuf-boolvalue The cell-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.BoolValue in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode of type bool, furo.fat.Bool, google.wrapper.BoolValue   "});index.add({'id':25,'href':'/docs/typerenderer/cell-google-protobuf-doublevalue/','title':"cell-google-protobuf-doublevalue",'section':"Typerenderer",'content':"cell-google-protobuf-doublevalue #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-google-protobuf-doublevalue.js'; exports \u0026lt;cell-google-protobuf-doublevalue\u0026gt; custom-element-definition extends /src/typerenderer/cell-double.js superclass CellDouble\n Summary: cell display renderer for google.protobuf.DoubleValue\n Description #  cell-double The cell-double component displays a FieldNode of type google.protobuf.DoubleValue in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':26,'href':'/docs/typerenderer/cell-google-protobuf-int32value/','title':"cell-google-protobuf-int32value",'section':"Typerenderer",'content':"cell-google-protobuf-int32value #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-google-protobuf-int32value.js'; exports \u0026lt;cell-google-protobuf-int32value\u0026gt; custom-element-definition extends /src/typerenderer/cell-int32.js superclass CellInt32\n Summary: cell display renderer for google.protobuf.Int32Value\n Description #  cell-google-protobuf-boolvalue The cell-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.Int32Value in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':27,'href':'/docs/typerenderer/cell-google-protobuf-int64value/','title':"cell-google-protobuf-int64value",'section':"Typerenderer",'content':"cell-google-protobuf-int64value #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-google-protobuf-int64value.js'; exports \u0026lt;cell-google-protobuf-int64value\u0026gt; custom-element-definition extends /src/typerenderer/cell-int64.js superclass CellInt64\n Summary: cell display renderer for google.protobuf.Int64Value\n Description #  cell-google-protobuf-boolvalue The cell-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.Int64Value in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':28,'href':'/docs/typerenderer/cell-google-protobuf-stringvalue/','title':"cell-google-protobuf-stringvalue",'section':"Typerenderer",'content':"cell-google-protobuf-stringvalue #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-google-protobuf-stringvalue.js'; exports \u0026lt;cell-google-protobuf-stringvalue\u0026gt; custom-element-definition superclass LitElement\n Summary: cell display renderer for google.protobuf.StringValue\n Description #  cell-google-protobuf-stringvalue The cell-google-protobuf-stringvalue component displays a FieldNode of type google.protobuf.StringValue in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':29,'href':'/docs/typerenderer/cell-google-protobuf-timestamp/','title':"cell-google-protobuf-timestamp",'section':"Typerenderer",'content':"cell-google-protobuf-timestamp #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-google-protobuf-timestamp.js'; exports \u0026lt;cell-google-protobuf-timestamp\u0026gt; custom-element-definition superclass LitElement\n Summary: cell display renderer for google.protobuf.Timestamp\n Description #  cell-google-protobuf-timestamp The cell-google-protobuf-timestamp component displays a FieldNode of type google.prtobuf.Timestamp in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':30,'href':'/docs/typerenderer/cell-google-protobuf-uint32value/','title':"cell-google-protobuf-uint32value",'section':"Typerenderer",'content':"cell-google-protobuf-uint32value #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-google-protobuf-uint32value.js'; exports \u0026lt;cell-google-protobuf-uint32value\u0026gt; custom-element-definition extends /src/typerenderer/cell-uint32.js superclass CellUint32\n Summary: cell display renderer for google.protobuf.Uint32Value\n Description #  cell-google-protobuf-boolvalue The cell-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.Uint32Value in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':31,'href':'/docs/typerenderer/cell-google-protobuf-uint64value/','title':"cell-google-protobuf-uint64value",'section':"Typerenderer",'content':"cell-google-protobuf-uint64value #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-google-protobuf-uint64value.js'; exports \u0026lt;cell-google-protobuf-uint64value\u0026gt; custom-element-definition extends /src/typerenderer/cell-uint64.js superclass CellUint64\n Summary: cell display renderer for google.protobuf.Uint64Value\n Description #  cell-google-protobuf-boolvalue The cell-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.Uint64Value in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':32,'href':'/docs/typerenderer/cell-google-type-color/','title':"cell-google-type-color",'section':"Typerenderer",'content':"cell-google-type-color #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-google-type-color.js'; exports \u0026lt;cell-google-type-color\u0026gt; custom-element-definition superclass LitElement\n Summary: cell display renderer for google.type.Color\n Description #  cell-google-type-color The cell-google-type-color component displays a FieldNode of type google.type.Color in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  _red #  default: ''\n\n_green #  default: ''\n\n_blue #  default: ''\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':33,'href':'/docs/typerenderer/cell-google-type-date/','title':"cell-google-type-date",'section':"Typerenderer",'content':"cell-google-type-date #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-google-type-date.js'; exports CellGoogleTypeDate js exports \u0026lt;cell-google-type-date\u0026gt; custom-element-definition superclass LitElement\n Summary: cell display renderer for google.type.Date\n Description #  cell-google-type-date The cell-google-type-date component displays a FieldNode of type google.type.Date in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':34,'href':'/docs/typerenderer/cell-google-type-money/','title':"cell-google-type-money",'section':"Typerenderer",'content':"cell-google-type-money #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-google-type-money.js'; exports CellGoogleTypeMoney js exports \u0026lt;cell-google-type-money\u0026gt; custom-element-definition superclass LitElement\n Summary: cell display renderer for google.type.Money\n Description #  cell-google-type-money The cell-google-type-money component displays a FieldNode of type google.type.Money in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':35,'href':'/docs/typerenderer/cell-google-type-timeofday/','title':"cell-google-type-timeofday",'section':"Typerenderer",'content':"cell-google-type-timeofday #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-google-type-timeofday.js'; exports \u0026lt;cell-google-type-timeofday\u0026gt; custom-element-definition superclass LitElement\n Summary: cell display renderer for google.type.TimeOfDay\n Description #  cell-google-type-timeofday The cell-google-type-timeofday component displays a FieldNode of type google.type.TimeOfDay in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':36,'href':'/docs/typerenderer/cell-int32/','title':"cell-int32",'section':"Typerenderer",'content':"cell-int32 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-int32.js'; exports CellInt32 js exports \u0026lt;cell-int32\u0026gt; custom-element-definition superclass LitElement\n Summary: cell display renderer for int32\n Description #  cell-int32 The cell-int32 component displays a FieldNode of type int32 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':37,'href':'/docs/typerenderer/cell-int64/','title':"cell-int64",'section':"Typerenderer",'content':"cell-int64 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-int64.js'; exports CellInt64 js exports \u0026lt;cell-int64\u0026gt; custom-element-definition superclass LitElement\n Summary: cell display renderer for int64\n Description #  cell-int64 The cell-int64 component displays a FieldNode of type int64 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':38,'href':'/docs/typerenderer/cell-string/','title':"cell-string",'section':"Typerenderer",'content':"cell-string #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-string.js'; exports CellString js exports \u0026lt;cell-string\u0026gt; custom-element-definition superclass LitElement\n Summary: cell display renderer for string\n Description #  cell-string The cell-string component displays a FieldNode of type string in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':39,'href':'/docs/typerenderer/cell-uint32/','title':"cell-uint32",'section':"Typerenderer",'content':"cell-uint32 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-uint32.js'; exports CellUint32 js exports \u0026lt;cell-uint32\u0026gt; custom-element-definition extends /src/typerenderer/cell-int32.js superclass CellInt32\n Summary: cell display renderer for uint32\n Description #  cell-uint32 The cell-uint32 component displays a FieldNode of type uint32 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':40,'href':'/docs/typerenderer/cell-uint64/','title':"cell-uint64",'section':"Typerenderer",'content':"cell-uint64 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/cell-uint64.js'; exports CellUint64 js exports \u0026lt;cell-uint64\u0026gt; custom-element-definition extends /src/typerenderer/cell-int64.js superclass CellInt64\n Summary: cell display renderer for uint64\n Description #  cell-uint64 The cell-uint64 component displays a FieldNode of type uint64 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':41,'href':'/docs/typerenderer/celledit-bool/','title':"celledit-bool",'section':"Typerenderer",'content':"celledit-bool #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/celledit-bool.js'; exports CelleditBool js extends /src/furo-ui5-checkbox-input.js superclass FuroUi5CheckboxInput\n Summary: celledit renderer for bool\n Description #  celledit-bool is a celledit context renderer.\nIt uses furo-ui5-checkbox-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':42,'href':'/docs/typerenderer/celledit-double/','title':"celledit-double",'section':"Typerenderer",'content':"celledit-double #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/celledit-double.js'; exports CelleditDouble js extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\n Summary: celledit renderer for double\n Description #  celledit-double is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':43,'href':'/docs/typerenderer/celledit-float/','title':"celledit-float",'section':"Typerenderer",'content':"celledit-float #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/celledit-float.js'; exports CelleditFloat js extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\n Summary: celledit renderer for float\n Description #  celledit-float is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':44,'href':'/docs/typerenderer/celledit-furo-bigdecimal/','title':"celledit-furo-bigdecimal",'section':"Typerenderer",'content':"celledit-furo-bigdecimal #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/celledit-furo-bigdecimal.js'; exports CelleditFuroBigdecimal js extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\n Summary: celledit renderer for type furo.BigDecimal\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':45,'href':'/docs/typerenderer/celledit-furo-fat-int32/','title':"celledit-furo-fat-int32",'section':"Typerenderer",'content':"celledit-furo-fat-int32 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/celledit-furo-fat-int32.js'; exports CelleditFuroFatInt32 js extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\n Summary: celledit renderer for furo.fat.Int32\n Description #  celledit-furo-fat-int32 is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':46,'href':'/docs/typerenderer/celledit-furo-fat-int64/','title':"celledit-furo-fat-int64",'section':"Typerenderer",'content':"celledit-furo-fat-int64 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/celledit-furo-fat-int64.js'; exports CelleditFuroFatInt64 js extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\n Summary: celledit renderer for furo.fat.Int64\n Description #  celledit-furo-fat-int64 is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':47,'href':'/docs/typerenderer/celledit-furo-link/','title':"celledit-furo-link",'section':"Typerenderer",'content':"celledit-furo-link #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/celledit-furo-link.js'; exports \u0026lt;celledit-furo-link\u0026gt; custom-element-definition superclass LitElement\n Summary: celledit renderer for furo.Link\n Description #  celledit-furo-link The celledit-furo-link component displays a FieldNode of type furo.Link in read only mode.\nEvery celledit-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':48,'href':'/docs/typerenderer/celledit-furo-property/','title':"celledit-furo-property",'section':"Typerenderer",'content':"celledit-furo-property #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/celledit-furo-property.js'; exports CelleditFuroProperty js exports \u0026lt;celledit-furo-property\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: celledit renderer for furo.Property\n Description #  celledit-furo-property The celledit-furo-property component displays a FieldNode of type furo.Property in read only mode.\nEvery celledit-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  noDataText #  noDataText string default: ''\nDefines the empty state display With a furo.Property type, the effective type is only known when the data is transmitted. Default: '' _typeResolved #  default: false\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the celledit-furo-property is a simple proxy element to show the initial state if no data is available.\n fieldNode    _warning #  _warning() ⟹ void\n* → ƒ\u0026ndash;warning\n\n"});index.add({'id':49,'href':'/docs/typerenderer/celledit-furo-property-repeated/','title':"celledit-furo-property-repeated",'section':"Typerenderer",'content':"celledit-furo-property-repeated #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/celledit-furo-property-repeated.js'; exports CelleditFuroPropertyRepeated js exports \u0026lt;celledit-furo-property-repeated\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: celledit renderer for [] furo.Property\n Description #  celledit-furo-property-repeats The celledit-furo-property-repeats component displays a FieldNode of type furo.Property in read only mode.\nEvery celledit-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  elementList #  default: []\n\n_typeResolved #  default: false\n\nnoDataText #  noDataText \nDefines the empty state display With a furo.Property type, the effective type is only known when the data is transmitted. Default: '' Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the celledit-furo-property-repeats is a simple proxy element to show the initial state if no data is available.\n fieldNode    _updateFieldList #  _updateFieldList() ⟹ void\n* → ƒ\u0026ndash;update-field-list\n\n"});index.add({'id':50,'href':'/docs/typerenderer/celledit-furo-reference/','title':"celledit-furo-reference",'section':"Typerenderer",'content':"celledit-furo-reference #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/celledit-furo-reference.js'; exports CelleditFuroReference js exports \u0026lt;celledit-furo-reference\u0026gt; custom-element-definition extends /src/furo-ui5-reference-search.js superclass FuroUi5ReferenceSearch\n Summary: celledit renderer for furo.Reference\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':51,'href':'/docs/typerenderer/celledit-furo-type-money/','title':"celledit-furo-type-money",'section':"Typerenderer",'content':"celledit-furo-type-money #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/celledit-furo-type-money.js'; exports \u0026lt;celledit-furo-type-money\u0026gt; custom-element-definition extends /src/furo-ui5-money-input.js superclass FuroUi5MoneyInput\n Summary: celledit renderer for furo.type.Money\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':52,'href':'/docs/typerenderer/celledit-google-protobuf-any/','title':"celledit-google-protobuf-any",'section':"Typerenderer",'content':"celledit-google-protobuf-any #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/celledit-google-protobuf-any.js'; exports \u0026lt;celledit-google-protobuf-any\u0026gt; custom-element-definition superclass LitElement\n Summary: celledit renderer for google.protobuf.Any\n Description #  celledit-google-protobuf-any The celledit-google-protobuf-any component is a wrapper displays of type google.protobuf.Any in read only mode.\nEvery celledit-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  _typeResolved #  default: false\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the celledit-google-protobuf-any is a simple proxy element to show the initial state if no data is available.\n fieldNode    "});index.add({'id':53,'href':'/docs/typerenderer/celledit-google-type-money/','title':"celledit-google-type-money",'section':"Typerenderer",'content':"celledit-google-type-money #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/celledit-google-type-money.js'; exports \u0026lt;celledit-google-type-money\u0026gt; custom-element-definition extends /src/furo-ui5-money-input.js superclass FuroUi5MoneyInput\n Summary: celledit renderer for google.type.Money\n Description #  celledit-google-type-money is a celledit context renderer.\nIt uses furo-ui5-money-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':54,'href':'/docs/typerenderer/celledit-int32/','title':"celledit-int32",'section':"Typerenderer",'content':"celledit-int32 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/celledit-int32.js'; exports CelleditInt32 js extends /src/furo-ui5-number-input.js superclass FuroUi5NumberInput\n Summary: celledit renderer for int32\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':55,'href':'/docs/typerenderer/celledit-int64/','title':"celledit-int64",'section':"Typerenderer",'content':"celledit-int64 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/celledit-int64.js'; exports CelleditInt64 js extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\n Summary: celledit renderer for int64\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':56,'href':'/docs/typerenderer/celledit-string/','title':"celledit-string",'section':"Typerenderer",'content':"celledit-string #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/celledit-string.js'; exports CelleditString js extends /src/furo-ui5-text-input.js superclass FuroUi5TextInput\n Summary: celledit renderer for string\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':57,'href':'/docs/typerenderer/celledit-uint32/','title':"celledit-uint32",'section':"Typerenderer",'content':"celledit-uint32 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/celledit-uint32.js'; exports CelleditUint32 js extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\n Summary: celledit renderer for uint32\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':58,'href':'/docs/typerenderer/celledit-uint64/','title':"celledit-uint64",'section':"Typerenderer",'content':"celledit-uint64 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/celledit-uint64.js'; exports CelleditUint64 js extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\n Summary: celledit renderer for uint64\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':59,'href':'/docs/typerenderer/display-bool/','title':"display-bool",'section':"Typerenderer",'content':"display-bool #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-bool.js'; exports DisplayBool js exports \u0026lt;display-bool\u0026gt; custom-element-definition superclass LitElement\n Summary: display renderer for bool\n Description #  display-bool The display-bool component displays a FieldNode of type bool in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':60,'href':'/docs/typerenderer/display-double/','title':"display-double",'section':"Typerenderer",'content':"display-double #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-double.js'; exports DisplayDouble js exports \u0026lt;display-double\u0026gt; custom-element-definition superclass LitElement\n Summary: display renderer for double\n Description #  display-double The display-double component displays a FieldNode of type double in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':61,'href':'/docs/typerenderer/display-float/','title':"display-float",'section':"Typerenderer",'content':"display-float #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-float.js'; exports DisplayFloat js exports \u0026lt;display-float\u0026gt; custom-element-definition superclass LitElement\n Summary: display renderer for float\n Description #  display-float The display-float component displays a FieldNode of type float in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':62,'href':'/docs/typerenderer/display-furo-/','title':"display-furo-",'section':"Typerenderer",'content':"display-furo- #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-integerproperty.js'; exports DisplayFuroIntegerproperty js exports \u0026lt;display-furo-integerproperty\u0026gt; custom-element-definition extends /src/typerenderer/display-int32.js superclass DisplayInt32\n Summary: display renderer for furo.\n Description #  display-furo-integerproperty The display-furo-integerproperty component displays a FieldNode of type furo.Integerproperty in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':63,'href':'/docs/typerenderer/display-furo-bigdecimal/','title':"display-furo-bigdecimal",'section':"Typerenderer",'content':"display-furo-bigdecimal #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-bigdecimal.js'; exports DisplayFuroBigdecimal js exports \u0026lt;display-furo-bigdecimal\u0026gt; custom-element-definition superclass LitElement\n Summary: display renderer for furo.BigDecimal\n Description #  display-furo-bigdecimal The display-furo-bigdecimal component displays a FieldNode of type furo.BigDecimal in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nAttributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':64,'href':'/docs/typerenderer/display-furo-fat-bool/','title':"display-furo-fat-bool",'section':"Typerenderer",'content':"display-furo-fat-bool #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-fat-bool.js'; exports \u0026lt;display-furo-fat-bool\u0026gt; custom-element-definition extends /src/typerenderer/display-bool.js superclass DisplayBool\n Summary: display renderer for furo.fat.Bool\n Description #  display-furo-fat-bool The display-furo-fat-bool component displays a FieldNode of type furo.fat.bool in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':65,'href':'/docs/typerenderer/display-furo-fat-double/','title':"display-furo-fat-double",'section':"Typerenderer",'content':"display-furo-fat-double #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-fat-double.js'; exports \u0026lt;display-furo-fat-double\u0026gt; custom-element-definition extends /src/typerenderer/display-double.js superclass DisplayDouble\n Summary: display renderer for furo.fat.Double\n Description #  display-furo-fat-double The display-furo-fat-double component displays a FieldNode of type furo.fat.Double in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':66,'href':'/docs/typerenderer/display-furo-fat-float/','title':"display-furo-fat-float",'section':"Typerenderer",'content':"display-furo-fat-float #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-fat-float.js'; exports \u0026lt;display-furo-fat-float\u0026gt; custom-element-definition extends /src/typerenderer/display-float.js superclass DisplayFloat\n Summary: display renderer for furo.fat.Float\n Description #  display-furo-fat-float The display-furo-fat-float component displays a FieldNode of type furo.fat.Float in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':67,'href':'/docs/typerenderer/display-furo-fat-int32/','title':"display-furo-fat-int32",'section':"Typerenderer",'content':"display-furo-fat-int32 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-fat-int32.js'; exports DisplayFuroFatInt32 js exports \u0026lt;display-furo-fat-int32\u0026gt; custom-element-definition extends /src/typerenderer/display-int32.js superclass DisplayInt32\n Summary: display renderer for furo.fat.Int32\n Description #  display-int32 The display-int32 component displays a FieldNode of type furo.fat.Int32 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':68,'href':'/docs/typerenderer/display-furo-fat-int64/','title':"display-furo-fat-int64",'section':"Typerenderer",'content':"display-furo-fat-int64 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-fat-int64.js'; exports DisplayFuroFatInt64 js exports \u0026lt;display-furo-fat-int64\u0026gt; custom-element-definition extends /src/typerenderer/display-furo-fat-int32.js superclass DisplayFuroFatInt32\n Summary: display renderer for furo.fat.Int64\n Description #  display-furo-fat-int64 The display-furo-fat-int64 component displays a FieldNode of type furo.fat.int64 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':69,'href':'/docs/typerenderer/display-furo-fat-string/','title':"display-furo-fat-string",'section':"Typerenderer",'content':"display-furo-fat-string #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-fat-string.js'; exports \u0026lt;display-furo-fat-string\u0026gt; custom-element-definition superclass LitElement\n Summary: display renderer for furo.fat.String\n Description #  display-furo-fat-string The display-furo-fat-string component displays a FieldNode of type furo.fat.String in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _updateMeta #  _updateMeta() ⟹ void\n* → ƒ\u0026ndash;update-meta\n\n_formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':70,'href':'/docs/typerenderer/display-furo-fat-Uint32/','title':"display-furo-fat-Uint32",'section':"Typerenderer",'content':"display-furo-fat-Uint32 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-fat-uint32.js'; exports \u0026lt;display-furo-fat-uint32\u0026gt; custom-element-definition extends /src/typerenderer/display-furo-fat-int32.js superclass DisplayFuroFatInt32\n Summary: display renderer for furo.fat.Uint32\n Description #  display-furo-fat-uint32 The display-furo-fat-uint32 component displays a FieldNode of type furo.fat.Uint32 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':71,'href':'/docs/typerenderer/display-furo-fat-uint64/','title':"display-furo-fat-uint64",'section':"Typerenderer",'content':"display-furo-fat-uint64 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-fat-uint64.js'; exports \u0026lt;display-furo-fat-uint64\u0026gt; custom-element-definition extends /src/typerenderer/display-furo-fat-int64.js superclass DisplayFuroFatInt64\n Summary: display renderer for furo.fat.Uint64\n Description #  display-furo-fat-uint64 The display-furo-fat-uint64 component displays a FieldNode of type furo.fat.uint64 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':72,'href':'/docs/typerenderer/display-furo-link/','title':"display-furo-link",'section':"Typerenderer",'content':"display-furo-link #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-link.js'; exports \u0026lt;display-furo-link\u0026gt; custom-element-definition superclass LitElement\n Summary: display renderer for furo.Link\n Description #  display-furo-link The display-furo-link component displays a FieldNode of type furo.Link in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':73,'href':'/docs/typerenderer/display-furo-numberproperty/','title':"display-furo-numberproperty",'section':"Typerenderer",'content':"display-furo-numberproperty #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-numberproperty.js'; exports DisplayFuroNumberproperty js exports \u0026lt;display-furo-numberproperty\u0026gt; custom-element-definition extends /src/typerenderer/display-furo-integerproperty.js superclass DisplayFuroIntegerproperty\n Summary: display renderer for furo.Numberproperty\n Description #  display-furo-numberproperty The display-furo-numberrproperty component displays a FieldNode of type furo.Numberproperty in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':74,'href':'/docs/typerenderer/display-furo-property/','title':"display-furo-property",'section':"Typerenderer",'content':"display-furo-property #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-property.js'; exports DisplayFuroProperty js exports \u0026lt;display-furo-property\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: display renderer for furo.Property\n Description #  display-furo-property The display-furo-property component displays a FieldNode of type furo.Property in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  noDataText #  noDataText string default: ''\nDefines the empty state display With a furo.Property type, the effective type is only known when the data is transmitted. Default: '' _typeResolved #  default: false\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the display-furo-property is a simple proxy element to show the initial state if no data is available.\n fieldNode    "});index.add({'id':75,'href':'/docs/typerenderer/display-furo-property-labeled/','title':"display-furo-property-labeled",'section':"Typerenderer",'content':"display-furo-property-labeled #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-property-repeats-labeled.js'; exports DisplayFuroPropertyRepeatsLabeled js exports \u0026lt;display-furo-property-repeats-labeled\u0026gt; custom-element-definition extends /src/typerenderer/display-furo-property-repeated.js superclass DisplayFuroPropertyRepeated\n Summary: display renderer for [] furo.Property with labels\n Description #  display-furo-property-repeats-labeled The display-furo-property-repeats-labeled component displays a RepeaterNode of type furo.Property in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  elementList #  default: []\n\n_typeResolved #  default: false\n\nnoDataText #  noDataText \nDefines the empty state display With a furo.Property type, the effective type is only known when the data is transmitted. Default: '' Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the display-furo-property-repeats is a simple proxy element to show the initial state if no data is available.\n fieldNode    "});index.add({'id':76,'href':'/docs/typerenderer/display-furo-property-repeated/','title':"display-furo-property-repeated",'section':"Typerenderer",'content':"display-furo-property-repeated #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-property-repeated.js'; exports DisplayFuroPropertyRepeated js exports \u0026lt;display-furo-property-repeated\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: display renderer for [] furo.Property\n Description #  display-furo-property-repeats The display-furo-property-repeats component displays a FieldNode of type furo.Property in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  elementList #  default: []\n\n_typeResolved #  default: false\n\nnoDataText #  noDataText \nDefines the empty state display With a furo.Property type, the effective type is only known when the data is transmitted. Default: '' Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the display-furo-property-repeats is a simple proxy element to show the initial state if no data is available.\n fieldNode    _updateFieldList #  _updateFieldList() ⟹ void\n* → ƒ\u0026ndash;update-field-list\n\n"});index.add({'id':77,'href':'/docs/typerenderer/display-furo-reference/','title':"display-furo-reference",'section':"Typerenderer",'content':"display-furo-reference #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-reference.js'; exports \u0026lt;display-furo-reference\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: display renderer for furo.Reference\n Description #  display-furo-reference The display-furo-reference component displays a FieldNode of type furo.Reference in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Events #  selected #  @-selected → ``\nwhen item was clicked or selected, because click from ui5 does not bubble Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':78,'href':'/docs/typerenderer/display-furo-stringoptionproperty/','title':"display-furo-stringoptionproperty",'section':"Typerenderer",'content':"display-furo-stringoptionproperty #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-stringoptionproperty.js'; exports DisplayFuroStringoptionproperty js exports \u0026lt;display-furo-stringoptionproperty\u0026gt; custom-element-definition extends /src/typerenderer/display-furo-stringproperty.js superclass DisplayFuroStringproperty\n Summary: display renderer for furo.Stringoptionproperty\n Description #  display-furo-stringoptionproperty The display-furo-numberrproperty component displays a FieldNode of type furo.Stringoptionproperty in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':79,'href':'/docs/typerenderer/display-furo-stringproperty/','title':"display-furo-stringproperty",'section':"Typerenderer",'content':"display-furo-stringproperty #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-stringproperty.js'; exports DisplayFuroStringproperty js exports \u0026lt;display-furo-stringproperty\u0026gt; custom-element-definition extends /src/typerenderer/display-string.js superclass DisplayString\n Summary: display renderer for furo.Stringproperty\n Description #  display-furo-stringproperty The display-furo-stringproperty component displays a FieldNode of type furo.Stringproperty in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':80,'href':'/docs/typerenderer/display-furo-type-date/','title':"display-furo-type-date",'section':"Typerenderer",'content':"display-furo-type-date #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-type-date.js'; exports \u0026lt;display-furo-type-date\u0026gt; custom-element-definition extends /src/typerenderer/display-google-type-date.js superclass DisplayGoogleTypeDate\n Summary: display renderer for furo.type.Date\n Description #  display-furo-type-date The display-furo-type-date component displays a FieldNode of type furo.type.Date in read only mode.\nif the field display_name is set, the component will use that value for the display.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':81,'href':'/docs/typerenderer/display-furo-type-money/','title':"display-furo-type-money",'section':"Typerenderer",'content':"display-furo-type-money #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-furo-type-money.js'; exports \u0026lt;display-furo-type-money\u0026gt; custom-element-definition extends /src/typerenderer/display-google-type-money.js superclass DisplayGoogleTypeMoney\n Summary: display renderer for furo.type.Money\n Description #  display-furo-type-money The display-furo-type-money component displays a FieldNode of type furo.type.Money in read only mode.\nif the field display_name is set, the component will use that value for the display.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':82,'href':'/docs/typerenderer/display-google-protobuf-/','title':"display-google-protobuf-",'section':"Typerenderer",'content':"display-google-protobuf- #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-google-protobuf-any.js'; exports \u0026lt;display-google-protobuf-any\u0026gt; custom-element-definition superclass LitElement\n Summary: display renderer for google.protobuf.\n Description #  display-google-protobuf-any The display-google-protobuf-any component is a wrapper displays of type google.protobuf.Any in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  _typeResolved #  default: false\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the display-google-protobuf-any is a simple proxy element to show the initial state if no data is available.\n fieldNode    "});index.add({'id':83,'href':'/docs/typerenderer/display-google-protobuf-boolvalue/','title':"display-google-protobuf-boolvalue",'section':"Typerenderer",'content':"display-google-protobuf-boolvalue #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-google-protobuf-boolvalue.js'; exports \u0026lt;display-google-protobuf-boolvalue\u0026gt; custom-element-definition extends /src/typerenderer/display-bool.js superclass DisplayBool\n Summary: display renderer for google.protobuf.BoolValue\n Description #  display-google-protobuf-boolvalue The display-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.BoolValue in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':84,'href':'/docs/typerenderer/display-google-protobuf-doublevalue/','title':"display-google-protobuf-doublevalue",'section':"Typerenderer",'content':"display-google-protobuf-doublevalue #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-google-protobuf-doublevalue.js'; exports \u0026lt;display-google-protobuf-doublevalue\u0026gt; custom-element-definition extends /src/typerenderer/display-double.js superclass DisplayDouble\n Summary: display renderer for google.protobuf.DoubleValue\n Description #  display-double The display-double component displays a FieldNode of type google.protobuf.DoubleValue in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':85,'href':'/docs/typerenderer/display-google-protobuf-floatvalue/','title':"display-google-protobuf-floatvalue",'section':"Typerenderer",'content':"display-google-protobuf-floatvalue #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-google-protobuf-floatvalue.js'; exports \u0026lt;display-google-protobuf-floatvalue\u0026gt; custom-element-definition extends /src/typerenderer/display-float.js superclass DisplayFloat\n Summary: display renderer for google.protobuf.FloatValue\n Description #  display-google-protobuf-floatvalue The display-google-protobuf-floatvalue component displays a FieldNode of type google.protobuf.FloatValue in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':86,'href':'/docs/typerenderer/display-google-protobuf-int32Value/','title':"display-google-protobuf-int32Value",'section':"Typerenderer",'content':"display-google-protobuf-int32Value #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-google-protobuf-int32value.js'; exports \u0026lt;display-google-protobuf-int32value\u0026gt; custom-element-definition extends /src/typerenderer/display-int32.js superclass DisplayInt32\n Summary: display renderer for google.protobuf.Int32Value\n Description #  display-google-protobuf-boolvalue The display-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.Int32Value in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':87,'href':'/docs/typerenderer/display-google-protobuf-int64Value/','title':"display-google-protobuf-int64Value",'section':"Typerenderer",'content':"display-google-protobuf-int64Value #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-google-protobuf-int64value.js'; exports \u0026lt;display-google-protobuf-int64value\u0026gt; custom-element-definition extends /src/typerenderer/display-int64.js superclass DisplayInt64\n Summary: display renderer for google.protobuf.Int64Value\n Description #  display-google-protobuf-boolvalue The display-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.Int64Value in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':88,'href':'/docs/typerenderer/display-google-protobuf-stringvalue/','title':"display-google-protobuf-stringvalue",'section':"Typerenderer",'content':"display-google-protobuf-stringvalue #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-google-protobuf-stringvalue.js'; exports \u0026lt;display-google-protobuf-stringvalue\u0026gt; custom-element-definition extends /src/typerenderer/display-string.js superclass DisplayString\n Summary: display renderer for google.protobuf.StringValue\n Description #  display-google-protobuf-stringvalue The display-google-protobuf-stringvalue component displays a FieldNode of type google.protobuf.StringValue in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':89,'href':'/docs/typerenderer/display-google-protobuf-timestamp/','title':"display-google-protobuf-timestamp",'section':"Typerenderer",'content':"display-google-protobuf-timestamp #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-google-protobuf-timestamp.js'; exports \u0026lt;display-google-protobuf-timestamp\u0026gt; custom-element-definition superclass LitElement\n Summary: display renderer for google.protobuf.Timestamp\n Description #  display-google-protobuf-timestamp The display-google-protobuf-timestamp component displays a FieldNode of type google.prtobuf.Timestamp in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':90,'href':'/docs/typerenderer/display-google-protobuf-uint32value/','title':"display-google-protobuf-uint32value",'section':"Typerenderer",'content':"display-google-protobuf-uint32value #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-google-protobuf-uint32value.js'; exports \u0026lt;display-google-protobuf-uint32value\u0026gt; custom-element-definition extends /src/typerenderer/display-uint32.js superclass DisplayUint32\n Summary: display renderer for google.protobuf.Uint32Value\n Description #  display-google-protobuf-boolvalue The display-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.Uint32Value in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':91,'href':'/docs/typerenderer/display-google-protobuf-uint64value/','title':"display-google-protobuf-uint64value",'section':"Typerenderer",'content':"display-google-protobuf-uint64value #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-google-protobuf-uint64value.js'; exports \u0026lt;display-google-protobuf-uint64value\u0026gt; custom-element-definition extends /src/typerenderer/display-uint64.js superclass DisplayUint64\n Summary: display renderer for google.protobuf.Uint64Value\n Description #  display-google-protobuf-boolvalue The display-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.Uint64Value in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':92,'href':'/docs/typerenderer/display-google-type-color/','title':"display-google-type-color",'section':"Typerenderer",'content':"display-google-type-color #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-google-type-color.js'; exports \u0026lt;display-google-type-color\u0026gt; custom-element-definition superclass LitElement\n Summary: display renderer for google.type.Color\n Description #  display-google-type-color The display-google-type-color component displays a FieldNode of type google.type.Color in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  _red #  default: ''\n\n_green #  default: ''\n\n_blue #  default: ''\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':93,'href':'/docs/typerenderer/display-google-type-date/','title':"display-google-type-date",'section':"Typerenderer",'content':"display-google-type-date #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-google-type-date.js'; exports DisplayGoogleTypeDate js exports \u0026lt;display-google-type-date\u0026gt; custom-element-definition superclass LitElement\n Summary: display renderer for google.type.Date\n Description #  display-google-type-date The display-google-type-date component displays a FieldNode of type google.type.Date in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':94,'href':'/docs/typerenderer/display-google-type-money/','title':"display-google-type-money",'section':"Typerenderer",'content':"display-google-type-money #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-google-type-money.js'; exports DisplayGoogleTypeMoney js exports \u0026lt;display-google-type-money\u0026gt; custom-element-definition superclass LitElement\n Summary: display renderer for google.type.Money\n Description #  display-google-type-money The display-google-type-money component displays a FieldNode of type google.type.Money in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':95,'href':'/docs/typerenderer/display-google-type-timeofday/','title':"display-google-type-timeofday",'section':"Typerenderer",'content':"display-google-type-timeofday #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-google-type-timeofday.js'; exports \u0026lt;display-google-type-timeofday\u0026gt; custom-element-definition superclass LitElement\n Summary: display renderer for google.type.TimeOfDay\n Description #  display-google-type-timeofday The display-google-type-timeofday component displays a FieldNode of type google.type.TimeOfDay in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':96,'href':'/docs/typerenderer/display-int32/','title':"display-int32",'section':"Typerenderer",'content':"display-int32 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-int32.js'; exports DisplayInt32 js exports \u0026lt;display-int32\u0026gt; custom-element-definition superclass LitElement\n Summary: display renderer for int32\n Description #  display-int32 The display-int32 component displays a FieldNode of type int32 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':97,'href':'/docs/typerenderer/display-int64/','title':"display-int64",'section':"Typerenderer",'content':"display-int64 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-int64.js'; exports DisplayInt64 js exports \u0026lt;display-int64\u0026gt; custom-element-definition superclass LitElement\n Summary: display renderer for int64\n Description #  display-int64 The display-int64 component displays a FieldNode of type int64 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':98,'href':'/docs/typerenderer/display-string/','title':"display-string",'section':"Typerenderer",'content':"display-string #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-string.js'; exports DisplayString js exports \u0026lt;display-string\u0026gt; custom-element-definition superclass LitElement\n Summary: display renderer for string\n Description #  display-string The display-string component displays a FieldNode of type string in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':99,'href':'/docs/typerenderer/display-uint32/','title':"display-uint32",'section':"Typerenderer",'content':"display-uint32 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-uint32.js'; exports DisplayUint32 js exports \u0026lt;display-uint32\u0026gt; custom-element-definition extends /src/typerenderer/display-int32.js superclass DisplayInt32\n Summary: display renderer for uint32\n Description #  display-uint32 The display-uint32 component displays a FieldNode of type uint32 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':100,'href':'/docs/typerenderer/display-uint64/','title':"display-uint64",'section':"Typerenderer",'content':"display-uint64 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/display-uint64.js'; exports DisplayUint64 js exports \u0026lt;display-uint64\u0026gt; custom-element-definition extends /src/typerenderer/display-int64.js superclass DisplayInt64\n Summary: display renderer for uint64\n Description #  display-uint64 The display-uint64 component displays a FieldNode of type uint64 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':101,'href':'/docs/typerenderer/form-bool/','title':"form-bool",'section':"Typerenderer",'content':"form-bool #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-bool.js'; exports FormBool js exports \u0026lt;form-bool\u0026gt; custom-element-definition extends /src/furo-ui5-checkbox-input-labeled.js superclass FuroUi5CheckboxInputLabeled\n Summary: form renderer for bool\n Description #  form-bool is a form context renderer.\nIt uses furo-ui5-checkbox-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':102,'href':'/docs/typerenderer/form-double/','title':"form-double",'section':"Typerenderer",'content':"form-double #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-double.js'; exports FormDouble js exports \u0026lt;form-double\u0026gt; custom-element-definition extends /src/furo-ui5-number-input-labeled.js superclass FuroUi5NumberInputLabeled\n Summary: form renderer for double\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':103,'href':'/docs/typerenderer/form-float/','title':"form-float",'section':"Typerenderer",'content':"form-float #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-float.js'; exports FormFloat js exports \u0026lt;form-float\u0026gt; custom-element-definition extends /src/furo-ui5-number-input-labeled.js superclass FuroUi5NumberInputLabeled\n Summary: form renderer for float\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':104,'href':'/docs/typerenderer/form-furo-bigdecimal/','title':"form-furo-bigdecimal",'section':"Typerenderer",'content':"form-furo-bigdecimal #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-furo-bigdecimal.js'; exports FormFuroBigdecimal js exports \u0026lt;form-furo-bigdecimal\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Summary: form renderer for type furo.BigDecimal\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':105,'href':'/docs/typerenderer/form-furo-fat-bool/','title':"form-furo-fat-bool",'section':"Typerenderer",'content':"form-furo-fat-bool #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-furo-fat-bool.js'; exports \u0026lt;form-furo-fat-bool\u0026gt; custom-element-definition extends /src/typerenderer/form-bool.js superclass FormBool\n Summary: form renderer for furo.fat.Bool\n Description #  form-furo-fat-bool is a form context renderer.\nIt uses furo-ui5-checkbox-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':106,'href':'/docs/typerenderer/form-furo-fat-double/','title':"form-furo-fat-double",'section':"Typerenderer",'content':"form-furo-fat-double #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-furo-fat-double.js'; exports \u0026lt;form-furo-fat-double\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Summary: form renderer for furo.fat.Double\n Description #  form-furo-fat-double is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':107,'href':'/docs/typerenderer/form-furo-fat-float/','title':"form-furo-fat-float",'section':"Typerenderer",'content':"form-furo-fat-float #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-furo-fat-float.js'; exports \u0026lt;form-furo-fat-float\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Summary: form renderer for furo.fat.Float\n Description #  form-furo-fat-float is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':108,'href':'/docs/typerenderer/form-furo-fat-int32/','title':"form-furo-fat-int32",'section':"Typerenderer",'content':"form-furo-fat-int32 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-furo-fat-int32.js'; exports FormFuroFatInt32 js exports \u0026lt;form-furo-fat-int32\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Summary: form renderer for furo.fat.Int32\n Description #  form-furo-fat-int32 is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':109,'href':'/docs/typerenderer/form-furo-fat-int64/','title':"form-furo-fat-int64",'section':"Typerenderer",'content':"form-furo-fat-int64 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-furo-fat-int64.js'; exports FormFuroFatInt64 js exports \u0026lt;form-furo-fat-int64\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Summary: form renderer for furo.fat.Int64\n Description #  form-furo-fat-int64 is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':110,'href':'/docs/typerenderer/form-furo-fat-string/','title':"form-furo-fat-string",'section':"Typerenderer",'content':"form-furo-fat-string #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-furo-fat-string.js'; exports \u0026lt;form-furo-fat-string\u0026gt; custom-element-definition extends /src/furo-ui5-text-input-labeled.js superclass FuroUi5TextInputLabeled\n Summary: form renderer for furo.fat.String\n Description #  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    "});index.add({'id':111,'href':'/docs/typerenderer/form-furo-fat-uint32/','title':"form-furo-fat-uint32",'section':"Typerenderer",'content':"form-furo-fat-uint32 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-furo-fat-uint32.js'; exports \u0026lt;form-furo-fat-uint32\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Summary: form renderer for furo.fat.Uint32\n Description #  form-furo-fat-uint32 is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':112,'href':'/docs/typerenderer/form-furo-fat-uint64/','title':"form-furo-fat-uint64",'section':"Typerenderer",'content':"form-furo-fat-uint64 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-furo-fat-uint64.js'; exports \u0026lt;form-furo-fat-uint64\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Summary: form renderer for furo.fat.Uint64\n Description #  form-furo-fat-uint64 is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':113,'href':'/docs/typerenderer/form-furo-integerproperty/','title':"form-furo-integerproperty",'section':"Typerenderer",'content':"form-furo-integerproperty #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-furo-numberproperty.js'; exports \u0026lt;form-furo-numberproperty\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Summary: form renderer for furo.Integerproperty\n Description #  form-furo-integerproperty is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    "});index.add({'id':114,'href':'/docs/typerenderer/form-furo-reference/','title':"form-furo-reference",'section':"Typerenderer",'content':"form-furo-reference #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-furo-reference.js'; exports \u0026lt;form-furo-reference\u0026gt; custom-element-definition extends /src/furo-ui5-reference-search-labeled.js superclass FuroUi5ReferenceSearchLabeled\n Summary: form renderer for furo.Reference\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':115,'href':'/docs/typerenderer/form-furo-stringoptionproperty/','title':"form-furo-stringoptionproperty",'section':"Typerenderer",'content':"form-furo-stringoptionproperty #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-furo-stringoptionproperty.js'; exports \u0026lt;form-furo-stringoptionproperty\u0026gt; custom-element-definition extends /src/furo-ui5-select-labeled.js superclass FuroUi5SelectLabeled\n Summary: form renderer for furo.Stringoptionproperty\n Description #  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    "});index.add({'id':116,'href':'/docs/typerenderer/form-furo-stringproperty/','title':"form-furo-stringproperty",'section':"Typerenderer",'content':"form-furo-stringproperty #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-furo-stringproperty.js'; exports FormFuroStringproperty js exports \u0026lt;form-furo-stringproperty\u0026gt; custom-element-definition extends /src/furo-ui5-text-input-labeled.js superclass FuroUi5TextInputLabeled\n Summary: form renderer for furo.Stringproperty\n Description #  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    "});index.add({'id':117,'href':'/docs/typerenderer/form-furo-type-date/','title':"form-furo-type-date",'section':"Typerenderer",'content':"form-furo-type-date #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-furo-type-date.js'; exports \u0026lt;form-furo-type-date\u0026gt; custom-element-definition extends /src/furo-ui5-date-picker-labeled.js superclass FuroUi5DatePickerLabeled\n Summary: form renderer for furo.type.Date\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':118,'href':'/docs/typerenderer/form-furo-type-money/','title':"form-furo-type-money",'section':"Typerenderer",'content':"form-furo-type-money #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-furo-type-money.js'; exports \u0026lt;form-furo-type-money\u0026gt; custom-element-definition extends /src/furo-ui5-money-input-labeled.js superclass FuroUi5MoneyInputLabeled\n Summary: form renderer for furo.type.Money\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':119,'href':'/docs/typerenderer/form-google-protobuf-boolvalue/','title':"form-google-protobuf-boolvalue",'section':"Typerenderer",'content':"form-google-protobuf-boolvalue #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-google-protobuf-boolvalue.js'; exports \u0026lt;form-google-protobuf-boolvalue\u0026gt; custom-element-definition extends /src/typerenderer/form-bool.js superclass FormBool\n Summary: form renderer for google.protobuf.BoolValue\n Description #  form-google-protobuf-boolvalue is a form context renderer.\nIt uses furo-ui5-checkbox-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':120,'href':'/docs/typerenderer/form-google-protobuf-doublevalue/','title':"form-google-protobuf-doublevalue",'section':"Typerenderer",'content':"form-google-protobuf-doublevalue #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-google-protobuf-doublevalue.js'; exports \u0026lt;form-google-protobuf-doublevalue\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Summary: form renderer for google.protobuf.Double\n Description #  form-google-protobuf-doublevalue is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':121,'href':'/docs/typerenderer/form-google-protobuf-floatvalue/','title':"form-google-protobuf-floatvalue",'section':"Typerenderer",'content':"form-google-protobuf-floatvalue #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-google-protobuf-floatvalue.js'; exports \u0026lt;form-google-protobuf-floatvalue\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Summary: form renderer for google.protobuf.FloatValue\n Description #  form-google-protobuf-floatvalue is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':122,'href':'/docs/typerenderer/form-google-protobuf-int32value/','title':"form-google-protobuf-int32value",'section':"Typerenderer",'content':"form-google-protobuf-int32value #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-google-protobuf-int32value.js'; exports \u0026lt;form-google-protobuf-int32value\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Summary: form renderer for google.protobuf.Int32Value\n Description #  form-google-protobuf-int32value is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':123,'href':'/docs/typerenderer/form-google-protobuf-int64value/','title':"form-google-protobuf-int64value",'section':"Typerenderer",'content':"form-google-protobuf-int64value #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-google-protobuf-int64value.js'; exports \u0026lt;form-google-protobuf-int64value\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Summary: form renderer for google.protobuf.Int64Value\n Description #  form-google-protobuf-int64value is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':124,'href':'/docs/typerenderer/form-google-protobuf-stringValue/','title':"form-google-protobuf-stringValue",'section':"Typerenderer",'content':"form-google-protobuf-stringValue #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-google-protobuf-stringvalue.js'; exports \u0026lt;form-google-protobuf-stringvalue\u0026gt; custom-element-definition extends /src/furo-ui5-text-input-labeled.js superclass FuroUi5TextInputLabeled\n Summary: form renderer for google.protobuf.StringValue\n Description #  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    "});index.add({'id':125,'href':'/docs/typerenderer/form-google-protobuf-timestamp/','title':"form-google-protobuf-timestamp",'section':"Typerenderer",'content':"form-google-protobuf-timestamp #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-google-protobuf-timestamp.js'; exports \u0026lt;form-google-protobuf-timestamp\u0026gt; custom-element-definition extends /src/furo-ui5-date-time-picker-labeled.js superclass FuroUi5DateTimePickerLabeled\n Summary: form renderer for google.protobuf.Timestamp\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':126,'href':'/docs/typerenderer/form-google-type-date/','title':"form-google-type-date",'section':"Typerenderer",'content':"form-google-type-date #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-google-type-date.js'; exports \u0026lt;form-google-type-date\u0026gt; custom-element-definition extends /src/furo-ui5-date-picker-labeled.js superclass FuroUi5DatePickerLabeled\n Summary: form renderer for google.type.Date\n Description #  form-google-type-date is a form context renderer.\nIt uses furo-ui5-date-picker as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':127,'href':'/docs/typerenderer/form-google-type-money/','title':"form-google-type-money",'section':"Typerenderer",'content':"form-google-type-money #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-google-type-money.js'; exports \u0026lt;form-google-type-money\u0026gt; custom-element-definition extends /src/furo-ui5-money-input-labeled.js superclass FuroUi5MoneyInputLabeled\n Summary: form renderer for google.type.Money\n Description #  form-google-type-money is a form context renderer.\nIt uses furo-ui5-money-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':128,'href':'/docs/typerenderer/form-google-type-timeofday/','title':"form-google-type-timeofday",'section':"Typerenderer",'content':"form-google-type-timeofday #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-google-type-timeofday.js'; exports \u0026lt;form-google-type-timeofday\u0026gt; custom-element-definition extends /src/furo-ui5-time-picker-labeled.js superclass FuroUi5TimePickerLabeled\n Summary: form renderer for google.type.TimeOfDay\n Description #  form-google-type-timeofday is a form context renderer.\nIt uses furo-ui5-time-picker as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':129,'href':'/docs/typerenderer/form-int32/','title':"form-int32",'section':"Typerenderer",'content':"form-int32 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-int32.js'; exports FormInt32 js exports \u0026lt;form-int32\u0026gt; custom-element-definition extends /src/furo-ui5-number-input-labeled.js superclass FuroUi5NumberInputLabeled\n Summary: form renderer for int32\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':130,'href':'/docs/typerenderer/form-int64/','title':"form-int64",'section':"Typerenderer",'content':"form-int64 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-int64.js'; exports FormInt64 js exports \u0026lt;form-int64\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Summary: form renderer for int64\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':131,'href':'/docs/typerenderer/form-string/','title':"form-string",'section':"Typerenderer",'content':"form-string #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-string.js'; exports FormString js exports \u0026lt;form-string\u0026gt; custom-element-definition extends /src/furo-ui5-text-input-labeled.js superclass FuroUi5TextInputLabeled\n Summary: form renderer for string\n Description #  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    "});index.add({'id':132,'href':'/docs/typerenderer/form-uint32/','title':"form-uint32",'section':"Typerenderer",'content':"form-uint32 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-uint32.js'; exports FormUint32 js exports \u0026lt;form-uint32\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Summary: form renderer for uint32\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':133,'href':'/docs/typerenderer/form-uint64/','title':"form-uint64",'section':"Typerenderer",'content':"form-uint64 #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/typerenderer/form-uint64.js'; exports FormUint64 js exports \u0026lt;form-uint64\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Summary: form renderer for uint64\n Description #  Attributes and Properties #  Methods #  "});index.add({'id':134,'href':'/docs/components/furo-ui5-bool-icon/','title':"furo-ui5-bool-icon",'section':"Components",'content':"furo-ui5-bool-icon #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-bool-icon.js'; exports \u0026lt;furo-ui5-bool-icon\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: Displays a icon for a boolean value\n Description #  Displays a icon/symbol for a boolean value\nThis component uses the SAP Ui5 icons. https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html\n1  \u0026lt;furo-ui5-bool-icon ƒ-bind-data=\u0026#34;--dao(FIELDNODE)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-bool-icon\u0026gt;   Only @ui5/webcomponents-icons/dist/navigation-down-arrow.js and @ui5/webcomponents-icons/dist/navigation-right-arrow.js are imported. If you set other icons, please do not forget to import them.\nExample #    Attributes and Properties #  symboltrue #  symboltrue string default: 'navigation-down-arrow'\nDefines the icon for the true state. symbolfalse #  symbolfalse string default: 'navigation-right-arrow'\nDefines the icon for the false state. field #  default: {}\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a FieldNode\nSupported types: bool\n fieldNode    toggle #  toggle() ⟹ void\n* → ƒ-toggle\nToggles the icon.\n\n"});index.add({'id':135,'href':'/docs/components/furo-ui5-busy-indicator/','title':"furo-ui5-busy-indicator",'section':"Components",'content':"furo-ui5-busy-indicator #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-busy-indicator.js'; exports FuroUiBusyIndicator js exports \u0026lt;furo-ui5-busy-indicator\u0026gt; custom-element-definition extends src/furo-ui5-busy-indicator.js\n Summary: ui5 busy indicator with methods\n Description #  The furo-ui5-busy-indicator signals that some operation is going on and that the user must wait.\n1  \u0026lt;furo-ui5-busy-indicator\u0026gt;\u0026lt;/furo-ui5-busy-indicator\u0026gt;   https://sap.github.io/ui5-webcomponents/playground/components/BusyIndicator/\nExample #    \n\n  activate deactivate   Attributes and Properties #  Methods #  activate #  activate() ⟹ void\n* → ƒ-activate\nSets the busy indicator state to active\n\ndeactivate #  deactivate() ⟹ void\n* → ƒ-deactivate\nSets the busy indicator state to inactive\n\n"});index.add({'id':136,'href':'/docs/components/furo-ui5-button/','title':"furo-ui5-button",'section':"Components",'content':"furo-ui5-button #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-button.js'; exports FuroUi5Button js exports \u0026lt;furo-ui5-button\u0026gt; custom-element-definition extends src/furo-ui5-button.js\n Summary: ui5 button with methods\n Description #  The furo-ui5-button component represents a simple push button. It enables users to trigger actions by clicking or tapping the furo-ui5-button, or by pressing certain keyboard keys, such as Enter. Usage For the furo-ui5-button UI, you can define text, icon, or both. You can also specify whether the text or the icon is displayed first.\n1  \u0026lt;furo-ui5-button\u0026gt;Register\u0026lt;/furo-ui5-button\u0026gt;   You can choose from a set of predefined types that offer different styling to correspond to the triggered action.\nYou can set the furo-ui5-button as enabled or disabled. An enabled ui5-button can be pressed by clicking or tapping it. The button changes its style to provide visual feedback to the user that it is pressed or hovered over with the mouse cursor. A disabled furo-ui5-button appears inactive and cannot be pressed.\nWhat is different from ui5-button? With flow based programming it\u0026rsquo;s usual to address functions. So we added two convenience functions for\n disabling =\u0026gt; ƒ-disable enabling =\u0026gt; ƒ-enable  https://sap.github.io/ui5-webcomponents/playground/components/Button/\nExample #    Hide Show Disable Enable Button   Attributes and Properties #  Methods #  disable #  disable() ⟹ void\n* → ƒ-disable\nSets the button state to disabled\n\nenable #  enable() ⟹ void\n* → ƒ-enable\nSets the button state to enabled\n\nshow #  show() ⟹ void\n* → ƒ-show\nshows the button, when it was hidden before\n\nhide #  hide() ⟹ void\n* → ƒ-hide\nhides the button\n\n"});index.add({'id':137,'href':'/docs/components/furo-ui5-card/','title':"furo-ui5-card",'section':"Components",'content':"furo-ui5-card #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-card.js'; exports FuroUi5Card js exports \u0026lt;furo-ui5-card\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: Ui5 card with data bindings\n Description #  The furo-ui5-card is a bindable card that represents information in the form of a tile with separate header and content areas.\n1 2 3 4 5 6 7 8  \u0026lt;furo-ui5-card heading=\u0026#34;Title\u0026#34; subheading=\u0026#34;Secondary text\u0026#34; icon=\u0026#34;card\u0026#34; \u0026gt; \u0026lt;div slot=\u0026#34;action\u0026#34;\u0026gt;\u0026lt;furo-ui5-button\u0026gt;Action\u0026lt;/furo-ui5-button\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div slot=\u0026#34;content\u0026#34;\u0026gt;content goes here\u0026lt;/div\u0026gt; \u0026lt;/furo-ui5-card\u0026gt;   How To Use Semantic Colors #  You can use semantic colors to visualize the status or state. Set the attribute design=\u0026quot;\u0026quot; with the following values:\n Positive (\u0026ndash;sapPositiveColor) Negative (\u0026ndash;sapNegativeColor) Critical (\u0026ndash;sapCriticalColor) Neutral (\u0026ndash;sapCriticalColor)  1 2 3 4 5 6  \u0026lt;furo-ui5-card design=\u0026#34;Positive\u0026#34; icon=\u0026#34;card\u0026#34; \u0026gt; \u0026lt;div slot=\u0026#34;content\u0026#34;\u0026gt;content goes here\u0026lt;/div\u0026gt; \u0026lt;/furo-ui5-card\u0026gt;   Example #  Action content goes here  1 2 3 4  \u0026lt;furo-ui5-card design=\u0026#34;Positive\u0026#34; icon=\u0026#34;globe\u0026#34; heading=\u0026#34;Title\u0026#34; subheading=\u0026#34;Secondary text\u0026#34; icon=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;div slot=\u0026#34;action\u0026#34;\u0026gt;\u0026lt;furo-ui5-button\u0026gt;Action\u0026lt;/furo-ui5-button\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div slot=\u0026#34;content\u0026#34;\u0026gt;content goes here\u0026lt;/div\u0026gt; \u0026lt;/furo-ui5-card\u0026gt;    Attributes and Properties #  icon #  icon reflects string default: ''\nDefines the visual representation in the header of the card. Supports images and icons. https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html heading #  heading string default: ''\nDefines the title displayed in the ui5-card header. subheading #  subheading string default: ''\nDefines the subheading displayed in the ui5-card header. status #  status string default: ''\nDefines the status text displayed in the card header (upper right).\nBy enabling the status, actions are not visible. headerInteractive #  header-interactive reflects boolean default: false\nDefines if the ui5-card header would be interactive, e.g gets hover effect, gets focused and header-click event is fired, when it is pressed. noContentPadding #  no-content-padding reflects boolean default: false\nShows the content slot area with no padding Events #  header-clicked #  @-header-clicked → ``\nFired when the card head is clicked. The header-interactive attribute must be set. header-click #  @-header-click → ``\nFired when interactive header was clicked. Methods #  bindHeading #  bindHeading(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-heading\nBinds any scalar field to set the title of the panel.\nSupported types: scalar types e.g. string\n fieldNode string   bindIcon #  bindIcon(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-icon\nBinds a FieldNode to set the icon of the panel.\nDo not forget to import the icon you will use in your component.\nSupported types: string\n fieldNode string   bindSubheading #  bindSubheading(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-subheading\nBinds any scalar field to set the subtitle of the panel.\nSupported types: scalar types e.g. string\n fieldNode string   bindNavNode #  bindNavNode(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-nav-node\nBinds a FieldNode with the following signature:\n  display_name (string)\n  secondary_text (string)\n  icon (string)\n  fieldNode string   Slots #  action #  Type: HTMLElement [0..n]\ndefines an action, displayed in the right most part of the header. Note: If status is set, the status text will be displayed, you can either have action, or status. content #  Type: HTMLElement [0..n]\ndefines the content of the card "});index.add({'id':138,'href':'/docs/components/furo-ui5-chart/','title':"furo-ui5-chart",'section':"Components",'content':"furo-ui5-chart #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-chart.js'; exports \u0026lt;furo-ui5-chart\u0026gt; custom-element-definition superclass LitElement\n Summary: connect data to a chart\n Description #  furo-ui5-chart connects data objects (repeaterNodes) with the charting lib.\nUse multiple binders if you need more then one series per chart.\n1 2 3 4 5 6 7  \u0026lt;furo-ui5-chart-display chart-type=\u0026#34;bar\u0026#34;\u0026gt; \u0026lt;furo-ui5-chart ƒ-bind-data=\u0026#34;--projectDAO(*.entities)\u0026#34; data-field=\u0026#34;data.cost_limit.units\u0026#34; category-field=\u0026#34;data.description\u0026#34; \u0026gt;\u0026lt;/furo-ui5-chart\u0026gt; \u0026lt;/furo-ui5-chart-display\u0026gt;   Simple line chart #     load data change data          1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u0026lt;furo-ui5-chart-display flex scroll chart-type=\u0026#34;line\u0026#34; no-data-text=\u0026#34;Press load data\u0026#34; fixed-height=\u0026#34;250\u0026#34; tooltip grid legend\u0026gt; \u0026lt;furo-ui5-chart ƒ-bind-data=\u0026#34;--projectDAO(*.entities)\u0026#34; data-field=\u0026#34;data.cost_limit.units\u0026#34; category-field=\u0026#34;data.description\u0026#34; \u0026gt;\u0026lt;/furo-ui5-chart\u0026gt; \u0026lt;/furo-ui5-chart-display\u0026gt;   Bubble charts #     load data change data           1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  \u0026lt;furo-ui5-chart-display chart-type=\u0026#34;bubble\u0026#34; data-labels=\u0026#34;\u0026#34; tooltip=\u0026#34;\u0026#34; legend=\u0026#34;\u0026#34; fixed-height=\u0026#34;300\u0026#34;\u0026gt; \u0026lt;furo-ui5-chart ƒ-bind-data=\u0026#34;--projectDAO(*.entities)\u0026#34; data-field=\u0026#34;data.start.day, data.end.day, data.start.day\u0026#34; category-field=\u0026#34;data.description\u0026#34; axis-label=\u0026#34;End\u0026#34; legend-label=\u0026#34;Group A\u0026#34;\u0026gt;\u0026lt;/furo-ui5-chart\u0026gt; \u0026lt;furo-ui5-chart ƒ-bind-data=\u0026#34;--projectDAO(*.entities)\u0026#34; data-field=\u0026#34;data.end.day,data.start.day, data.start.day\u0026#34; category-field=\u0026#34;data.description\u0026#34; legend-label=\u0026#34;Group B\u0026#34;\u0026gt;\u0026lt;/furo-ui5-chart\u0026gt; \u0026lt;/furo-ui5-chart-display\u0026gt; \n Sparkline #     load data change data  furo-ui5-chart-display{width: 145px; float: left; margin: 8px; box-sizing: border-box}                       1 2 3 4 5 6  \u0026lt;furo-ui5-chart-display chart-type=\u0026#34;radar\u0026#34; sparkline=\u0026#34;\u0026#34; fixed-height=\u0026#34;145\u0026#34;\u0026gt; \u0026lt;furo-ui5-chart ƒ-bind-data=\u0026#34;--projectDAO(*.entities)\u0026#34; data-field=\u0026#34;data.cost_limit.units\u0026#34; category-field=\u0026#34;data.description\u0026#34;\u0026gt;\u0026lt;/furo-ui5-chart\u0026gt; \u0026lt;/furo-ui5-chart-display\u0026gt;    Attributes and Properties #  axisLabelOpposite #  axis-label-opposite \nPut the axis label on the opposite site (usually right) axisLabel #  axis-label \nText for the y axis axisLabelColor #  axis-label-color \nCustom color for the y axis description text axisBorder #  axis-border \nShow a border on the right side of the y axis descriptions and labels. axisBorderColor #  axis-border-color \nCustom color for the border. axisTicks #  axis-ticks \nShow tick marks on the y axis. axisTooltip #  axis-tooltip \nShow a tooltip with the current value while hovering. axisTicksColor #  axis-ticks-color \nCustom color for the ticks seriesName #  series-name \nSeries with same name will get the same y-axis legendLabel #  legend-label \nLabel the Series for the legend. This text is also shown on the tooltips. This is useful when you have more then one data series. strokeWidth #  chart-stroke-width number default: 1\nDefine the thickness of the lines in px. markerSize #  chart-marker-size number default: 0\nSet the size of the markers (hover state) in px. strokeCurve #  chart-curve string default: 'straight'\nDefine the curve style for line and area charts.\nPossible values: smooth, straight, stepline dataField #  data-field \nDefine the data field or fields here. For most charts this is the y axis.\nSome charts requires more then one data field (i.e. bubbles want at least 3 fields data-field=\u0026quot;data.start.day, data.end.day, data.start.day\u0026quot; ). categoryField #  category-field \nDefine the category field here (only 1 field). You can think of this as it is the x axis for your chart. chartType #  chart-type \nUse this for mixed charts scenarios only, prefer to define the chart-type on the chart-display. Specify the default type on the display and set the custom type on this binder. chartColor #  chart-color \nIf you need to give an explicit color for the series you can use this attribute. xaxis #  xaxis \n\nEvents #  data-point-clicked #  @-data-point-clicked → Fieldnode\nFired when a marker for this data source was clicked data-updated #  @-data-updated → data-series\nFired when datasource has updated data Methods #  bindData #  bindData(data RepeaterNode ) ⟹ void\nRepeaterNode  → ƒ-bind-data\nBinds a RepeaterNode to the component.\nSupported types: repeated types\n data    "});index.add({'id':139,'href':'/docs/components/furo-ui5-chart-display/','title':"furo-ui5-chart-display",'section':"Components",'content':"furo-ui5-chart-display #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-chart-display.js'; exports \u0026lt;furo-ui5-chart-display\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: Display charts with data objects\n Description #  The furo-ui5-chart-display is the render component to display charts with apex the apex charts lib (https://github.com/apexcharts/apexcharts.js).\nUse furo-ui5-chart to connect your data.\n1 2 3 4 5 6 7  \u0026lt;furo-ui5-chart-display chart-type=\u0026#34;bar\u0026#34;\u0026gt; \u0026lt;furo-ui5-chart ƒ-bind-data=\u0026#34;--projectDAO(*.entities)\u0026#34; data-field=\u0026#34;data.cost_limit.units\u0026#34; category-field=\u0026#34;data.description\u0026#34; \u0026gt;\u0026lt;/furo-ui5-chart\u0026gt; \u0026lt;/furo-ui5-chart-display\u0026gt;   Example mixed charts #     load data change data            Attributes and Properties #  sparkline #  sparkline \nHides all elements of the chart other than the primary graphic. Use this to visualize data in very small areas. xaxisTitle #  xaxis-title \nGive the x-axis a title which will be displayed below the axis labels by default. xaxisDatetime #  xaxis-datetime \nSet this to true if you have datetime, google.type.date or timestamp data on the x-axis zebra #  zebra \nset zebra color like zebra=\u0026quot;#f3f4f5, #fff\u0026quot; to get stripes noDataText #  no-data-text \nSet the text to display, if no data is given.\nIf this option is not set, the default is No data. legend #  legend \nEnables the legend on bottom left with offset 0:0 dataLabels #  data-labels \nEnable labels with data on every item. tooltip #  tooltip \nshow a tooltip on mouseover legendAlign #  legend-align \nAligns the legend to left center right\ndefault is left legendPosition #  legend-position \nSet the position of the legend to top, right, bottom, left\nDefault is bottom legendOffsetX #  legend-offset-x \nMoves the legend in the x direction for n pixels from legend-position legendOffsetY #  legend-offset-y \nMoves the legend in the y direction for n pixels from legend-position toolbar #  toolbar \nEnables the toolbar toolbarDownload #  toolbar-download \nEnables the download option in the toolbar (svg,csv,png) plotHorizontal #  plot-horizontal \nEnable this to draw the bars horizontally grid #  grid \nDraw the horizontal grid lines chartType #  chart-type \nline, area, bar are mixable\nradar, scatter, heatmap\npie donut polarArea radialBar can only consume 1 data series stacked #  stacked \nWORK IN PROGRESS Stacked bar charts are not mixable titleText #  title-text \nSet the title. titleAlign #  title-align \nAligns the title. Possible values are \u0026lsquo;left\u0026rsquo;, \u0026lsquo;center\u0026rsquo;, \u0026lsquo;right\u0026rsquo;\nDefault is left titleOffsetX #  title-offset-x \nMoves the title for n pixels on the x-axis from the alignment direction titleOffsetY #  title-offset-y \nMoves the title for n pixels on the y-axis from the alignment direction fixedHeight #  fixed-height \nSet a fixed height for the plot. Default is auto, this can be useful if you need to control the heights apexOptions #  default: **{ series: [], yaxis: [], // belize qualitative color palette // node_modules/@ui5/webcomponents-theming/dist/themes/sap_fiori_3/css_variables.css colors: [ 'var(\u0026ndash;sapChart_OrderedColor_1 , #5899da)', 'var(\u0026ndash;sapChart_OrderedColor_2 , #e8743b)', 'var(\u0026ndash;sapChart_OrderedColor_3 , #19a979)', 'var(\u0026ndash;sapChart_OrderedColor_4 , #ed4a7b)', 'var(\u0026ndash;sapChart_OrderedColor_5 , #945ecf)', 'var(\u0026ndash;sapChart_OrderedColor_6 , #13a4b4)', 'var(\u0026ndash;sapChart_OrderedColor_7 , #525df4)', 'var(\u0026ndash;sapChart_OrderedColor_8 , #bf399e)', 'var(\u0026ndash;sapChart_OrderedColor_9 , #6c8893)', 'var(\u0026ndash;sapChart_OrderedColor_10 ,: #ee6868)', 'var(\u0026ndash;sapChart_OrderedColor_11 ,: #2f6497)', ], noData: { text: 'No data.', align: 'center', verticalAlign: 'middle', offsetX: 0, offsetY: 0, style: { color: undefined, fontSize: '14px', fontFamily: undefined, }, }, chart: { // height: 550, fontFamily: 'var(\u0026ndash;sapFontFamily, Helvetica, Arial, sans-serif)', type: 'line', stacked: false, events: {}, toolbar: { show: false, // disable by default tools: { download: false, selection: true, zoom: true, zoomin: true, zoomout: true, pan: true, reset: true, }, }, sparkline: { enabled: false, }, }, grid: { show: false, // https://apexcharts.com/docs/options/grid/ // zebra // row: { // colors: [\u0026quot;#f3f4f5\u0026quot;, \u0026quot;#fff\u0026quot;], // } }, dataLabels: { enabled: false, },\n title: { // text: \u0026amp;#39;XYZ - Analysis\u0026amp;#39;, align: \u0026amp;#39;left\u0026amp;#39;, // offsetX: 70, }, stroke: {}, tooltip: { enabled: false, fixed: { enabled: false, position: \u0026amp;#39;topLeft\u0026amp;#39;, // topRight, topLeft, bottomRight, bottomLeft offsetY: 30, offsetX: 160, }, }, legend: { show: false, position: \u0026amp;#39;bottom\u0026amp;#39;, horizontalAlign: \u0026amp;#39;left\u0026amp;#39;, offsetX: 0, offsetY: 0, formatter: (seriesName, opts) =\u0026amp;gt; { if ( opts.w.config.yaxis[opts.seriesIndex] \u0026amp;amp;\u0026amp;amp; opts.w.config.yaxis[opts.seriesIndex].legendLabel ) { return [opts.w.config.yaxis[opts.seriesIndex].legendLabel]; } return [seriesName]; }, }, plotOptions: {}, xaxis: { // type: \u0026amp;#34;datetime\u0026amp;#34;, // tickAmount: 6, title: { text: undefined, }, }, }**\u0026lt;/small\u0026gt;  \nEvents #  data-point-clicked #  @-data-point-clicked → Fieldnode\nFired when a marker for this data source was clicked. Note: the event is fired from the furo-ui5-chart Methods #  "});index.add({'id':140,'href':'/docs/components/furo-ui5-checkbox-input/','title':"furo-ui5-checkbox-input",'section':"Components",'content':"furo-ui5-checkbox-input #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-checkbox-input.js'; exports FuroUi5CheckboxInput js extends src/furo-ui5-checkbox-input.js mixes FieldNodeAdapter\n Summary: data checkbox input field\n Description #  The \u0026lsquo;furo-ui5-checkbox-input\u0026rsquo; component allows the user to switch true and false for type Bool with data binding.\nIt supports all features from the SAP ui5 checkbox element.\nBindable FieldNodes: bool type, furo.fat.Bool type or the google.wrapper.BoolValue type.\n1 2 3  \u0026lt;furo-ui5-checkbox-input ƒ-bind-data=\u0026#34;--dao(FIELDNODE)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-checkbox-input\u0026gt;   Specificity #   Attributes which are set in the html source will have the highest specificity and will never get overwritten by metas or fat. Attributes set in meta will have the lowest specificity and will be overwritten by attributes from fat.     meta fat html     1 10 100    supported FAT attributes #   \u0026ldquo;readonly\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to readonly \u0026ldquo;disabled\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to disabled  supported meta and constraints #   readonly: true , set the element to readonly  The constraint required will mark the element as required.\nExample #           1 2 3 4 5 6 7 8 9 10  \u0026lt;furo-form-layouter four\u0026gt; \u0026lt;furo-ui5-checkbox-input ƒ-bind-data=\u0026#34;--doExp(*.furo_data_checkbox_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-checkbox-input\u0026gt; \u0026lt;furo-ui5-checkbox-input value-state=\u0026#34;Success\u0026#34; text=\u0026#34;Override\u0026#34; ƒ-bind-data=\u0026#34;--doExp(*.furo_data_checkbox_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-checkbox-input\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;    Attributes and Properties #  Events #  change #  @-change → Boolean\nFired when the checkbox checked state changes. value-changed #  @-value-changed → Boolean\nFires the field value when it changes. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a FieldNode to the component.\nSupported types: bool, google.protobuf.BoolValue, furo.fat.Bool\n fieldNode of type: bool, google.protobuf.BoolValue, furo.fat.Bool   readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom.\n\n"});index.add({'id':141,'href':'/docs/components/furo-ui5-checkbox-input-labeled/','title':"furo-ui5-checkbox-input-labeled",'section':"Components",'content':"furo-ui5-checkbox-input-labeled #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-checkbox-input-labeled.js'; exports FuroUi5CheckboxInputLabeled js exports \u0026lt;furo-ui5-checkbox-input-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: labeled input field\n Description #  The furo-ui5-checkbox-input-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\n1  \u0026lt;furo-ui5-checkbox-input-labeled ƒ-bind-data=\u0026#34;--dao(FIELDNODE)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-checkbox-labeled\u0026gt;   Attributes and Properties #  label #  label string default: ''\nthe label for the data-checkbox-input placeholder #  placeholder \nthe placeholder is the additional information beside the label. it will be showed on the right side of the checkbox. required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a FieldNode to the component.\nSupported types: bool, google.protobuf.BoolValue, furo.fat.Bool\n fieldNode Supported types: bool, google.protobuf.BoolValue, furo.fat.Bool   "});index.add({'id':142,'href':'/docs/components/furo-ui5-combobox/','title':"furo-ui5-combobox",'section':"Components",'content':"furo-ui5-combobox #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-combobox.js'; exports FuroUi5Combobox js extends src/furo-ui5-combobox.js mixes FieldNodeAdapter\n Summary: data combobox field\n Description #  The furo-ui5-combobox component represents a drop-down menu with a list of the available options and a text input field to narrow down the options. It is commonly used to enable users to select an option from a predefined list. Use the function bindOptions to bind a RepeaterNode as an option list.\n1 2 3 4  \u0026lt;furo-ui5-combobox ƒ-bind-data=\u0026#34;--entity(*.data.description)\u0026#34; ƒ-bind-options=\u0026#34;--collection(*.entities)\u0026#34;\u0026gt; \u0026lt;/furo-ui5-combobox\u0026gt;   Attributes and Properties #  activeFieldBinding #  default: false\nFlag to indicate if a field is attached Default: false displayFieldPath #  default: 'display_name'\nDefines the field path that is used from the bound RepeaterNode (bindOptions) to display the option items. Point-separated path to the field E.g. data.partner.display_name default: display_name This attribute is related to the option list descFieldPath #  default: 'id'\nDefines the field path that is used from the bound RepeaterNode (bindOptions) to display the additional description of the option items. Point-separated path to the field E.g. data.partner.id default: id This attribute is related to the option list wait #  default: 250\nDebounce time in milliseconds Default value: 250 Events #  search-requested #  @-search-requested → value\nFired when typing in input (debounced, default 250ms) options-updated #  @-options-updated → optionNodeList\nFired after the option list was rebuilt. selection-change #  @-selection-change → selectedOption\nFired when selection is changed by user interaction value-changed #  @-value-changed → selectedOption\nFired after the field value was changed. Methods #  readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. those attributes can be set. value-state, required,readonly,disabled, value-field-path, display-field-path Use this after manual or scripted update of the attributes.\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ boolean\nFieldNode  → ƒ-bind-data\nOverridden bindData of FieldNodeAdapter\n fieldNode    bindOptions #  bindOptions(repeaterNode `` ) ⟹ void\n``  → ƒ-bind-options\nHere a RepeaterNode can be connected to the component as an option list.\n repeaterNode    "});index.add({'id':143,'href':'/docs/components/furo-ui5-combobox-labeled/','title':"furo-ui5-combobox-labeled",'section':"Components",'content':"furo-ui5-combobox-labeled #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-combobox-labeled.js'; exports FuroUi5ComboboxLabeled js exports \u0026lt;furo-ui5-combobox-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: labeled combobox\n Description #  furo-ui5-combobox-labeled The furo-ui5-combobox-labeled is a composition to easily use a complete data combobox with label according to the design specification of SAP Fiori Design System.\nAttributes and Properties #  label #  label string default: ''\nthe label for the data-number-input descFieldPath #  desc-field-path string default: 'id'\nDefines the field path that is used from the bound RepeaterNode (bindOptions) to display the additional description of the option items. Point-separated path to the field E.g. data.partner.id default: id This attribute is related to the option list displayFieldPath #  display-field-path string default: 'display_name'\nDefines the field path that is used from the injected RepeaterNode to display the option items. Point-separated path to the field E.g. data.partner.display_name required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user and appears in disabled state. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → String\nFires the field value when it changes. Methods #  focus #  focus(options Object ) ⟹ void\nObject  → ƒ-focus\nFocuses the underlying ui5 input element\n options https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus   bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    bindOptions #  bindOptions(repeaterNode `` ) ⟹ void\n``  → ƒ-bind-options\nBinds a repeaterNode to the furo-ui5-combobox component\n repeaterNode    Slots #  valueStateMessage #  Type: HTMLElement\ndefines the value state message that will be displayed as pop up under the input element. "});index.add({'id':144,'href':'/docs/components/furo-ui5-context-menu/','title':"furo-ui5-context-menu",'section':"Components",'content':"furo-ui5-context-menu #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-context-menu.js'; exports FuroUi5ContextMenu js exports \u0026lt;furo-ui5-context-menu\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: Context menu\n Description #  furo-ui5-context-menu is a context menu or menu element.\nA furo-ui5-context-menu-display element must be inserted in one of the parent elements of the element where you use the furo-ui5-context-menu. The app-shell or even body is a good place for that.\nfuro-ui5-context-menu uses diplay:inline, do not forget to change it to display:block if you place it around a block level element.\n1 2 3  \u0026lt;furo-ui5-context-menu ƒ-trigger=\u0026#34;--menuClkd\u0026#34; ƒ-bind-data=\u0026#34;--menuObject\u0026#34; @-menu-item-selected=\u0026#34;--menuItem\u0026#34;\u0026gt; \u0026lt;ui5-icon name=\u0026#34;menu\u0026#34; @-click=\u0026#34;--menuClkd\u0026#34;\u0026gt;\u0026lt;/ui5-icon\u0026gt; \u0026lt;/furo-ui5-context-menu\u0026gt;   Data signature #  1 2 3 4 5 6 7 8  - type:\u0026#39;menu.Menuitem #Item signature for a context menu\u0026#39;fields:icon:\u0026#39;string:1 #Leading icon of the menu\u0026#39;display_name:\u0026#39;string:2 #String representation of the menu item. Menu item text\u0026#39;disabled:\u0026#39;bool:3 #Display actions as disabled when they can only be used sometimes and under certain conditions.\u0026#39;command:\u0026#39;string:4 #Keyboard command hint\u0026#39;leading_divider:\u0026#39;bool:5 #Item has a leading divider line\u0026#39;children:\u0026#39;[] menu.Menuitem:6 #Children of this item\u0026#39;  Example #     open menu      1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;body\u0026gt; \u0026lt;!-- The display must be placed in a parent element --\u0026gt; \u0026lt;furo-ui5-context-menu-display\u0026gt;\u0026lt;/furo-ui5-context-menu-display\u0026gt; \u0026lt;main\u0026gt; \u0026lt;div\u0026gt; \u0026lt;article\u0026gt; \u0026lt;furo-ui5-context-menu ƒ-trigger=\u0026#34;--menuClkd\u0026#34; ƒ-bind-data=\u0026#34;--menuDO\u0026#34; @-menu-item-selected=\u0026#34;--menuItemSelected\u0026#34; \u0026gt;\u0026lt;ui5-icon name=\u0026#34;meal\u0026#34; @-click=\u0026#34;--menuClkd\u0026#34;\u0026gt;open menu\u0026lt;/ui5-icon\u0026gt; \u0026lt;/furo-ui5-context-menu\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt;    Attributes and Properties #  Events #  menu-item-selected #  @-menu-item-selected → {context, menuitem}\nFired when a menu item is selected. Methods #  bindData #  bindData(menu `` ** Fieldnode ) ⟹ void\n`` Fieldnode  → ƒ-bind-data\nBind your menu object.\n menu   || RepeaterNode} menu with menu.Menuitem signature   setContext #  setContext(ctx * ) ⟹ void\n*  → ƒ-set-context\nSets the context. Use this if you want to set a Object as context\n ctx Can be anything, will be returned at the menu-item-selected method   trigger #  trigger(byKeyboard `` ) ⟹ void\n``  → ƒ-trigger\nTriggers the context menu. Set by keyboard to true to focus the first element for keyboard navigation\n byKeyboard    triggerContext #  triggerContext(context Object byKeyboard `` ) ⟹ void\nObject ``  → ƒ-trigger-context\ntriggers the menu with context\n context  byKeyboard    Slots #  default #  Type: HTMLElement\ndefault slot to add an individual context menu opener component (e.g. furo-icon-button). "});index.add({'id':145,'href':'/docs/components/furo-ui5-context-menu-display/','title':"furo-ui5-context-menu-display",'section':"Components",'content':"furo-ui5-context-menu-display #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-context-menu-display.js'; exports FuroUi5ContextMenuDisplay js exports \u0026lt;furo-ui5-context-menu-display\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: context menu\n Description #  The furo-ui5-context-menu-display is the display element for furo-ui5-context-menu and submenus. Place this component as high as needed in your dom.\nYou should not interact with this component directly. Use furo-ui5-context-menu to show a context menu.\nThere is nothing more to do. The menu creates a transparent \u0026ldquo;backdrop\u0026rdquo; with absolute positions 0 0 0 0\n1  \u0026lt;furo-ui5-context-menu-display\u0026gt;\u0026lt;/furo-ui5-context-menu-display\u0026gt;   Attributes and Properties #  borderDistance #  default: 48\nDistance for the sub menus in pixel. This value is used to calculate if the menu or sub menu should apear on the left or on the right. Methods #  hideMenu #  hideMenu() ⟹ void\n* → ƒ-hide-menu\nHides the menu witout selecting anything.\nIf you click somewhere on the background, the menu will also disappear.\n\n"});index.add({'id':146,'href':'/docs/components/furo-ui5-context-menu-item/','title':"furo-ui5-context-menu-item",'section':"Components",'content':"furo-ui5-context-menu-item #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/subcomponents/furo-ui5-context-menu-item.js'; exports FuroUi5ContextMenuItem js exports \u0026lt;furo-ui5-context-menu-item\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: context menu item\n Description #  furo-ui5-context-menu-item is a helper component for furo-ui5-context-menu.\nIt is not intended for direct usage\nAttributes and Properties #  icon #  default: 'border'\n\nfocused #  focused reflects \nfocused state disabled #  disabled reflects \ndisabled state Events #  mousefocus #  @-mousefocus → index\nFired when hovered with mouse opensub-requested #  @-opensub-requested → menu: this.menuitem, initiator: this\nFired when submenu should be opened item-selected #  @-item-selected → item\nFired when item was selected Methods #  bindData #  bindData(menuNode `` ) ⟹ void\n``  → ƒ-bind-data\nBind a single menu node with a menu.Menuitem signature.\n menuNode    index #  index(i `` ) ⟹ void\n``  → ƒ-index\nstore the index for mouseover focus\n i    setFocused #  setFocused() ⟹ void\n* → ƒ-set-focused\nmark item as focused\n\nunsetFocused #  unsetFocused() ⟹ void\n* → ƒ-unset-focused\nmark item as unfocused\n\n"});index.add({'id':147,'href':'/docs/components/furo-ui5-context-submenu/','title':"furo-ui5-context-submenu",'section':"Components",'content':"furo-ui5-context-submenu #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/subcomponents/furo-ui5-context-submenu.js'; exports FuroUi5ContextSubmenu js exports \u0026lt;furo-ui5-context-submenu\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: helper\n Description #  furo-ui5-context-submenu is a helper component for furo-ui5-context-menu.\nUse furo-ui5-context-menu to show a context menu.\nAttributes and Properties #  borderDistance #  default: 48\n\ndepth #  depth \nDepth of the submenu Methods #  init #  init(e *display* byKeyboard `` ) ⟹ void\n  ``  → ƒ-init\n e  display  byKeyboard    hideMenu #  hideMenu() ⟹ void\n* → ƒ-hide-menu\n\ntriggerNavigation #  triggerNavigation(key `` ) ⟹ void\n``  → ƒ-trigger-navigation\nInterface for the furo navigation pad\n key    "});index.add({'id':148,'href':'/docs/components/furo-ui5-date-picker/','title':"furo-ui5-date-picker",'section':"Components",'content':"furo-ui5-date-picker #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-date-picker.js'; exports FuroUi5DatePicker js extends src/furo-ui5-date-picker.js mixes FieldNodeAdapter\n Summary: bindable datepicker field\n Description #  The furo-ui5-date-picker component allows the user to bind an date object like google.type.Date or a date string with ISO 8061 format like \u0026ldquo;2020-12-31\u0026rdquo; to the ui5 datepicker and edit it.\nIt supports all features from the SAP ui5 DatePicker element.\nYou can define the formatPattern (e.g. \u0026lsquo;dd.MM.yyyy\u0026rsquo; ) to show the date according to format pattern.\nYou can bind a string, furo.type.Date or google.type.Date.\n1 2 3  \u0026lt;furo-ui5-date-picker ƒ-bind-data=\u0026#34;--dao(FIELDNODE)\u0026#34;\u0026gt; \u0026lt;/furo-ui5-date-picker\u0026gt;   The text field can be editable or read-only (readonly property), and it can be enabled or disabled (enabled property). To visualize semantic states, such as \u0026ldquo;error\u0026rdquo; or \u0026ldquo;warning\u0026rdquo;, the valueState property is provided. When the user makes changes to the date, the change event is fired, which enables you to react on any date change.\nsupported meta and constraints #   readonly: true , set the element to readonly placeholder:\u0026ldquo;some string\u0026rdquo; set the placeholder for the element min:\u0026ldquo;1999-12-31\u0026rdquo; set the minDate for the element (use iso date in the constraint) max:\u0026ldquo;1999-12-31\u0026rdquo; set the maxDate for the element (use iso date in the constraint) pattern:\u0026ldquo;1999-12-31\u0026rdquo; set the pattern for the element  The constraint required will mark the element as required\nMethods #  bind-data(fieldNode) Bind a entity field. You can use the entity even when no data was received.\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with \u0026ndash;entity(*.fields.fieldname)\nExample #           1 2 3 4 5 6 7 8  \u0026lt;furo-ui5-date-picker ƒ-bind-data=\u0026#34;--dataObject(*.furo_data_date_input_google)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-date-picker\u0026gt; \u0026lt;furo-ui5-date-picker value-state=\u0026#34;Information\u0026#34; ƒ-bind-data=\u0026#34;--dataObject(*.furo_data_date_input_google)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-date-picker\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;    Attributes and Properties #  formatPattern #  default: ''\nThe format pattern for the date. Events #  value-changed #  @-value-changed → Date\nFired when the input operation has finished by pressing Enter or on focusout. change #  @-change → Date\n-Fired when the input operation has finished by pressing Enter or on focusout. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a FieldNode to the component.\nSupported types: string, furo.type.Date, google.type.Date\n fieldNode of type: string, furo.type.Date, google.type.Date   readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. Attributes that can be se are value-state, placeholder, required,readonly,disabled max-date, min-date, format-pattern, Use this after manual or scripted update of the attributes.\n\n"});index.add({'id':149,'href':'/docs/components/furo-ui5-date-picker-labeled/','title':"furo-ui5-date-picker-labeled",'section':"Components",'content':"furo-ui5-date-picker-labeled #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-date-picker-labeled.js'; exports FuroUi5DatePickerLabeled js exports \u0026lt;furo-ui5-date-picker-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: labeled input field\n Description #  The furo-ui5-date-picker-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\n1  \u0026lt;furo-ui5-date-picker-labeled ƒ-bind-data=\u0026#34;--dao(FIELDNODE)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-date-picker-labeled\u0026gt;   Inside a furo-form-layouter set to four #           1 2 3 4 5 6 7 8 9 10  \u0026lt;furo-form-layouter four\u0026gt; \u0026lt;furo-ui5-date-picker-labeled ƒ-bind-data=\u0026#34;--dataObject(*.furo_data_date_input_google)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-date-picker-labeled\u0026gt; \u0026lt;furo-ui5-date-picker-labeled value-state=\u0026#34;Success\u0026#34; text=\u0026#34;Override\u0026#34; ƒ-bind-data=\u0026#34;--dataObject(*.furo_data_date_input_google)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-date-picker-labeled\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;   Inside a furo-form-layouter set to two #           1 2 3 4 5 6 7 8 9 10  \u0026lt;furo-form-layouter two\u0026gt; \u0026lt;furo-ui5-date-picker-labeled ƒ-bind-data=\u0026#34;--dataObject(*.furo_data_date_input_google)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-date-picker-labeled\u0026gt; \u0026lt;furo-ui5-date-picker-labeled value-state=\u0026#34;Success\u0026#34; text=\u0026#34;Override\u0026#34; ƒ-bind-data=\u0026#34;--dataObject(*.furo_data_date_input_google)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-date-picker-labeled\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;    Attributes and Properties #  label #  label string default: ''\nthe label for the data-date-picker required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled reflects \nA Boolean attribute which, if present, means this field cannot be edited by the user. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → String\nFires the field value when it changes in ISO 8601 format. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    "});index.add({'id':150,'href':'/docs/components/furo-ui5-date-time-picker/','title':"furo-ui5-date-time-picker",'section':"Components",'content':"furo-ui5-date-time-picker #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-date-time-picker.js'; exports FuroUi5DateTimePicker js extends src/furo-ui5-date-time-picker.js mixes FieldNodeAdapter\n Summary: furo data datetime picker field\n Description #  The furo-ui5-date-time-picker component allows the user to bind a date string with IOS 8061 standard in RFC 3339 format likes \u0026ldquo;2017-01-15T01:30:15.01Z\u0026rdquo; to the ui5 date time picker and edit it.\nyou can define the formatPattern (e.g. \u0026lsquo;dd.MM.yyyy hh:mm aa\u0026rsquo; ) to show the date according to format pattern. but the data in the payload will still be in format RFC 3339 (2017-01-15T01:30:15.01Z)\nThe text field can be editable or read-only (readonly property), and it can be enabled or disabled (enabled property). To visualize semantic states, such as \u0026ldquo;error\u0026rdquo; or \u0026ldquo;warning\u0026rdquo;, the valueState property is provided. When the user makes changes to the datetime, the change event is fired, which enables you to react on any date change.\nYou can bind a string, google.protobuf.Timestamp, int32, int64.\nint32, int64 will be handled as unix timestamps (seconds since epoc) and can not be empty.\n1 2 3  \u0026lt;furo-ui5-date-time-picker ƒ-bind-data=\u0026#34;--dao(FIELDNODE)\u0026#34;\u0026gt; \u0026lt;/furo-ui5-date-time-picker\u0026gt;   The field can be editable or read-only (readonly property), and it can be enabled or disabled (enabled property). To visualize semantic states, such as \u0026ldquo;error\u0026rdquo; or \u0026ldquo;warning\u0026rdquo;, the valueState property is provided. When the user makes changes to the date, the change event is fired, which enables you to react on any date change.\nsupported meta and constraints #   readonly: true , set the element to readonly placeholder:\u0026ldquo;some string\u0026rdquo; set the placeholder for the element min:\u0026ldquo;1999-12-31\u0026rdquo; set the minDate for the element (use iso date in the constraint) max:\u0026ldquo;1999-12-31\u0026rdquo; set the maxDate for the element (use iso date in the constraint) pattern:\u0026ldquo;1999-12-31\u0026rdquo; set the pattern for the element  The constraint required will mark the element as required\nMethods #  bind-data(fieldNode) Bind a entity field. You can use the entity even when no data was received.\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with \u0026ndash;entity(*.fields.fieldname)\nExample #           1 2 3 4 5 6 7 8 9  \u0026lt;furo-form-layouter four\u0026gt; \u0026lt;furo-ui5-date-time-picker ƒ-bind-data=\u0026#34;--dataObject(*.google_timestamp)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-date-time-picker\u0026gt; \u0026lt;furo-ui5-date-time-picker value-state=\u0026#34;Information\u0026#34; ƒ-bind-data=\u0026#34;--dataObject(*.google_timestamp)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-date-time-picker\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;    Attributes and Properties #  formatPattern #  default: ''\n\n_previousValueState #  default: { state: 'None', message: '' }\n\n_attributesFromFNA #  default: { readonly: undefined, placeholder: undefined, min: undefined, max: undefined, pattern: undefined, }\n\n_constraintsFromFNA #  default: { required: undefined, }\n\n_privilegedAttributes #  default: { readonly: null, placeholder: null, required: null, disabled: null, maxDate: null, minDate: null, formatPattern: null, }\n\nEvents #  value-changed #  @-value-changed → String\nFires the field value when it changes in ISO 8601 format. change #  @-change → ``\nFired when the input operation has finished by pressing Enter or on focusout. Methods #  onFnaFieldValueChanged #  onFnaFieldValueChanged(value `` ) ⟹ void\n``  → ƒ-on-fna-field-value-changed\n value    bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a FieldNode to the component.\nSupported types: string, google.protobuf.Timestamp, int32, int64\n fieldNode of type: string, google.protobuf.Timestamp, int32, int64   readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\n\nonFnaFieldNodeBecameInvalid #  onFnaFieldNodeBecameInvalid(validity `` ) ⟹ void\n``  → ƒ-on-fna-field-node-became-invalid\noverwrite onFnaFieldNodeBecameInvalid function\n validity    "});index.add({'id':151,'href':'/docs/components/furo-ui5-date-time-picker-labeled/','title':"furo-ui5-date-time-picker-labeled",'section':"Components",'content':"furo-ui5-date-time-picker-labeled #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-date-time-picker-labeled.js'; exports FuroUi5DateTimePickerLabeled js exports \u0026lt;furo-ui5-date-time-picker-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: labeled input field\n Description #  The furo-ui5-date-time-picker-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\n1  \u0026lt;furo-ui5-date-time-picker-labeled ƒ-bind-data=\u0026#34;--dao(FIELDNODE)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-date-time-picker-labeled\u0026gt;   Inside a furo-form-layouter set to four #           1 2 3 4 5 6 7 8 9 10  \u0026lt;furo-form-layouter four\u0026gt; \u0026lt;furo-ui5-date-time-picker-labeled ƒ-bind-data=\u0026#34;--dataObject(*.google_timestamp)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-date-time-picker-labeled\u0026gt; \u0026lt;furo-ui5-date-time-picker-labeled value-state=\u0026#34;Success\u0026#34; text=\u0026#34;Override\u0026#34; ƒ-bind-data=\u0026#34;--dataObject(*.google_timestamp)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-date-time-picker-labeled\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;   Inside a furo-form-layouter set to two #           1 2 3 4 5 6 7 8 9 10  \u0026lt;furo-form-layouter two\u0026gt; \u0026lt;furo-ui5-date-time-picker-labeled ƒ-bind-data=\u0026#34;--dataObject(*.google_timestamp)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-date-time-picker-labeled\u0026gt; \u0026lt;furo-ui5-date-time-picker-labeled value-state=\u0026#34;Success\u0026#34; text=\u0026#34;Override\u0026#34; ƒ-bind-data=\u0026#34;--dataObject(*.google_timestamp)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-date-time-picker-labeled\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;    Attributes and Properties #  label #  label string default: ''\nthe label for the data-date-picker required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → String\nFires the field value when it changes in ISO 8601 format. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a FieldNode to the component.\nSupported types: string, google.protobuf.Timestamp, int32, int64\n fieldNode of type : string, google.protobuf.Timestamp, int32, int64   "});index.add({'id':152,'href':'/docs/components/furo-ui5-dialog/','title':"furo-ui5-dialog",'section':"Components",'content':"furo-ui5-dialog #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-dialog.js'; exports FuroUi5Dialog js extends src/furo-ui5-dialog.js\n Summary: Dialog element\n Description #  The furo-ui5-dialog is a extended ui5-dialog which can attach itself to a parent dom element.\nThis is helpful, when you have used z-indexes in one of the parents, which put the original ui5-dialog behind the backdrop.\nUse this component like a regular ui5-dialog and do not forget to place the furo-ui5-dialog-display in one of the parent elements.\nIt supports all features from the SAP ui5 Dialog element.\nimportant: Place a furo-ui5-dialog-display in any dom parent of the component where you use furo-ui5-dialog. Your app-shell or body is a good place to do that.\n1 2 3 4 5 6  \u0026lt;furo-ui5-dialog header-text=\u0026#34;Dialog title\u0026#34; ƒ-show=\u0026#34;--openDialogClicked\u0026#34; ƒ-close=\u0026#34;--closeDialogClicked\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Content\u0026lt;/p\u0026gt; \u0026lt;div slot=\u0026#34;footer\u0026#34;\u0026gt; \u0026lt;button @-click=\u0026#34;--closeDialogClicked\u0026#34;\u0026gt;close dialog\u0026lt;/button\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/furo-ui5-dialog\u0026gt; \u0026lt;button @-click=\u0026#34;--openDialogClicked\u0026#34;\u0026gt;Open dialog\u0026lt;/button\u0026gt;   Sample #    Content\nclose dialog  open dialog   1 2 3 4 5 6 7 8 9 10 11  \u0026lt;furo-ui5-dialog header-text=\u0026#34;Dialog title\u0026#34; ƒ-show=\u0026#34;--openDialogClicked\u0026#34; ƒ-close=\u0026#34;--closeDialogClicked\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Content\u0026lt;/p\u0026gt; \u0026lt;div slot=\u0026#34;footer\u0026#34;\u0026gt; \u0026lt;button @-click=\u0026#34;--closeDialogClicked\u0026#34;\u0026gt;close dialog\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/furo-ui5-dialog\u0026gt; \u0026lt;button @-click=\u0026quot;\u0026ndash;openDialogClicked\u0026quot;\u0026gt;open dialog\u0026lt;/button\u0026gt; \n Note: furo-ui5-dialog-display is placed in body\nAttributes and Properties #  Methods #  show #  show() ⟹ void\n* → ƒ-show\nshows the dialog\n\n"});index.add({'id':153,'href':'/docs/components/furo-ui5-dialog-display/','title':"furo-ui5-dialog-display",'section':"Components",'content':"furo-ui5-dialog-display #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-dialog-display.js'; exports \u0026lt;furo-ui5-dialog-display\u0026gt; custom-element-definition superclass LitElement\n Summary: Display element for furo-ui5-dialog\n Description #  The furo-ui5-dialog-display will catch furo-ui5-dialog elements, to display it in the dom of his parent element.\nThe first furo-ui5-dialog-display will catch the furo-ui5-dialog-register request from a underlying furo-ui5-dialog.\nAttributes and Properties #  Methods #  "});index.add({'id':154,'href':'/docs/components/furo-ui5-flexible-grid/','title':"furo-ui5-flexible-grid",'section':"Components",'content':"furo-ui5-flexible-grid #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-flexible-grid.js'; exports \u0026lt;furo-ui5-flexible-grid\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: a grid splitter\n Description #  The furo-ui5-flexible-grid will split your screen contents horizontally (in cols) and put them vertically (left at top) when the available space is to small.\n1 2 3 4 5 6 7 8 9 10  \u0026lt;!-- a simple layout manager with two columns --\u0026gt; \u0026lt;furo-ui5-flexible-grid\u0026gt; \u0026lt;div hspan=\u0026#34;2\u0026#34; full-on-size-medium full-on-size-small class=\u0026#34;left\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;left\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- this will start at pos 3 and goes to the end of the screen --\u0026gt; \u0026lt;furo-z-grid hstart=\u0026#34;3\u0026#34; fill\u0026gt; \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/furo-z-grid\u0026gt; \u0026lt;/furo-ui5-flexible-grid\u0026gt;   Setting column width #  To set the width of a column use the hspan attribute.\nFill column to the end of the screen #  To make a column that uses the available space you have to set a starting point. This can be done with hstart=\u0026quot;3\u0026quot; (begin on cell 3) and the attribute fill (fill to the right)\nfull-on-[size] #  To set full width on a specific current size, use full-on-size-small , full-on-size-medium , full-on-size-large ,full-on-size-xlarge.\nWhen the available space has the given size, the default hspan are overridden and the full width is used.\nhstart #  Set the starting point of a filling row with hstart=\u0026quot;3\u0026quot;.\nAvailable values are hstart=\u0026quot;2\u0026quot;,\u0026hellip;,hstart=\u0026quot;9\u0026quot;\nhspan #  Set the horizontal space (the width) with the hspan attribute.\nAvailable ranges are from 1 to 9.\nhspan=\u0026quot;1\u0026quot;, hspan=\u0026quot;2\u0026quot;,\u0026hellip;,hspan=\u0026quot;9\u0026quot;\nNamed lines and columns #  last-col refers to the last column. There is no line name available\nSample split z-grids in 2 sections #  Switch the demo to fullscreen and resize your screen to see the effect.\n  furo-ui5-flexible-grid div { border: 1px solid black; } /* needed because the contents get positioned vertically on small screens*/ .left[size='size-s'] { height: 22rem; } .left[size='size-m'] { height: 16rem; }   2x1 2x1 4x1  1x2 1x1 2x2 2x1 full width, no height given       1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  \u0026lt;style\u0026gt; /* needed because the contents get positioned vertically on small screens*/ .left[size=\u0026#39;size-s\u0026#39;] { height: 22rem; } .left[size=\u0026#39;size-m\u0026#39;] { height: 16rem; } \u0026lt;/style\u0026gt; \u0026lt;furo-ui5-flexible-grid\u0026gt; \u0026lt;furo-ui5-z-grid class=\u0026quot;left\u0026quot; hspan=\u0026quot;3\u0026quot; full-on-size-medium=\u0026quot;\u0026quot; full-on-size-small=\u0026quot;\u0026quot;\u0026gt; \u0026lt;div vspan=\u0026quot;1\u0026quot; hspan=\u0026quot;2\u0026quot; style=\u0026quot;background: lightblue;\u0026quot;\u0026gt;2x1\u0026lt;/div\u0026gt; \u0026lt;div vspan=\u0026quot;1\u0026quot; hspan=\u0026quot;2\u0026quot; style=\u0026quot;background: lightblue;\u0026quot;\u0026gt;2x1\u0026lt;/div\u0026gt; \u0026lt;div vspan=\u0026quot;1\u0026quot; hspan=\u0026quot;4\u0026quot; style=\u0026quot;background: rebeccapurple;\u0026quot;\u0026gt;4x1\u0026lt;/div\u0026gt; \u0026lt;/furo-ui5-z-grid\u0026gt; \u0026lt;furo-ui5-z-grid hstart=\u0026quot;4\u0026quot; fill=\u0026quot;\u0026quot;\u0026gt; \u0026lt;div vspan=\u0026quot;2\u0026quot; hspan=\u0026quot;1\u0026quot; style=\u0026quot;background: whitesmoke;\u0026quot;\u0026gt;1x2\u0026lt;/div\u0026gt; \u0026lt;div vspan=\u0026quot;1\u0026quot; hspan=\u0026quot;1\u0026quot; style=\u0026quot;background: pink;\u0026quot;\u0026gt;1x1\u0026lt;/div\u0026gt; \u0026lt;div vspan=\u0026quot;2\u0026quot; hspan=\u0026quot;2\u0026quot; style=\u0026quot;background: papayawhip;\u0026quot;\u0026gt;2x2\u0026lt;/div\u0026gt; \u0026lt;div vspan=\u0026quot;1\u0026quot; hspan=\u0026quot;2\u0026quot; style=\u0026quot;background: lightblue;\u0026quot;\u0026gt;2x1\u0026lt;/div\u0026gt; \u0026lt;div hspan=\u0026quot;full\u0026quot; style=\u0026quot;background: papayawhip;\u0026quot;\u0026gt; full width, no height given \u0026lt;/div\u0026gt; \u0026lt;/furo-ui5-z-grid\u0026gt; \u0026lt;/furo-ui5-flexible-grid\u0026gt; \n  Attributes and Properties #  sizeSmall #  size-small \nBreakpoint size for small Methods #  Slots #  left #  Type: ``\n{HTMLElement} - slot to add a component on the left hand side. default #  Type: HTMLElement [0..n]\ndefault slot to add content. "});index.add({'id':155,'href':'/docs/components/furo-ui5-form-field-container/','title':"furo-ui5-form-field-container",'section':"Components",'content':"furo-ui5-form-field-container #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-form-field-container.js'; exports FuroUi5FormFieldContainer js exports \u0026lt;furo-ui5-form-field-container\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: responsive labels for your input elements\n Description #  The furo-ui5-form-field-container gives the user a layout to manage input field and labels according to the design specification of SAP Fiori.\nExample\n1 2 3 4 5 6 7  \u0026lt;furo-ui5-form-field-container\u0026gt; \u0026lt;ui5-label label slot=\u0026#34;label\u0026#34; for=\u0026#34;Custom\u0026#34; show-colon\u0026gt;Currency / Units (custom)\u0026lt;/ui5-label\u0026gt; \u0026lt;furo-horizontal-flex id=\u0026#34;Custom\u0026#34; content space\u0026gt; \u0026lt;furo-ui5-text-input flex ƒ-bind-data=\u0026#34;--entity(*.data.furo_data_money_input.currency_code)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-text-input\u0026gt; \u0026lt;furo-ui5-number-input flex ƒ-bind-data=\u0026#34;--entity(*.data.furo_data_money_input.units)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-number-input\u0026gt; \u0026lt;/furo-horizontal-flex\u0026gt; \u0026lt;/furo-ui5-form-field-container\u0026gt;   The form and simple form in size L use a two-column layout within the responsive grid layout by default. That means that the form groups are placed next to each other to have all the information on one screen and to avoid scrolling. In these columns, the labels are positioned in the same row as the corresponding input field or value. So the form groups adopt the Z layout (reading direction in rows, not in columns).\nThe label-field ratio is 4:8:0 by default:\n4 grid columns of the responsive grid layout are used by the labels. 8 grid columns of the responsive grid layout are used by fields. 0 grid columns of the responsive grid layout are used by empty columns.\nSize M of the form and simple form also has a single-column layout within the responsive grid layout by default. However, in size M the labels are positioned in the same row as the corresponding input field or value, and form groups are positioned below each other.\nThe label-field ratio is 3:9:0 by default:\n2 grid columns of the responsive grid layout are used by the labels. 10 grid columns of the responsive grid layout are used by the fields. 0 columns of the responsive grid layout are used by empty columns.\nSize S (Smartphones and Dialogs) The form and simple form use a single-column layout within the responsive grid layout in size S by default. This means that the form groups are positioned below each other in a single column and the labels are positioned above the fields to avoid truncation of the labels.\nThe label-field ratio is 12:12:0 by default:\n12 grid columns of the responsive grid layout are used by the labels. (A label handles the space of a whole row.) 12 grid columns of the responsive grid layout are used by the fields. (A field handles the space of a whole row.) 0 grid columns of the responsive grid layout are used by empty columns. (There is no empty space on the right of the field.)\nSample #   Currency / Units (custom)     Attributes and Properties #  Methods #  Slots #  label #  Type: HTMLElement\ndefines the label to be displayed. default #  Type: HTMLElement\ndefines the form field to be displayed in the container element. Styling #  The following custom properties available for styling:\n   Custom property Description     --furo-ui5-form-field-container-grid-row-gap grid row gap  default: 0 fallback: N/A   --furo-ui5-form-field-container-grid-column-gap grid column gap  default: 1em fallback: N/A   --furo-ui5-form-field-container-label-justify-gap label alignment (start, end)  default: end fallback: N/A    "});index.add({'id':156,'href':'/docs/components/furo-ui5-header-panel/','title':"furo-ui5-header-panel",'section':"Components",'content':"furo-ui5-header-panel #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-header-panel.js'; exports FuroUi5HeaderPanel js exports \u0026lt;furo-ui5-header-panel\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: A bindable header panel\n Description #  A bindable header panel.\nInfo: This component is intended to use as a header panel, if you need panels in your view, consider to use a ui5-panel directly. That is also the reason that the api does not match with ui5-panel.\nThis component is a container which has a header and a content area and is used for grouping and displaying information. It can be collapsed to save space on the screen.\n1  \u0026lt;furo-ui5-header-panel header-text=\u0026#34;Header Text\u0026#34; secondary-text=\u0026#34;Subtitle Text\u0026#34; icon=\u0026#34;task\u0026#34;\u0026gt;\u0026lt;/furo-ui5-header-panel\u0026gt;   Sample #  default slot action slot  1 2 3 4  \u0026lt;furo-ui5-header-panel header-text=\u0026#34;Header Text\u0026#34;\u0026gt; \u0026lt;div\u0026gt;default slot\u0026lt;/div\u0026gt; \u0026lt;ui5-button design=\u0026#34;Emphasized\u0026#34; slot=\u0026#34;action\u0026#34;\u0026gt;action slot\u0026lt;/ui5-button\u0026gt; \u0026lt;/furo-ui5-header-panel\u0026gt;   Sample with icon #  default slot action slot action slot  1 2 3 4 5  \u0026lt;furo-ui5-header-panel header-text=\u0026#34;Header Text\u0026#34; secondary-text=\u0026#34;Subtitle Text\u0026#34; icon=\u0026#34;task\u0026#34;\u0026gt; \u0026lt;div\u0026gt;default slot\u0026lt;/div\u0026gt; \u0026lt;ui5-button design=\u0026#34;Transparent\u0026#34; slot=\u0026#34;action\u0026#34;\u0026gt;action slot\u0026lt;/ui5-button\u0026gt; \u0026lt;ui5-button design=\u0026#34;Emphasized\u0026#34; slot=\u0026#34;action\u0026#34;\u0026gt;action slot\u0026lt;/ui5-button\u0026gt; \u0026lt;/furo-ui5-header-panel\u0026gt;    Attributes and Properties #  icon #  icon string default: ''\nicon iconSize #  icon-size string default: 'S'\nsize of the icon. Available options are: XS S M L XL. Default is S. headerText #  header-text string default: ''\nHeader Text secondaryText #  secondary-text string default: ''\nsub title collapsed #  collapsed reflects boolean default: false\n\nMethods #  bindHeaderText #  bindHeaderText(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-header-text\nBind any scalar field to set the title of the panel. Supported types: scalar types\n fieldNode    bindSecondaryText #  bindSecondaryText(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-secondary-text\nBind any scalar field to set the secondaryText of the panel.\n fieldNode    bindNavNode #  bindNavNode(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-nav-node\nbind a furo.navigation.Navigationnode field\n fieldNode    bindIcon #  bindIcon(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-icon\nBind any scalar field to set the title of the panel. Do not forget to import the icon you will use in your component.\n fieldNode    toggleCollapse #  toggleCollapse() ⟹ void\n* → ƒ-toggle-collapse\ntoggles the collapse state\n\nSlots #  action #  Type: HTMLElement [0..n]\ndefines an action, displayed in the right most part of the header panel. default #  Type: HTMLElement [0..n]\ndefines the content of the panel ### Styling The following custom properties and mixins are available for styling: Styling #  The following custom properties available for styling:\n   Custom property Description     --furo-ui5-header-panel-icon-color Color of the icon  default: --ui5-avatar-initials-color fallback: #ffffff   --furo-ui5-header-panel-icon-background-color background Color of the icon  default: --ui5-avatar-accent6 fallback: #354a5f   --furo-ui5-header-panel-splitter-start-color the gradient-start hex-Color of the splitter  default: --sapHighlightColor fallback: #0854a0   --furo-ui5-header-panel-splitter-end-rgba-color the gradient-end rgba-Color of the splitter  default: rgba(8, 84, 16, 0) fallback: rgba(8, 84, 16, 0)    "});index.add({'id':157,'href':'/docs/components/furo-ui5-message-strip/','title':"furo-ui5-message-strip",'section':"Components",'content':"furo-ui5-message-strip #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-message-strip.js'; exports FuroUi5MessageStrip js exports \u0026lt;furo-ui5-message-strip\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: furo ui5 message strip\n Description #  The furo-ui5-message-strip component enables the embedding of app-related messages. It displays 4 types of messages, each with corresponding semantic color and icon: Information, Positive, Warning and Negative. Each message can have a Close button, so that it can be removed from the UI, if needed.\nIt should be used together witch furo-ui5-message-strip-display. You can place those two components into different places. A good place for placing the furo-ui5-message-strip-display is on the app-shell. https://experience.sap.com/fiori-design-web/message-strip/\n1 2 3  \u0026lt;!-- the display is placed where you want the message to appear --\u0026gt; \u0026lt;furo-ui5-message-strip-display\u0026gt;\u0026lt;/furo-ui5-message-strip-display\u0026gt; \u0026lt;furo-ui5-message-strip ƒ-show-information=\u0026#34;--wire\u0026#34;\u0026gt;\u0026lt;/furo-ui5-message-strip\u0026gt;   Sample #    Information Success Error Warning     1 2 3 4 5 6 7 8 9 10 11  \u0026lt;ui5-button @-click=\u0026#34;--infoClicked\u0026#34; design=\u0026#34;Default\u0026#34;\u0026gt;Information\u0026lt;/ui5-button\u0026gt; \u0026lt;ui5-button @-click=\u0026#34;--successClicked\u0026#34; design=\u0026#34;Positive\u0026#34;\u0026gt;Success\u0026lt;/ui5-button\u0026gt; \u0026lt;ui5-button @-click=\u0026#34;--errorClicked\u0026#34; design=\u0026#34;Negative\u0026#34;\u0026gt;Error\u0026lt;/ui5-button\u0026gt; \u0026lt;ui5-button @-click=\u0026#34;--warningClicked\u0026#34; design=\u0026#34;Warning\u0026#34;\u0026gt;Warning\u0026lt;/ui5-button\u0026gt; \u0026lt;furo-ui5-message-strip ƒ-show-information=\u0026#34;--infoClicked\u0026#34; ƒ-show-success=\u0026#34;--successClicked\u0026#34; ƒ-show-error=\u0026#34;--errorClicked\u0026#34; ƒ-show-warning=\u0026#34;--warningClicked\u0026#34; message=\u0026#34;static message\u0026#34;\u0026gt;\u0026lt;/furo-ui5-message-strip\u0026gt; \u0026lt;furo-ui5-message-strip-display\u0026gt;\u0026lt;/furo-ui5-message-strip-display\u0026gt;    Attributes and Properties #  noCloseButton #  no-close-button boolean default: false\nDefines whether the MessageStrip renders close icon. noIcon #  no-icon boolean default: false\nDefines whether the MessageStrip will show an icon in the beginning. You can directly provide an icon with the icon slot. Otherwise, the default icon for the type will be used. size #  size \ndefine the width of ui5-messagestrip. e.g. 200px message #  message \nthe text message of the message strip Events #  message-strip-closed #  @-message-strip-closed → {Object} payload\nFired when the MessageStrip is closed Methods #  showInformation #  showInformation(msg `` ) ⟹ void\n``  → ƒ-show-information\nshows an information message if the param msg is empty, the attribute message is used.\n msg    showSuccess #  showSuccess(msg `` ) ⟹ void\n``  → ƒ-show-success\nshows a success message if the param msg is empty, the attribute message is used.\n msg    showWarning #  showWarning(msg `` ) ⟹ void\n``  → ƒ-show-warning\nshows a warning message if the param msg is empty, the attribute message is used.\n msg    showError #  showError(msg `` ) ⟹ void\n``  → ƒ-show-error\nshows an error message if the param msg is empty, the attribute message is used.\n msg    showGrpcLocalizedMessage #  showGrpcLocalizedMessage(rpcStatus `` ) ⟹ void\n``  → ƒ-show-grpc-localized-message\nshows a google rpc status message (message LocalizedMessage) Provides a localized error message that is safe to return to the user which can be attached to an RPC error.\nRendering rules:\n Every @type LocalizedMessage inside of details[] is displayed with a line break in the message strip. One message strip element is created per RPC status.  Example rpc status:\n1 2 3 4 5 6 7 8 9 10 11 12  { \u0026#34;code\u0026#34;:3, \u0026#34;message\u0026#34;:\u0026#34;Missing mandatory values\u0026#34;, \u0026#34;details\u0026#34;:[ {\u0026#34;@type\u0026#34;:\u0026#34;type.googleapis.com/google.rpc.LocalizedMessage\u0026#34;,\u0026#34;locale\u0026#34;:\u0026#34;en-GB\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;Please register all the mandatory values.\u0026#34;}, {\u0026#34;@type\u0026#34;:\u0026#34;type.googleapis.com/google.rpc.LocalizedMessage\u0026#34;,\u0026#34;locale\u0026#34;:\u0026#34;en-GB\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;If you need help completing the data, call 0800-HELP-FURO.\u0026#34;}, {\u0026#34;@type\u0026#34;:\u0026#34;type.googleapis.com/google.rpc.BadRequest\u0026#34;,\u0026#34;field_violations\u0026#34;:[ {\u0026#34;field\u0026#34;:\u0026#34;short_form\u0026#34;,\u0026#34;description\u0026#34;:\u0026#34;The country designation (short form) should be set.\u0026#34;}, {\u0026#34;field\u0026#34;:\u0026#34;id\u0026#34;,\u0026#34;description\u0026#34;:\u0026#34;The id should be ISO Alpha-2 code as described in the ISO 3166 international standard\u0026#34;}, {\u0026#34;field\u0026#34;:\u0026#34;area\u0026#34;,\u0026#34;description\u0026#34;:\u0026#34;Please set a value for the field area.\u0026#34;}] } ]}   Example message strip display:\n| X Please register all the mandatory values. | If you need help completing the data, call 0800-HELP-FURO. https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto\n rpcStatus    "});index.add({'id':158,'href':'/docs/components/furo-ui5-message-strip-display/','title':"furo-ui5-message-strip-display",'section':"Components",'content':"furo-ui5-message-strip-display #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-message-strip-display.js'; exports FuroUi5MessageStripDisplay js exports \u0026lt;furo-ui5-message-strip-display\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: furo ui5 message strip\n Description #  The furo-ui5-message-strip-display is the render component for the furo-ui5-message-strip component. The display component can be controlled by several furo-ui5-message-strip components.\n \u0026lt;furo-ui5-message-strip-display\u0026gt;\u0026lt;/furo-ui5-message-strip-display\u0026gt; \u0026lt;furo-ui5-message-strip ƒ-show-information=\u0026quot;--wire\u0026quot;\u0026gt;\u0026lt;/furo-ui5-message-strip\u0026gt; \u0026lt;furo-ui5-message-strip ƒ-show-warning=\u0026quot;--wire\u0026quot; message=\u0026quot;Static warning message\u0026quot;\u0026gt;\u0026lt;/furo-ui5-message-strip\u0026gt; Attributes and Properties #  Methods #  clearAll #  clearAll() ⟹ void\n* → ƒ-clear-all\nRemoves all strips\n\n"});index.add({'id':159,'href':'/docs/components/furo-ui5-money-input/','title':"furo-ui5-money-input",'section':"Components",'content':"furo-ui5-money-input #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-money-input.js'; exports FuroUi5MoneyInput js exports \u0026lt;furo-ui5-money-input\u0026gt; custom-element-definition superclass LitElement mixes FBP mixes FieldNodeAdapter\n Summary: Binds a entityObject field google.type.Money to a number-input and currency dropdown fields\n Description #  The furo-ui5-money-input is a input element composition for FieldNodes of type google.type.Money. It consists of\n ui5-input of type Number furo-ui5-text-input  You can set currencies dropdown with options in meta or set options attribute as json in element or set currencies as string in element. the three ways have priority : currencies \u0026gt; options as attribute \u0026gt; options in meta.\n1 2 3  \u0026lt;furo-ui5-money-input ƒ-bind-data=\u0026#34;--dao(google.type.Money)\u0026#34; options=\u0026#39;{\u0026#34;list\u0026#34;: [ \u0026#34;CHF\u0026#34;,\u0026#34;EUR\u0026#34;,\u0026#34;USD\u0026#34; ]}\u0026#39;\u0026gt;\u0026lt;/furo-ui5-money-input\u0026gt; \u0026lt;furo-ui5-money-input ƒ-bind-data=\u0026#34;--dao(google.type.Money)\u0026#34; options=\u0026#39;{\u0026#34;list\u0026#34;: [ {\u0026#34;id\u0026#34;:\u0026#34;CHF\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;Schweiz\u0026#34;},{\u0026#34;id\u0026#34;:\u0026#34;EUR\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;Europa\u0026#34;, \u0026#34;selected\u0026#34;: true}\u0026#39;\u0026gt;\u0026lt;/furo-ui5-money-input\u0026gt; \u0026lt;furo-ui5-money-input ƒ-bind-data=\u0026#34;--dao(google.type.Money)\u0026#34; currencies=\u0026#34;CHF,EUR,USD\u0026#34;\u0026gt;\u0026lt;/furo-ui5-money-input\u0026gt;   supported meta and constraints #   readonly: true , set the element to readonly required: true , set the element to required  Tags: money input\nExample #          1 2 3 4 5 6 7 8 9 10 11  \u0026lt;furo-form-layouter four\u0026gt; \u0026lt;furo-ui5-money-input ƒ-bind-data=\u0026quot;\u0026ndash;doExp(.furo_data_money_input)\u0026quot; \u0026gt;\u0026lt;/furo-ui5-money-input\u0026gt; \u0026lt;furo-ui5-money-input value-state=\u0026quot;Success\u0026quot; text=\u0026quot;Override\u0026quot; ƒ-bind-data=\u0026quot;\u0026ndash;doExp(.furo_data_money_input)\u0026quot; \u0026gt;\u0026lt;/furo-ui5-money-input\u0026gt; \u0026lt;/furo-form-layouter\u0026gt; \n  Attributes and Properties #  _previousValueState #  default: { state: 'None', message: '' }\n\n_attributesFromFNA #  default: { readonly: undefined, }\n\n_constraintsFromFNA #  default: { required: undefined, }\n\n_privilegedAttributes #  default: { readonly: null, required: null, disabled: null, }\n\ndisabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → Money\nFired when the input operation has finished by pressing Enter or on focusout. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a fieldNode.\nSupported types: google.type.Money\n fieldNode of type google.type.Money   readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. Attributes that can be se are required,readonly,disabled , Use this after manual or scripted update of the attributes.\n\nonFnaOptionsChanged #  onFnaOptionsChanged(options `` ) ⟹ void\n``  → ƒ-on-fna-options-changed\nChecks if options.flags has an entry currency_list In this case the option list is applied to the currency field as suggestion items.\nIf you use a static option definition in the type specification (furo), you can define the list as follows:\noptions: flags: - currency_list list: - '@type': type.googleapis.com/furo.Optionitem display_name: Swiss francs (CHF) id: CHF selected: false - '@type': type.googleapis.com/furo.Optionitem display_name: Euro (EUR) id: EUR selected: false - '@type': type.googleapis.com/furo.Optionitem display_name: US Dollar (USD) id: USD selected: false  options    _convertDataToMoneyObj #  _convertDataToMoneyObj(currency *amount* obj `` ) ⟹ void\n  ``  → ƒ\u0026ndash;convert-data-to-money-obj\n currency  amount  obj    _getElements #  _getElements() ⟹ void\n* → ƒ\u0026ndash;get-elements\n\n"});index.add({'id':160,'href':'/docs/components/furo-ui5-money-input-labeled/','title':"furo-ui5-money-input-labeled",'section':"Components",'content':"furo-ui5-money-input-labeled #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-money-input-labeled.js'; exports FuroUi5MoneyInputLabeled js exports \u0026lt;furo-ui5-money-input-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: labeled input field\n Description #  The furo-ui5-money-input-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\n1  \u0026lt;furo-ui5-money-input-labeled ƒ-bind-data=\u0026#34;--dao(FIELDNODE)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-money-input-labeled\u0026gt;   Attributes and Properties #  label #  label string default: ''\nthe label for the data-money-input required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → google.type.Money\nFires the field value when it changes. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside Supported types: google.type.Money\n fieldNode    "});index.add({'id':161,'href':'/docs/components/furo-ui5-multi-combobox/','title':"furo-ui5-multi-combobox",'section':"Components",'content':"furo-ui5-multi-combobox #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-multi-combobox.js'; exports FuroUi5MultiCombobox js extends src/furo-ui5-multi-combobox.js mixes FieldNodeAdapter\n Summary: data select field\n Description #  The furo-ui5-multi-combobox component is used to create a drop-down list. The items inside the furo-ui5-multi-combobox define the available options by using the ui5-mcb-item component. Use the function bindOptions to bind a RepeaterNode as a option list.\n1 2 3 4  \u0026lt;furo-ui5-multi-combobox ƒ-bind-data=\u0026#34;--entity(*.data.description)\u0026#34; ƒ-bind-options=\u0026#34;--collection(*.entities)\u0026#34;\u0026gt; \u0026lt;/furo-ui5-multi-combobox\u0026gt;   Attributes and Properties #  activeFieldBinding #  default: false\nFlag to indicate if a field is attached Default: false idFieldPath #  default: 'id'\nDefines the field path that is used from the bound RepeaterNode (bindOptions) to identify the option items. Point-separated path to the field E.g. data.partner.ulid default: id This attribute is related to the option list displayFieldPath #  default: 'display_name'\nDefines the field path that is used from the bound RepeaterNode (bindOptions) to display the option items. Point-separated path to the field E.g. data.partner.display_name default: display_name This attribute is related to the option list valueFieldPath #  default: 'id'\nDefines the field path that is used to update the bound component if the user has selected an option. Point-separated path to the field Must be set if a data binding is specified. default: id This attribute is related to the option list. optionList[selected].valueFieldPath ==\u0026gt; bound FieldNode boundFieldIdPath #  default: 'id'\nDefines the id field path of the bound FieldNode. Point-separated path to the field Must be set if a data binding is specified with a complex type. default: id This attribute is related to the bound FieldNode. Events #  options-updated #  @-options-updated → optionNodeList\nFired after the option list was rebuilt. value-changed #  @-value-changed → [string]\nFires the field value when it changes. Methods #  readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. those attributes can be set. value-state, required,readonly,disabled, value-field-path, display-field-path Use this after manual or scripted update of the attributes.\n\nbindOptions #  bindOptions(repeaterNode `` ) ⟹ void\n``  → ƒ-bind-options\nHere a RepeaterNode can be connected to the component as an option list.\n repeaterNode    bindData #  bindData(fieldNode FieldNode ) ⟹ boolean\nFieldNode  → ƒ-bind-data\nOverridden bindData of FieldNodeAdapter\n fieldNode    selectOptionsByIds #  selectOptionsByIds(ids [] ) ⟹ void\n[]  → ƒ-select-options-by-ids\nSelects an option by id. The id field must be comparable.\n ids string} must match the data   "});index.add({'id':162,'href':'/docs/components/furo-ui5-multi-combobox-labeled/','title':"furo-ui5-multi-combobox-labeled",'section':"Components",'content':"furo-ui5-multi-combobox-labeled #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-multi-combobox-labeled.js'; exports FuroUi5MultiComboboxLabeled js exports \u0026lt;furo-ui5-multi-combobox-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: labeled multi-combobox\n Description #  furo-ui5-multi-combobox-labeled The furo-ui5-multi-combobox-labeled is a composition to easily use a complete data multi-combobox with label according to the design specification of SAP Fiori Design System.\nAttributes and Properties #  label #  label string default: ''\nthe label for the data-number-input idFieldPath #  id-field-path string default: 'id'\nDefines the field path that is used from the injected RepeaterNode to identify the option items. Point-separated path to the field E.g. data.partner.ulid valueFieldPath #  value-field-path string default: 'id'\nDefines the field path that is used to update the bound component if the user has selected an option. Point-separated path to the field Must be set if a data binding is specified. displayFieldPath #  display-field-path string default: 'display_name'\nDefines the field path that is used from the injected RepeaterNode to display the option items. Point-separated path to the field E.g. data.partner.display_name required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user and appears in disabled state. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → String\nFires the field value when it changes. Methods #  focus #  focus(options Object ) ⟹ void\nObject  → ƒ-focus\nFocuses the underlying ui5 input element\n options https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus   bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    bindOptions #  bindOptions(repeaterNode `` ) ⟹ void\n``  → ƒ-bind-options\nBinds a repeaterNode to the furo-ui5-multi-combobox component\n repeaterNode    Slots #  valueStateMessage #  Type: HTMLElement\ndefines the value state message that will be displayed as pop up under the input element. "});index.add({'id':163,'href':'/docs/components/furo-ui5-multi-input/','title':"furo-ui5-multi-input",'section':"Components",'content':"furo-ui5-multi-input #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-multi-input.js'; exports FuroUi5MultiInput js extends src/furo-ui5-multi-input.js mixes FieldNodeAdapter\n Summary: repeated strings\n Description #  A furo-ui5-multi-input field allows the user to enter multiple values, which are displayed as ui5-token. https://sap.github.io/ui5-webcomponents/playground/components/MultiInput/\nSupported type: repeated string\n1  \u0026lt;furo-ui5-multi-input ƒ-bind-data=\u0026#34;--dao(FIELDNODE)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-multi-input\u0026gt;   Example #           1 2 3 4 5 6 7 8  \u0026lt;furo-ui5-multi-input ƒ-bind-data=\u0026#34;--data(*.repeated_sring)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-multi-input\u0026gt; \u0026lt;furo-ui5-multi-input value-state=\u0026#34;Success\u0026#34; placeholder=\u0026#34;Placeholder\u0026#34; ƒ-bind-data=\u0026#34;--data(*.repeated_sring)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-multi-input\u0026gt;    Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a FieldNode to the component.\nSupported types: repeated string\n fieldNode    "});index.add({'id':164,'href':'/docs/components/furo-ui5-multi-input-labeled/','title':"furo-ui5-multi-input-labeled",'section':"Components",'content':"furo-ui5-multi-input-labeled #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-multi-input-labeled.js'; exports FuroUi5MultiInputLabeled js exports \u0026lt;furo-ui5-multi-input-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: labeled textarea field\n Description #  The furo-ui5-multi-input-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\n1  \u0026lt;furo-ui5-multi-input-labeled ƒ-bind-data=\u0026#34;--dao(FIELDNODE)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-multi-input-labeled\u0026gt;   Example #              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  \u0026lt;furo-ui5-multi-input-labeled full ƒ-bind-data=\u0026#34;--data(*.repstring)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-multi-input-labeled\u0026gt; \u0026lt;furo-ui5-multi-input-labeled required=\u0026#34;\u0026#34; ƒ-bind-data=\u0026#34;--data(*.repstring)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-multi-input-labeled\u0026gt; \u0026lt;furo-ui5-multi-input-labeled disabled=\u0026#34;\u0026#34; ƒ-bind-data=\u0026#34;--data(*.repstring)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-multi-input-labeled\u0026gt; \u0026lt;furo-ui5-multi-input-labeled label=\u0026#34;Label\u0026#34; ƒ-bind-data=\u0026#34;--data(*.repstring)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-multi-input-labeled\u0026gt; \u0026lt;furo-ui5-multi-input-labeled show-value-help-icon ƒ-bind-data=\u0026#34;--data(*.repstring)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-multi-input-labeled\u0026gt;    Attributes and Properties #  label #  label string default: ''\nthe label for the data-multi-input required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. showValueHelpIcon #  show-value-help-icon \nDetermines whether a value help icon will be should in the end of the input.\nPressing the icon will fire value-help-trigger event. Events #  value-changed #  @-value-changed → ``\nFires the field value when it changes. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside Supported types: repeated string\n fieldNode    "});index.add({'id':165,'href':'/docs/components/furo-ui5-notification/','title':"furo-ui5-notification",'section':"Components",'content':"furo-ui5-notification #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-notification.js'; exports FuroUi5Notification js exports \u0026lt;furo-ui5-notification\u0026gt; custom-element-definition superclass LitElement\n Summary: trigger component for notifications\n Description #  furo-ui5-notification should be used together witch furo-ui5-notification-list-display or furo-ui5-notification-group-display. you can place those two components into different places. best place the furo-ui5-notification-list(or group)-display on the main site. then you only need one furo-ui5-notification-list(or group)-display. it can work with n furo-ui5-notification.\nExample with defaults #       show google rpc status messages clear messages          The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC. Each Status message contains three pieces of data: error code, error message, and error details.\ngithub.com/googleapis/\u0026hellip;\n 1 2 3 4 5 6 7 8  \u0026lt;body\u0026gt; \u0026lt;furo-ui5-notification-list-display ƒ-clear-all=\u0026#34;--clearRequested\u0026#34;\u0026gt;\u0026lt;/furo-ui5-notification-list-display\u0026gt; \u0026lt;main\u0026gt; \u0026lt;furo-ui5-notification ƒ-parse-grpc-status=\u0026#34;--grpcStatus\u0026#34;\u0026gt;\u0026lt;/furo-ui5-notification\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/body\u0026gt;    Attributes and Properties #  dismissButtonText #  default: 'dismiss'\n\ntext #  text \nbanner text content. Use word to mark as strong. Use \\n to insert a line break.\nHTML tags will be stripped out. payload #  payload \npayload. can be a GRPC error or a notification message collection. Events #  open-furo-ui5-notification-requested #  @-open-furo-ui5-notification-requested → {Object} this\nFired when value open banner is requested open-furo-ui5-notification-group-requested #  @-open-furo-ui5-notification-group-requested → {Object} this\nFired when value open banner is requested notification-closed. #  @-notification-closed. → {Object} payload\nFired when notification is closed. notification-custom-action #  @-notification-custom-action → {Object} payload\nFired when notification custom action is triggered. this is a general action event. notification-custom-action-commandName #  @-notification-custom-action-commandName → {Object} payload\nFired when notification custom action is triggered. Methods #  parseGrpcStatus #  parseGrpcStatus(status *s* ) ⟹ void\n   → ƒ-parse-grpc-status\ninject a grpc status object parse grpc status object and set the label according to the LocalizedMessage in status. https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto .\n status  s    injectNotificationCollection #  injectNotificationCollection(c `` ) ⟹ void\n``  → ƒ-inject-notification-collection\ninject an array of notification messages. the notification message should be an array of the following object signature: { \u0026ldquo;id\u0026rdquo;: 1, \u0026ldquo;display_name\u0026rdquo;: \u0026ldquo;\u0026rdquo;, \u0026ldquo;heading\u0026rdquo;: \u0026ldquo;heading 1\u0026rdquo;, \u0026ldquo;message_priority\u0026rdquo;: \u0026ldquo;High\u0026rdquo;, \u0026ldquo;category\u0026rdquo;: \u0026ldquo;warning\u0026rdquo;, \u0026ldquo;category_priority\u0026rdquo;: \u0026ldquo;High\u0026rdquo;, \u0026ldquo;actions\u0026rdquo;: [ { \u0026ldquo;icon\u0026rdquo;:\u0026ldquo;accept\u0026rdquo;, \u0026ldquo;command\u0026rdquo;:\u0026ldquo;accept\u0026rdquo;, \u0026ldquo;text\u0026rdquo;: \u0026ldquo;accept\u0026rdquo; }, { \u0026ldquo;icon\u0026rdquo;:\u0026ldquo;message-error\u0026rdquo;, \u0026ldquo;command\u0026rdquo;:\u0026ldquo;reject\u0026rdquo;, \u0026ldquo;text\u0026rdquo;: \u0026ldquo;Reject\u0026rdquo; } ], \u0026ldquo;message\u0026rdquo;: \u0026ldquo;Markdown | Less | Pretty\\n\u0026mdash; | \u0026mdash; | \u0026mdash;\\nStill | renders | nicely\\n1 | 2 | 3\u0026rdquo; }\n c    "});index.add({'id':166,'href':'/docs/components/furo-ui5-notification-group-display/','title':"furo-ui5-notification-group-display",'section':"Components",'content':"furo-ui5-notification-group-display #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-notification-group-display.js'; exports FuroUi5NotificationGroupDisplay js exports \u0026lt;furo-ui5-notification-group-display\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: ui5 notification group display\n Description #  Notification display component that works together with furo-ui5-notification. Best place the furo-ui5-notification-group-display on the main site. then you only need one furo-ui5-notification-group-display. you can also use more furo-ui5-notification-group-display\u0026rsquo;s for special needs. But You have to be sure the furo-ui5-notification-group-display can receive the notification events.\nExample #       show notifications clear messages         1 2 3 4 5  \u0026lt;furo-ui5-notification-group-display ƒ-clear-all=\u0026#34;--clearRequested\u0026#34;\u0026gt;\u0026lt;/furo-ui5-notification-group-display\u0026gt; \u0026lt;furo-ui5-notification ƒ-inject-notification-collection=\u0026#34;--notificationsJson\u0026#34; \u0026gt;\u0026lt;/furo-ui5-notification\u0026gt;    Attributes and Properties #  headerText #  header-text string default: ''\nthe header text of the notification target #  target \nthe target dom object, which sends the notification event collapsed #  collapsed \nDefines if the group is collapsed or expanded. showCounter #  show-counter \nDefines if the items counter would be displayed. showClose #  show-close \nDefines if the close button would be displayed. Methods #  clearAll #  clearAll() ⟹ void\n* → ƒ-clear-all\nclear all notifications\n\n"});index.add({'id':167,'href':'/docs/components/furo-ui5-notification-list-display/','title':"furo-ui5-notification-list-display",'section':"Components",'content':"furo-ui5-notification-list-display #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-notification-list-display.js'; exports FuroUi5NotificationListDisplay js exports \u0026lt;furo-ui5-notification-list-display\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: ui5 notification list\n Description #  Notification display component that works together with furo-ui5-notification. Displays google.rpc.Status messages in a grouped list. https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto.\nBest place the furo-ui5-notification-list-display on the main site. then you only need one furo-ui5-notification-list-display. you can also use more than one furo-ui5-notification-list-display for special needs. But you have to be sure the furo-ui5-notification-list-display can receive the notification events from furo-ui5-notification.\nExample #       show google rpc status messages clear messages          The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC. Each Status message contains three pieces of data: error code, error message, and error details.\ngithub.com/googleapis/\u0026hellip;\n 1 2 3 4 5 6 7 8 9  \u0026lt;furo-ui5-notification-list-display header-text=\u0026#34;Notifications \u0026amp;amp; Errors\u0026#34; ƒ-clear-all=\u0026#34;--clearRequested\u0026#34; group-title-message=\u0026#34;Localized Messages\u0026#34; group-title-help=\u0026#34;Helpful information\u0026#34; group-title-bad-request=\u0026#34;Field Violations\u0026#34; @-notification-counter-update=\u0026#34;--ncUpdated\u0026#34;\u0026gt;\u0026lt;/furo-ui5-notification-list-display\u0026gt; \u0026lt;furo-ui5-notification ƒ-parse-grpc-status=\u0026#34;--grpcStatus\u0026#34;\u0026gt;\u0026lt;/furo-ui5-notification\u0026gt;    Attributes and Properties #  headerText #  header-text string default: ''\nthe header text of the notification noDataText #  no-data-text string default: 'No messages'\nDefines the text that is displayed when the list contains no items. _notificationCount #  default: 0\n\ngroupTitleHelp #  group-title-help string default: 'Help'\nDefines the notification group element title for notifications of type \u0026ldquo;type.googleapis.com/google.rpc.Help\u0026rdquo; groupTitleBadRequest #  group-title-bad-request string default: 'Bad Request'\nDefines the notification group element title for notifications of type \u0026ldquo;type.googleapis.com/google.rpc.BadRequest\u0026rdquo; groupTitleMessage #  group-title-message string default: 'Information'\nDefines the notification group element title for notifications of type \u0026ldquo;type.googleapis.com/google.rpc.LocalizedMessage\u0026rdquo; _md #   \nshowClose #  show-close \nDefines if the close button would be displayed. Events #  notification-counter-update #  @-notification-counter-update → CustomEvent\n\nvalue-changed #  @-value-changed → Number\nFires a notification counter changed. Use this event to show the amount of notifications to the user. Methods #  parseGrpcStatus #  parseGrpcStatus(d `` ) ⟹ void\n``  → ƒ-parse-grpc-status\nparse grpc status object and set the notification text according to the LocalizedMessage in status. https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto.\n d    parseNotificationMessage #  parseNotificationMessage(message `` ) ⟹ void\n``  → ƒ-parse-notification-message\nparse notification message and set the ui5 notification properties like priority, actions, heading.. the notification message should be a furo.notification type: { \u0026ldquo;id\u0026rdquo;: 1, \u0026ldquo;display_name\u0026rdquo;: \u0026ldquo;\u0026rdquo;, \u0026ldquo;heading\u0026rdquo;: \u0026ldquo;heading 1\u0026rdquo;, \u0026ldquo;message_priority\u0026rdquo;: \u0026ldquo;High\u0026rdquo;, \u0026ldquo;category\u0026rdquo;: \u0026ldquo;warning\u0026rdquo;, \u0026ldquo;category_priority\u0026rdquo;: \u0026ldquo;High\u0026rdquo;, \u0026ldquo;actions\u0026rdquo;: [ { \u0026ldquo;icon\u0026rdquo;:\u0026ldquo;accept\u0026rdquo;, \u0026ldquo;command\u0026rdquo;:\u0026ldquo;accept\u0026rdquo;, \u0026ldquo;text\u0026rdquo;: \u0026ldquo;accept\u0026rdquo; }, { \u0026ldquo;icon\u0026rdquo;:\u0026ldquo;message-error\u0026rdquo;, \u0026ldquo;command\u0026rdquo;:\u0026ldquo;reject\u0026rdquo;, \u0026ldquo;text\u0026rdquo;: \u0026ldquo;Reject\u0026rdquo; } ], \u0026ldquo;message\u0026rdquo;: \u0026ldquo;Markdown | Less | Pretty\\n\u0026mdash; | \u0026mdash; | \u0026mdash;\\nStill | renders | nicely\\n1 | 2 | 3\u0026rdquo; }\n message    _show #  _show() ⟹ void\n* → ƒ\u0026ndash;show\nshows grpc status notifications implemented types are:\n Bad Request with Field Violations   \n_dispatchNotificationCounterUpdates #  _dispatchNotificationCounterUpdates(count `` ) ⟹ void\n``  → ƒ\u0026ndash;dispatch-notification-counter-updates\n count    clearAll #  clearAll() ⟹ void\n* → ƒ-clear-all\nclear all notifications\n\n"});index.add({'id':168,'href':'/docs/components/furo-ui5-number-input/','title':"furo-ui5-number-input",'section':"Components",'content':"furo-ui5-number-input #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-number-input.js'; exports FuroUi5NumberInput js extends src/furo-ui5-number-input.js mixes FieldNodeAdapter\n Summary: data number input field\n Description #  The furo-ui5-number-input component allows the user to enter and edit numbers with data binding. It supports all features from the SAP ui5 Input element.\nYou can bind any number type, any furo.fat.xxx number type, furo.BigDecimal or the google.wrapper.xxx number types.\n1 2 3  \u0026lt;furo-ui5-number-input ƒ-bind-data=\u0026#34;--dao(FIELDNODE)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-number-input\u0026gt;   Specificity #   Attributes which are set in the html source will have the highest specificity and will never get overwritten by metas or fat. Attributes set in meta will have the lowest specificity and will be overwritten by attributes from fat.     meta fat html     1 10 100    supported FAT attributes #   \u0026ldquo;readonly\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to readonly \u0026ldquo;required\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to required \u0026ldquo;disabled\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to disabled \u0026ldquo;placeholder\u0026rdquo;:\u0026ldquo;string\u0026rdquo; set the placeholder for the element  supported meta and constraints #   readonly: true , set the element to readonly placeholder:\u0026ldquo;some string\u0026rdquo; set the placeholder for the element  The constraint required will mark the element as required\nMethods #  bind-data(fieldNode) Bind a entity field. You can use the entity even when no data was received.\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with \u0026ndash;entity(*.fields.fieldname)\nExample #             1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  \u0026lt;furo-form-layouter four\u0026gt; \u0026lt;furo-ui5-number-input ƒ-bind-data=\u0026#34;--doExp(*.furo_data_number_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-number-input\u0026gt; \u0026lt;furo-ui5-number-input readonly ƒ-bind-data=\u0026#34;--doExp(*.furo_data_number_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-number-input\u0026gt; \u0026lt;furo-ui5-number-input disabled ƒ-bind-data=\u0026#34;--doExp(*.furo_data_number_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-number-input\u0026gt; \u0026lt;furo-ui5-number-input value-state=\u0026#34;Success\u0026#34; placeholder=\u0026#34;Placeholder\u0026#34; ƒ-bind-data=\u0026#34;--doExp(*.furo_data_number_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-number-input\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;    Attributes and Properties #  nativeInputAttributes #   \n_previousValueState #  default: { state: 'None', message: '' }\n\nEvents #  change #  @-change → number\nFired when the input operation has finished by pressing Enter or on focusout. input #  @-input → ``\nFired when the value of the ui5-input changes at each keystroke, and when a suggestion item has been selected. value-changed #  @-value-changed → string\nFires the field value when it changes. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a FieldNode to the component.\nSupported types:\n  double, float, int32, uint32, sint32, fixed32, sfixed32, int64, uint64, sint64, fixed64, sfixed64\n  google.protobuf.DoubleValue, google.protobuf.FloatValue, google.protobuf.Int32Value, etc.\n  furo.fat.Doube, furo.fat.Float, furo.fat.Int32, etc.\n  furo.BigDecimal\n  fieldNode    readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. those attributes can be set. value-state, value-state-message, icon, placeholder, required,readonly,disabled Use this after manual or scripted update of the attributes.\n\n"});index.add({'id':169,'href':'/docs/components/furo-ui5-number-input-labeled/','title':"furo-ui5-number-input-labeled",'section':"Components",'content':"furo-ui5-number-input-labeled #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-number-input-labeled.js'; exports FuroUi5NumberInputLabeled js exports \u0026lt;furo-ui5-number-input-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: labeled input field\n Description #  The furo-ui5-number-input-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\n1  \u0026lt;furo-ui5-number-input ƒ-bind-data=\u0026#34;--dao(FIELDNODE)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-number-input\u0026gt;   Example #              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  \u0026lt;furo-form-layouter four\u0026gt; \u0026lt;furo-ui5-number-input-labeled ƒ-bind-data=\u0026#34;--doExp(*.furo_data_number_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-number-input-labeled\u0026gt; \u0026lt;furo-ui5-number-input-labeled readonly ƒ-bind-data=\u0026#34;--doExp(*.furo_data_number_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-number-input-labeled\u0026gt; \u0026lt;furo-ui5-number-input-labeled disabled ƒ-bind-data=\u0026#34;--doExp(*.furo_data_number_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-number-input-labeled\u0026gt; \u0026lt;furo-ui5-number-input-labeled required ƒ-bind-data=\u0026#34;--doExp(*.furo_data_number_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-number-input-labeled\u0026gt; \u0026lt;furo-ui5-number-input-labeled value-state=\u0026#34;Success\u0026#34; placeholder=\u0026#34;Placeholder\u0026#34; ƒ-bind-data=\u0026#34;--doExp(*.furo_data_number_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-number-input-labeled\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;    Attributes and Properties #  label #  label string default: ''\nthe label for the data-number-input icon #  icon string default: ''\n\nrequired #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user and appears in disabled state. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → Number\nFires the field value when it changes. Methods #  focus #  focus(options Object ) ⟹ void\nObject  → ƒ-focus\nFocuses the underlying ui5 input element\n options https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus   bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside Supported types: double, float, int32, uint32, sint32, fixed32, sfixed32, int64, uint64, sint64, fixed64, sfixed64 google.protobuf.DoubleValue, google.protobuf.FloatValue, google.protobuf.Int32Value, etc. furo.fat.Doube, furo.fat.Float, furo.fat.Int32, etc.\n fieldNode    "});index.add({'id':170,'href':'/docs/components/furo-ui5-pagination-bar/','title':"furo-ui5-pagination-bar",'section':"Components",'content':"furo-ui5-pagination-bar #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-pagination-bar.js'; exports FuroUi5PaginationBar js exports \u0026lt;furo-ui5-pagination-bar\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: Pagination Bar\n Description #  The furo-ui5-pagination-bar element loops the hateoas array and finds out the pagination information like prev, next, first and last\n \u0026lt;furo-ui5-pagination-bar ƒ-inject=\u0026quot;--hateoas\u0026quot;\u0026gt;\u0026lt;/furo-ui5-pagination-bar\u0026gt; Example #     load collection      1 2 3 4 5 6 7 8 9 10 11  \u0026lt;furo-ui5-pagination-bar ƒ-inject=\u0026#34;--responseHts\u0026#34; @-pagination-next=\u0026#34;--next\u0026#34; @-pagination-last=\u0026#34;--last\u0026#34;\u0026gt;\u0026lt;/furo-ui5-pagination-bar\u0026gt; \u0026lt;furo-collection-agent service=\u0026#34;ProjectService\u0026#34; ƒ-hts-in=\u0026#34;--hts\u0026#34; ƒ-next=\u0026#34;--next\u0026#34; ƒ-last=\u0026#34;--last\u0026#34; @-response-hts-updated=\u0026#34;--responseHts\u0026#34;\u0026gt; \u0026lt;/furo-collection-agent\u0026gt;    Attributes and Properties #  currentPage #  currentPage number default: 0\n\nfirst #  first \n\nprev #  prev \n\nnext #  next \n\nlast #  last \n\nEvents #  hts-injected #  @-hts-injected → CustomEvent\n\npagination-first #  @-pagination-first → ``\nIs fired if the pagination button \u0026lsquo;sys_first_page\u0026rsquo; was clicked pagination-last #  @-pagination-last → ``\nIs fired if the pagination button \u0026lsquo;sys_last_page\u0026rsquo; was clicked pagination-prev #  @-pagination-prev → ``\nIs fired if the pagination button \u0026lsquo;sys_prev_page\u0026rsquo; was clicked pagination-next #  @-pagination-next → ``\nIs fired if the pagination button \u0026lsquo;sys_next_page\u0026rsquo; was clicked Tags: pagination Methods #  inject #  inject(hts `` ) ⟹ void\n``  → ƒ-inject\ninit pagination attributes Supported type: furo.Link\n hts    Styling #  The following custom properties available for styling:\n   Custom property Description     --furo-ui5-pagination-bar-padding-right Right padding definition  default: 1rem fallback: 1rem   --furo-ui5-pagination-bar-background-color Background color  default: --sapPageHeader_Background fallback: #ffffff    "});index.add({'id':171,'href':'/docs/components/furo-ui5-password-input/','title':"furo-ui5-password-input",'section':"Components",'content':"furo-ui5-password-input #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-password-input.js'; exports FuroUi5PasswordInput js extends src/furo-ui5-password-input.js mixes FieldNodeAdapter\n Summary: data password input field\n Description #  The \u0026lsquo;furo-ui5-password-input\u0026rsquo; component allows the user to enter and edit password with data binding. It supports all features from the SAP ui5 Input element.\nYou can bind any string type, like furo.fat.String type or the google.protobuf.StringValue type.\n1 2 3  \u0026lt;furo-ui5-password-input ƒ-bind-data=\u0026#34;--dao(FIELDNODE)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-password-input\u0026gt;   Specificity #   Attributes which are set in the html source will have the highest specificity and will never get overwritten by metas or fat. Attributes set in meta will have the lowest specificity and will be overwritten by attributes from fat.  ** meta \u0026lt; fat \u0026lt; html **\nsupported FAT attributes #   \u0026ldquo;readonly\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to readonly \u0026ldquo;required\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to required \u0026ldquo;disabled\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to disabled \u0026ldquo;icon\u0026rdquo;:\u0026ldquo;home\u0026rdquo; set the icon \u0026ldquo;placeholder\u0026rdquo;:\u0026ldquo;string\u0026rdquo; set the placeholder for the element \u0026ldquo;max\u0026rdquo;:\u0026ldquo;number\u0026rdquo; set the maximum number of characters available in the input field.  supported meta and constraints #   readonly: true , set the element to readonly placeholder:\u0026ldquo;some string\u0026rdquo; set the placeholder for the element max:\u0026ldquo;number\u0026rdquo; set the maximum number of characters available in the input field.  The constraint required will mark the element as required\nMethods #  bind-data(fieldNode) Bind a entity field. You can use the entity even when no data was received.\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with \u0026ndash;entity(*.fields.fieldname)\nExample #             1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  \u0026lt;furo-form-layouter four\u0026gt; \u0026lt;furo-ui5-password-input ƒ-bind-data=\u0026#34;--doExp(*.furo_data_password_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-password-input\u0026gt; \u0026lt;furo-ui5-password-input readonly ƒ-bind-data=\u0026#34;--doExp(*.furo_data_password_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-password-input\u0026gt; \u0026lt;furo-ui5-password-input disabled ƒ-bind-data=\u0026#34;--doExp(*.furo_data_password_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-password-input\u0026gt; \u0026lt;furo-ui5-password-input value-state=\u0026#34;Success\u0026#34; placeholder=\u0026#34;Placeholder\u0026#34; ƒ-bind-data=\u0026#34;--doExp(*.furo_data_password_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-password-input\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;    Attributes and Properties #  nativeInputAttributes #   \ntype #  default: 'Password'\n\n_previousValueState #  default: { state: 'None', message: '' }\n\n_attributesFromFNA #  default: { readonly: undefined, placeholder: undefined, }\n\n_constraintsFromFNA #  default: { required: undefined, max: undefined, // maps to maxlength }\n\n_labelsFromFAT #  default: { readonly: undefined, disabled: undefined, required: undefined, }\n\n_attributesFromFAT #  default: { placeholder: undefined, max: undefined, // maps to maxlength icon: undefined, // updates the icon }\n\n_privilegedAttributes #  default: { readonly: null, placeholder: null, required: null, disabled: null, icon: null, maxlength: null, }\n\nEvents #  change #  @-change → text\nFired when the input operation has finished by pressing Enter or on focusout. input #  @-input → ``\nFired when the value of the ui5-input changes at each keystroke, and when a suggestion item has been selected. value-changed #  @-value-changed → String\nFires the field value when it changes. icon-clicked #  @-icon-clicked → MouseEvent\nFired when icon is clicked password-showed #  @-password-showed → void\nFired when the password is showed, after calling the show method. password-hidden #  @-password-hidden → void\nFired when the password is hidden, after calling the hide() method. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a FieldNode to the component.\nSupported types: string, google.protobuf.StringValue, furo.fat.String\n fieldNode    readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. those attributes can be set. value-state, value-state-message, icon, placeholder, required,readonly,disabled Use this after manual or scripted update of the attributes.\n\nshow #  show() ⟹ void\n* → ƒ-show\nshow password\n\nhide #  hide() ⟹ void\n* → ƒ-hide\nhide password\n\ntoggleVisibility #  toggleVisibility() ⟹ void\n* → ƒ-toggle-visibility\ntoggle visibility of the password. (show/hide) password\n\n"});index.add({'id':172,'href':'/docs/components/furo-ui5-password-input-labeled/','title':"furo-ui5-password-input-labeled",'section':"Components",'content':"furo-ui5-password-input-labeled #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-password-input-labeled.js'; exports FuroUi5PasswordInputLabeled js exports \u0026lt;furo-ui5-password-input-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: labeled input field\n Description #  The furo-ui5-password-input-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\n1  \u0026lt;furo-ui5-password-input-labeled ƒ-bind-data=\u0026#34;--dao(FIELDNODE)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-password-input\u0026gt;   Example #              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  \u0026lt;furo-form-layouter four\u0026gt; \u0026lt;furo-ui5-password-input-labeled ƒ-bind-data=\u0026#34;--doExp(*.furo_data_password_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-password-input-labeled\u0026gt; \u0026lt;furo-ui5-password-input-labeled readonly ƒ-bind-data=\u0026#34;--doExp(*.furo_data_password_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-password-input-labeled\u0026gt; \u0026lt;furo-ui5-password-input-labeled disabled ƒ-bind-data=\u0026#34;--doExp(*.furo_data_password_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-password-input-labeled\u0026gt; \u0026lt;furo-ui5-password-input-labeled required ƒ-bind-data=\u0026#34;--doExp(*.furo_data_password_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-password-input-labeled\u0026gt; \u0026lt;furo-ui5-password-input-labeled value-state=\u0026#34;Success\u0026#34; placeholder=\u0026#34;Placeholder\u0026#34; ƒ-bind-data=\u0026#34;--doExp(*.furo_data_password_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-password-input-labeled\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;    Attributes and Properties #  label #  label string default: ''\nthe label for the data-password-input required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user and appears in disabled state. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → String\nFires the field value when it changes. Methods #  focus #  focus(options Object ) ⟹ void\nObject  → ƒ-focus\nFocuses the underlying ui5 input element\n options https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus   bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside Supported types: string, google.protobuf.StringValue, furo.fat.String\n fieldNode    Slots #  icon #  Type: HTMLElement\ndefines the icon to be displayed in the input element. "});index.add({'id':173,'href':'/docs/components/furo-ui5-property/','title':"furo-ui5-property",'section':"Components",'content':"furo-ui5-property #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-property.js'; exports FuroUi5Property js exports \u0026lt;furo-ui5-property\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: ????? bind types of type any\n Description #  furo-ui5-property Field for type furo.Property. This can be used to display \u0026ldquo;dynamic\u0026rdquo; fields aka properties.\nfuro-ui5-property works with repeated types and non repeating property types.\n1  \u0026lt;furo-ui5-property ƒ-bind-data=\u0026#34;--entity(*.single_type_property)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-property\u0026gt;   Example data for the data-object looks like this\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  \u0026#34;single_type_property\u0026#34;: { \u0026#34;data\u0026#34;: { \u0026#34;@type\u0026#34;: \u0026#34;google.type.Date\u0026#34;, \u0026#34;day\u0026#34;: 8, \u0026#34;month\u0026#34;: 11, \u0026#34;year\u0026#34;: 2022 }, \u0026#34;display_name\u0026#34;: \u0026#34;a date\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;date\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;date\u0026#34;, \u0026#34;meta\u0026#34;: { \u0026#34;fields\u0026#34;: { \u0026#34;data\u0026#34;: { \u0026#34;meta\u0026#34;: { \u0026#34;label\u0026#34;: \u0026#34;Additional fields\u0026#34;, \u0026#34;hint\u0026#34;: \u0026#34;this is data\u0026#34; }, \u0026#34;constraints\u0026#34;: { \u0026#34;min\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;2019-09-09\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;to small\u0026#34; } } } } } }   Example #        load record 1 load record 2 load record 3         1 2 3 4 5 6 7 8 9 10  \u0026lt;furo-form-layouter four\u0026gt; \u0026lt;furo-ui5-property ƒ-bind-data=\u0026#34;--entity(*.data.type_property)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-property\u0026gt; \u0026lt;/furo-form-layouter\u0026gt; \u0026lt;furo-data-object type=\u0026#34;experiment.ExperimentEntity\u0026#34; @-object-ready=\u0026#34;--entity\u0026#34; @-data-changed-after-inject=\u0026#34;--dataChanged\u0026#34; ƒ-inject-raw=\u0026#34;--response\u0026#34;\u0026gt;\u0026lt;/furo-data-object\u0026gt;    Attributes and Properties #  context #  context string default: 'form'\nSet the context, for the renderers. Methods #  bindData #  bindData(propertyField `` ) ⟹ void\n``  → ƒ-bind-data\n propertyField    "});index.add({'id':174,'href':'/docs/components/furo-ui5-propertylist-display/','title':"furo-ui5-propertylist-display",'section':"Components",'content':"furo-ui5-propertylist-display #  @furo/components v1.0.0-rc.7 import '@furo/components/src/furo-ui5-propertylist-display.js'; exports FuroUi5PropertylistDisplay js exports \u0026lt;furo-ui5-propertylist-display\u0026gt; custom-element-definition superclass LitElement\n Summary:\n Example with context=\u0026ldquo;display\u0026rdquo; #        load record 1 load record 2 load record 3        1 2 3 4 5 6 7 8  \u0026lt;furo-form-layouter four\u0026gt; \u0026lt;furo-ui5-propertylist-display ƒ-bind-data=\u0026#34;--entity(*.data.type_property)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-propertylist-display\u0026gt; \u0026lt;/furo-form-layouter\u0026gt; \u0026lt;furo-data-object type=\u0026#34;experiment.ExperimentEntity\u0026#34; @-object-ready=\u0026#34;--entity\u0026#34; ƒ-inject-raw=\u0026#34;--response\u0026#34;\u0026gt;\u0026lt;/furo-data-object\u0026gt;    Description #  furo-ui5-propertylist-display allows the user to show repeated properties (furo.Property) in a readonly mode. For all other types you can use furo-ui5-typerenderer-labeled.\nThe type information of the property is used for the display of the individual attributes. E.g.\n[ { \u0026quot;code\u0026quot;: \u0026quot;c0a7f550-0fbe-4046-8fa9-60c86327b6b1\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;type.googleapis.com/furo.StringProperty\u0026quot;, \u0026quot;data\u0026quot;: \u0026quot;01032020\u0026quot; }, \u0026quot;flags\u0026quot;: [], \u0026quot;display_name\u0026quot;: \u0026quot;Vertragsbeginn\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;246d79a0-0a15-43c5-b18f-ac8a4a449df1\u0026quot;, \u0026quot;meta\u0026quot;: {} } ] You can bind the furo.Property type (single and repeated).\n1 2 3  \u0026lt;furo-ui5-propertylist-display ƒ-bind-data=\u0026#34;--daoCountry(*.data.additional_data)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-propertylist-display\u0026gt;   Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ boolean\nFieldNode  → ƒ-bind-data\nBinds a RepeaterNode of type furo.Property.\n fieldNode    "});index.add({'id':175,'href':'/docs/components/furo-ui5-radio-button/','title':"furo-ui5-radio-button",'section':"Components",'content':"furo-ui5-radio-button #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-radio-button.js'; exports FuroUi5RadioButton js extends src/furo-ui5-radio-button.js mixes FieldNodeAdapter\n Summary: boolean toggle button\n Description #  The \u0026lsquo;furo-ui5-radio-button\u0026rsquo; component allows the user to switch true and false for Bool with data binding.\nIt supports all features from the SAP ui5 toggleButton element.\nYou can bind bool type, furo.fat.Bool type or the google.wrapper.BoolValue type.\n1 2 3 4 5 6 7 8  \u0026lt;furo-ui5-radio-button name=\u0026#34;groupA\u0026#34; ƒ-bind-data=\u0026#34;--dao(FIELDNODE)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-radio-button\u0026gt; \u0026lt;furo-ui5-radio-button name=\u0026#34;groupA\u0026#34; ƒ-bind-data=\u0026#34;--dao(OTHERFIELDNODE)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-radio-button\u0026gt;   Specificity #   Attributes which are set in the html source will have the highest specificity and will never get overwritten by metas or fat. Attributes set in meta will have the lowest specificity and will be overwritten by attributes from fat.     meta fat html     1 10 100    supported FAT attributes #   \u0026ldquo;readonly\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to readonly \u0026ldquo;disabled\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to disabled \u0026ldquo;icon\u0026rdquo;:\u0026quot;\u0026quot; set the icon \u0026ldquo;value-state\u0026rdquo;:\u0026quot;\u0026quot; set the value-state  supported meta and constraints #   readonly: true , set the element to readonly  The constraint required will mark the element as required\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with \u0026ndash;entity(*.fields.fieldname)\nExample #              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  \u0026lt;furo-form-layouter four\u0026gt; \u0026lt;furo-ui5-radio-button ƒ-bind-data=\u0026#34;--doExp(*.furo_data_checkbox_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-radio-button\u0026gt; \u0026lt;furo-ui5-radio-button readonly text=\u0026#34;Override\u0026#34; ƒ-bind-data=\u0026#34;--doExp(*.furo_data_checkbox_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-radio-button\u0026gt; \u0026lt;furo-ui5-radio-button disabled ƒ-bind-data=\u0026#34;--doExp(*.furo_data_checkbox_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-radio-button\u0026gt; \u0026lt;furo-ui5-radio-button value-state=\u0026#34;Warning\u0026#34; placeholder=\u0026#34;Placeholder\u0026#34; ƒ-bind-data=\u0026#34;--doExp(*.furo_data_checkbox_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-radio-button\u0026gt; \u0026lt;!-- just to be able to disable the radio again --\u0026gt; \u0026lt;furo-ui5-checkbox-input value-state=\u0026#34;Success\u0026#34; text=\u0026#34;Toggle\u0026#34; ƒ-bind-data=\u0026#34;--doExp(*.furo_data_checkbox_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-checkbox-input\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;    Attributes and Properties #  _previousValueState #  default: 'None'\n\n_tmpFAT #  default: { labels: {}, value: false }\n\n_attributesFromFNA #  default: { readonly: undefined, disabled: undefined, label: undefined, }\n\n_constraintsFromFNA #  default: {}\n\n_attributesFromFAT #  default: { name: undefined, // the group name label: undefined, icon: undefined, 'value-state': undefined, }\n\n_labelsFromFAT #  default: { readonly: undefined, disabled: undefined, }\n\n_privilegedAttributes #  default: { name: null, readonly: null, disabled: null, text: null, icon: null, 'value-state': null, }\n\nEvents #  change #  @-change → ``\nFired when the input operation has finished by pressing Enter or on focusout. value-changed #  @-value-changed → Boolean\nFired when value changed Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a FieldNode to the component.\nSupported types: bool, google.protobuf.BoolValue, furo.fat.Bool\n fieldNode    readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom.\n\nonFnaFieldValueChanged #  onFnaFieldValueChanged(val `` ) ⟹ void\n``  → ƒ-on-fna-field-value-changed\noverwrite onFnaFieldValueChanged\n val    onFnaFieldNodeBecameInvalid #  onFnaFieldNodeBecameInvalid() ⟹ void\n* → ƒ-on-fna-field-node-became-invalid\noverwrite onFnaFieldNodeBecameInvalid function\n\nonFnaLabelChanged #  onFnaLabelChanged(text *placeholder* ) ⟹ void\n   → ƒ-on-fna-label-changed\noverwrite onFnaLabelChanged function label is mapped to text\n text  placeholder    "});index.add({'id':176,'href':'/docs/components/furo-ui5-reference-search/','title':"furo-ui5-reference-search",'section':"Components",'content':"furo-ui5-reference-search #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-reference-search.js'; exports FuroUi5ReferenceSearch js exports \u0026lt;furo-ui5-reference-search\u0026gt; custom-element-definition superclass LitElement mixes FBP mixes FieldNodeAdapter\n Summary: furo ui5 data reference search\n Description #  The furo-ui5-reference-search is a search input field with the capability to open and extended search component.\nBound data must fullfill the furo.Reference signature. The service, deeplink,\u0026hellip; is taken from the spec of your field. Do not forget to specify.\ndefault usage\n1 2 3  \u0026lt;furo-ui5-reference-search ƒ-bind-data=\u0026#34;--data(*.is_person)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-reference-search\u0026gt;   usage with a extended searcher\n1 2 3 4  \u0026lt;furo-ui5-reference-search extended-searcher=\u0026#34;country-filter\u0026#34; ƒ-bind-data=\u0026#34;--data(*.is_person)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-reference-search\u0026gt;   usage example for a non default response\n1 2 3 4 5 6 7  \u0026lt;furo-ui5-reference-search extended-searcher=\u0026#34;contact-filter\u0026#34; search-response-path=\u0026#34;xx_entities\u0026#34; value-field-path=\u0026#34;data.xx_id\u0026#34; display-field-path=\u0026#34;data.xx_display_name\u0026#34; ƒ-bind-data=\u0026#34;--data(*.is_person)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-reference-search-labeled\u0026gt;   supported meta and constraints #   readonly: true , set the element to readonly placeholder:\u0026ldquo;some string\u0026rdquo; set the placeholder for the element max:\u0026ldquo;number\u0026rdquo; set the maximum number of characters available in the input field.  The constraint required will mark the element as required\nIf your type has a reference type signature (\u0026lsquo;id\u0026rsquo;,\u0026lsquo;display_name\u0026rsquo;, \u0026lsquo;link\u0026rsquo;), the service, and initial deep link is extracted from the link part of your type.\nIf you bind a skalar field, the value which is set in \u0026lsquo;valueFieldPath\u0026rsquo; will be set.\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with \u0026ndash;entity(*.fields.fieldname)\nSpecs #  Define a propper default value on the reference type.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  link:type:furo.Linkdescription:HTS for the initial search (the default works on root resources only)__proto:number:3__ui:nullmeta:default:|{ \u0026#34;rel\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;/contacts\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;contact.Contact\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;Contacts\u0026#34; }placeholder:\u0026#34;\u0026#34;hint:\u0026#34;\u0026#34;label:contact.Reference.link.labeloptions:flags:[]list:[]readonly:falserepeated:falsetypespecific:null  API of a extended searcher #  Searcher Mehtods #  The only method you have to implement is htsIn. The reference-search will pass its own hts to the extended searcher. A call on qpIn on the searcher will also pass the resulting hts to the extended searcher.\nExtended Searcher Events #  Fire a record-selected to set the item on the reference-search. Fire a escape-filter-panel to close the extended search.\nExamples #  Minimal example #           1 2 3 4 5  \u0026lt;furo-form-layouter four=\u0026#34;\u0026#34;\u0026gt; \u0026lt;furo-ui5-reference-search ƒ-bind-data=\u0026#34;--entityReady(*.owner)\u0026#34;\u0026gt; \u0026lt;/furo-ui5-reference-search\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;   Example with extended searcher #  To add the extended searcher, just set the name of the extended searcher component on the field extended-searcher.\nThe min-term-length in this demo is set to 1 character.\n        1 2 3 4 5  \u0026lt;furo-ui5-reference-search ƒ-bind-data=\u0026#34;--entityReady(*.owner)\u0026#34; extended-searcher=\u0026#34;demo-extended-searcher\u0026#34; min-term-length=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;/furo-ui5-reference-search\u0026gt;    Attributes and Properties #  service #  service string default: ''\nSet the service. This is only needed when you do not use a bind or bind a scalar value. searchResponsePath #  search-response-path string default: 'entities'\nPath to the node in the response value which contains the array with the selection items. By default this goes to entitites valueFieldPath #  value-field-path string default: 'data.id'\nPath to response value item which is used for the id. By default this goes to data.id displayFieldPath #  display-field-path string default: 'data.display_name'\nPath to selection value node which is used for the display. By default this goes to data.display_name extendedValueFieldPath #  extended-value-field-path string default: 'data.id'\nPath to response value item of the exteded search which is used for the id. By default this goes to data.id. Only needed when your extended searcher does not have the id, display_name signature in the response. extendedDisplayFieldPath #  extended-display-field-path string default: 'data.display_name'\nPath to response value item of the exteded search which is used for the display. By default this goes to data.display_name. Only needed when your extended searcher does not have the id, display_name signature in the response. maxItemsToDisplay #  max-items-to-display number default: 8\nThe maximal number of items to display.\nThis value will be set as page-size query-param for the backend.\nIf the response contains hts information with rel next a \u0026ldquo;load more\u0026rdquo; button will be displayed at the end of the list. value #  default: { id: '', display_name: '' }\n\nminTermLength #  min-term-length number default: 2\nThe minimal length of search term to trigger a search. debounceTimeout #  debounce-timeout number default: 250\nwait for this time between keystrokes to trigger a search to the service placeholder #  placeholder string default: ''\nOverrides the hint text from the specs.\nUse with caution, normally the specs defines this value. label #  label string default: ''\nOverrides the label text from the specs.\nUse with caution, normally the specs defines this value. noDataText #  no-data-text string default: 'no result found'\nhint text when result not found by search disableSearchList #  disable-search-list boolean default: false\nA Boolean attribute which, if present, means this field can not be searched.\nThis is very useful when you want enforce the usage of the extended search icon #  icon string default: 'search'\nUse this attribute to set a custom icon for your searcher valueState #  value-state string default: 'None'\nValue State of the input field required #  required reflects \nOverrides the required value from the specs.\nUse with caution, normally the specs defines this value. searchOnEnterOnly #  search-on-enter-only \nEnable this, to avoid the automatic triggering of \u0026ldquo;search\u0026rdquo;.\nThe user have to press enter to trigger the search. Min-term-length is respected. readonly #  readonly \nOverrides the readonly value from the specs.\nUse with caution, normally the specs defines this value. disabled #  disabled \nDisable busy #  busy \nThis is used to activate the loading indicator. extendedSearcher #  extended-searcher \nDefine the extended searcher. Do not forget to import the searcher you want to use. Events #  item-selected #  @-item-selected → ``Object the complete item\nFired when a item was selected from the list. change #  @-change → text\nFired when the input operation has finished by pressing Enter or on focusout. input #  @-input → ``\nFired when the value of the ui5-input changes at each keystroke, and when a suggestion item has been selected. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a FieldNode to the component.\nSupported types: can be a scalar type or any complex type with \u0026lsquo;id\u0026rsquo;,\u0026lsquo;display_name\u0026rsquo; signature.\n fieldNode    focus #  focus() ⟹ void\n* → ƒ-focus\nfocuses the input field\n\ntriggerSearch #  triggerSearch(term `` ) ⟹ void\n``  → ƒ-trigger-search\ntriggerSearch search for a term\n term    readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom.\nFollowing attributes can be set:\n value-state value-state-message icon placeholder label required readonly disabled  Use this after manual or scripted update of the attributes.\n\nhtsIn #  htsIn(hts `` ) ⟹ void\n``  → ƒ-hts-in\nhtsIn sets the HTS for the collection-agent.\nThis is only needed if you want to have fine grained control over the hts\n hts    qpIn #  qpIn(qp `` ) ⟹ void\n``  → ƒ-qp-in\nqpIn Use this to set query params manualy\n qp    setFilter #  setFilter(filter `` ) ⟹ void\n``  → ƒ-set-filter\nSets the filter. Hint: use the FieldNode._base64 property to send complex objects as a filter and decode it on the server side or do btoa(JSON.stringify(FILTER))\n filter    clearResultList #  clearResultList() ⟹ void\n* → ƒ-clear-result-list\nclears the result set\n\nStyling #  The following custom properties available for styling:\n   Custom property Description     --furo-ui5-reference-search-list-background background color of the result list  default: --surface fallback: #ffffff    "});index.add({'id':177,'href':'/docs/components/furo-ui5-reference-search-labeled/','title':"furo-ui5-reference-search-labeled",'section':"Components",'content':"furo-ui5-reference-search-labeled #  @furo/components v1.0.0-rc.7 import '@furo/components/src/furo-ui5-reference-search-labeled.js'; exports FuroUi5ReferenceSearchLabeled js exports \u0026lt;furo-ui5-reference-search-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: labeled input field\n Examples #  Minimal example #           1 2 3 4 5  \u0026lt;furo-form-layouter four=\u0026#34;\u0026#34;\u0026gt; \u0026lt;furo-ui5-reference-search-labeled ƒ-bind-data=\u0026#34;--entityReady(*.owner)\u0026#34;\u0026gt; \u0026lt;/furo-ui5-reference-search-labeled\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;   Example with extended searcher #  To add the extended searcher, just set the name of the extended searcher component on the field extended-searcher.\nThe min-term-length in this demo is set to 1 character.\n        1 2 3 4 5  \u0026lt;furo-ui5-reference-search-labeled ƒ-bind-data=\u0026#34;--entityReady(*.owner)\u0026#34; extended-searcher=\u0026#34;demo-extended-searcher\u0026#34; min-term-length=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;/furo-ui5-reference-search-labeled\u0026gt;    Description #  furo-ui5-reference-search-labeled The furo-ui5-reference-search-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\nAttributes and Properties #  service #  service string default: ''\nthe service name label #  label string default: ''\nthe label for the data-reference-search extendedSearcher #  extended-searcher string default: ''\nDefine the extended searcher. Do not forget to import the searcher you want to use. disableSearchList #  disable-search-list boolean default: false\nA Boolean attribute which, if present, means this field can not be searched.\nThis is very useful when you want enforce the usage of the extended search icon #  icon string default: 'search'\nUse this attribute to set a custom icon for your searcher searchResponsePath #  search-response-path string default: 'entities'\nPath to the node in the response value which contains the array with the selection items. By default this goes to entitites valueFieldPath #  value-field-path string default: 'data.id'\nPath to response value item which is used for the id. By default this goes to data.id displayFieldPath #  display-field-path string default: 'data.display_name'\nPath to selection value node which is used for the display. By default this goes to data.display_name extendedValueFieldPath #  extended-value-field-path string default: 'data.id'\nPath to response value item of the exteded search which is used for the id. By default this goes to data.id. Only needed when your extended searcher does not have the id, display_name signature in the response. extendedDisplayFieldPath #  extended-display-field-path string default: 'data.display_name'\nPath to response value item of the exteded search which is used for the display. By default this goes to data.display_name. Only needed when your extended searcher does not have the id, display_name signature in the response. placeholder #  placeholder \nOverrides the hint text from the specs. Use with caution, normally the specs defines this value. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user. readonly #  readonly \n\nrequired #  required \nA Boolean attribute which, if present, means this field is required and marked with *. Methods #  focus #  focus(options Object ) ⟹ void\nObject  → ƒ-focus\nFocuses the underlying ui5 input element\n options https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus   bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    setFilter #  setFilter(filter `` ) ⟹ void\n``  → ƒ-set-filter\nsets the filter to the inner furo-ui5-reference-search\n filter    "});index.add({'id':178,'href':'/docs/components/furo-ui5-segmented-button/','title':"furo-ui5-segmented-button",'section':"Components",'content':"furo-ui5-segmented-button #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-segmented-button.js'; exports FuroUi5SegmentedButton js extends src/furo-ui5-segmented-button.js mixes FieldNodeAdapter\n Summary: segmented button\n Description #  The furo-ui5-segmented-button component represents a drop-down list. The items inside define the available options by using the furo-ui5-segmented-button component.\n1 2 3  \u0026lt;furo-ui5-segmented-button ƒ-bind-data=\u0026#34;--daoPerson(*.field_with_meta_options)\u0026#34;\u0026gt; \u0026lt;/furo-ui5-segmented-button\u0026gt;   Example with options from specs #  A simple way to use the segmented button is, uising it with specified options for a string type.\nDefining a type with the options may look like a big overhead, but it let you switch the UI implementation by just changing the tag name.\nThe labels in the demo are not translated for better readability.\n          Markup #  1 2 3 4 5 6 7 8  \u0026lt;furo-ui5-segmented-button ƒ-bind-data=\u0026#34;--daoPerson(*.sex)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-segmented-button\u0026gt; \u0026lt;furo-ui5-text-input value-state=\u0026#34;Success\u0026#34; ƒ-bind-data=\u0026#34;--daoPerson(*.sex)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-text-input\u0026gt; \u0026lt;furo-data-object type=\u0026#34;person.Person\u0026#34; @-object-ready=\u0026#34;--daoPerson\u0026#34;\u0026gt;\u0026lt;/furo-data-object\u0026gt;   Type definition #   look at fields.sex.meta.options.list\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  name:Persontype:Persondescription:Person message typelifecycle:null__proto:package:persontargetfile:person.protoimports:- google/protobuf/field_mask.protooptions:go_package:github.com/eclipse/eclipsefuro-web/furo-specs/dist/pb/person;personpbjava_multiple_files:\u0026#34;true\u0026#34;java_outer_classname:PersonProtojava_package:com.example.tutorial.personfields:sex:type:stringdescription:sex__proto:number:8__ui:nullmeta:default:femaleplaceholder:\u0026#34;\u0026#34;hint:\u0026#34;\u0026#34;label:sexoptions:flags:[]list:# set the default options- \u0026#39;@type\u0026#39;:type.googleapis.com/furo.Optionitemdisplay_name:person.type.sex.unknown.labelid:unknownselected:false- \u0026#39;@type\u0026#39;:type.googleapis.com/furo.Optionitemdisplay_name:person.type.sex.female.labelid:femaleselected:true- \u0026#39;@type\u0026#39;:type.googleapis.com/furo.Optionitemdisplay_name:person.type.sex.male.labelid:maleselected:falsereadonly:falserepeated:falsetypespecific:nullconstraints:{}  Example with bindOptions #    get options           Markup #  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  \u0026lt;furo-form-layouter one\u0026gt; \u0026lt;furo-ui5-segmented-button value-field-path=\u0026#34;data.id\u0026#34; id-field-path=\u0026#34;data.id\u0026#34; display-field-path=\u0026#34;data.display_name\u0026#34; ƒ-bind-options=\u0026#34;--collection(*.entities)\u0026#34; ƒ-bind-data=\u0026#34;--entity(*.owner.id)\u0026#34;\u0026gt; \u0026lt;/furo-ui5-segmented-button\u0026gt; \u0026lt;furo-ui5-segmented-button value-field-path=\u0026#34;data.id\u0026#34; id-field-path=\u0026#34;data.id\u0026#34; display-field-path=\u0026#34;data.first_name\u0026#34; ƒ-bind-options=\u0026#34;--collection(*.entities)\u0026#34; ƒ-bind-data=\u0026#34;--entity(*.owner.id)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-segmented-button\u0026gt; \u0026lt;furo-ui5-segmented-button value-field-path=\u0026#34;data.id\u0026#34; id-field-path=\u0026#34;data.id\u0026#34; display-field-path=\u0026#34;data.phone_nr\u0026#34; ƒ-bind-options=\u0026#34;--collection(*.entities)\u0026#34; ƒ-bind-data=\u0026#34;--entity(*.owner.id)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-segmented-button\u0026gt; \u0026lt;furo-ui5-number-input-labeled label=\u0026#34;Selected option\u0026#34; ƒ-bind-data=\u0026#34;--entity(*.owner.id)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-number-input-labeled\u0026gt; \u0026lt;/furo-form-layouter\u0026gt; \u0026lt;!\u0026ndash; this data object contains the list \u0026ndash;\u0026gt; \u0026lt;furo-data-object type=\u0026quot;person.PersonCollection\u0026quot; @-object-ready=\u0026quot;\u0026ndash;collection\u0026quot; ƒ-inject-raw=\u0026quot;\u0026ndash;response\u0026quot;\u0026gt;\u0026lt;/furo-data-object\u0026gt; \u0026lt;!\u0026ndash; this data object contains the field, you want to update \u0026ndash;\u0026gt; \u0026lt;furo-data-object type=\u0026quot;task.Task\u0026quot; @-object-ready=\u0026quot;\u0026ndash;entity\u0026quot;\u0026gt;\u0026lt;/furo-data-object\u0026gt; \n  Attributes and Properties #  activeFieldBinding #  default: false\nFlag to indicate if a field is attached Default: false idFieldPath #  default: 'id'\nDefines the field path that is used from the bound RepeaterNode (bindOptions()) to identify the option items. Point-separated path to the field E.g. data.partner.ulid default: id displayFieldPath #  default: 'display_name'\nDefines the field path that is used from the bound RepeaterNode (bindOptions()) to display the option items. Point-separated path to the field E.g. data.partner.display_name default: display_name valueFieldPath #  default: 'id'\nDefines the field path that is used to update the bound component if the user has selected an option. Point-separated path to the field Must be set if a data binding is specified. default: id Events #  options-updated #  @-options-updated → optionNodeList\nFired after the option list was rebuilt value-changed #  @-value-changed → {*} the value from the value-field. By default the value field is \u0026amp;#34;id\u0026amp;#34;\nFired when value has changed from the component inside. bubbles item-selected #  @-item-selected → selectedOption\nFired when the toggle button was clicked. Payload: - if no option binding is active: ui5-segmented-button-item - if a RepeaterNode is bound: FieldNode Methods #  bindData #  bindData(fieldNode `` ) ⟹ boolean\n``  → ƒ-bind-data\nBinds a FieldNode to the component.\nSupported types:\n fieldNode    bindOptions #  bindOptions(repeaterNode RepeaterNode ) ⟹ void\nRepeaterNode  → ƒ-bind-options\nBind a RepeaterNode that will be used to build up the option list.\nUse idFieldPath and displayFieldPath if your structrure does not match the following signature:\n1 2 3 4  [ { \u0026#34;id\u0026#34;: 1, \u0026#34;display_name\u0026#34;: \u0026#34;option A\u0026#34;}, { \u0026#34;id\u0026#34;: 2, \u0026#34;display_name\u0026#34;: \u0026#34;option B\u0026#34;} ]    repeaterNode The list with the options   readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. those attributes can be set. readonly,disabled, value-field-path, display-field-path Use this after manual or scripted update of the attributes.\n\nselectOptionById #  selectOptionById(val Id ) ⟹ void\nId  → ƒ-select-option-by-id\nSelects an option by id\n val The id   "});index.add({'id':179,'href':'/docs/components/furo-ui5-select/','title':"furo-ui5-select",'section':"Components",'content':"furo-ui5-select #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-select.js'; exports FuroUi5Select js extends src/furo-ui5-select.js mixes FieldNodeAdapter\n Summary: data select field\n Description #  The furo-ui5-select component is used to create a drop-down list. The items inside the furo-ui5-select define the available options by using the ui5-option component. Use the function bindOptions to bind a RepeaterNode as a option list.\n1 2 3 4  \u0026lt;furo-ui5-select ƒ-bind-data=\u0026#34;--entity(*.data.description)\u0026#34; ƒ-bind-options=\u0026#34;--collection(*.entities)\u0026#34;\u0026gt; \u0026lt;/furo-ui5-select\u0026gt;   Example with options from specs #  A simple way to use the segmented button is, uising it with specified options for a string type.\nDefining a type with the options may look like a big overhead, but it let you switch the UI implementation by just changing the tag name.\nThe labels in the demo are not translated for better readability.\n   Information message. This is a Link. Extra long text used as an information message. Extra long text used as an information message - 2. Extra long text used as an information message - 3.        Markup #  1 2 3 4 5 6 7 8 9 10 11  \u0026lt;furo-ui5-select label=\u0026#34;Use with select\u0026#34; value-state=\u0026#34;Success\u0026#34; ƒ-bind-data=\u0026#34;--daoPerson(*.sex)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-select\u0026gt; \u0026lt;furo-ui5-select label=\u0026#34;Use with select\u0026#34; value-state=\u0026#34;Success\u0026#34; ƒ-bind-data=\u0026#34;--daoPerson(*.sex)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-select\u0026gt; \u0026lt;furo-ui5-text-input label=\u0026#34;use with text-input\u0026#34; value-state=\u0026#34;Success\u0026#34; ƒ-bind-data=\u0026#34;--daoPerson(*.sex)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-text-input\u0026gt;   Type definition #   look at fields.sex.meta.options.list\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  name:Persontype:Persondescription:Person message typelifecycle:null__proto:package:persontargetfile:person.protoimports:- google/protobuf/field_mask.protooptions:go_package:github.com/eclipse/eclipsefuro-web/furo-specs/dist/pb/person;personpbjava_multiple_files:\u0026#34;true\u0026#34;java_outer_classname:PersonProtojava_package:com.example.tutorial.personfields:sex:type:stringdescription:sex__proto:number:8__ui:nullmeta:default:femaleplaceholder:\u0026#34;\u0026#34;hint:\u0026#34;\u0026#34;label:sexoptions:flags:[]list:# set the default options- \u0026#39;@type\u0026#39;:type.googleapis.com/furo.Optionitemdisplay_name:person.type.sex.unknown.labelid:unknownselected:false- \u0026#39;@type\u0026#39;:type.googleapis.com/furo.Optionitemdisplay_name:person.type.sex.female.labelid:femaleselected:true- \u0026#39;@type\u0026#39;:type.googleapis.com/furo.Optionitemdisplay_name:person.type.sex.male.labelid:maleselected:falsereadonly:falserepeated:falsetypespecific:nullconstraints:{}  Example with bindOptions #  Set the id of the selected optioin to a value which is not in the list and press load options again.\n  load options           Markup #  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  \u0026lt;furo-ui5-select label=\u0026#34;by display_name\u0026#34; value-field-path=\u0026#34;data.id\u0026#34; id-field-path=\u0026#34;data.id\u0026#34; display-field-path=\u0026#34;data.display_name\u0026#34; ƒ-bind-options=\u0026#34;--collection(*.entities)\u0026#34; ƒ-bind-data=\u0026#34;--entity(*.owner.id)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-select\u0026gt; \u0026lt;furo-ui5-select label=\u0026#34;by first_name\u0026#34; value-field-path=\u0026#34;data.id\u0026#34; id-field-path=\u0026#34;data.id\u0026#34; display-field-path=\u0026#34;data.first_name\u0026#34; ƒ-bind-options=\u0026#34;--collection(*.entities)\u0026#34; ƒ-bind-data=\u0026#34;--entity(*.owner.id)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-select\u0026gt; \u0026lt;furo-ui5-select label=\u0026#34;by phone_nr\u0026#34; value-field-path=\u0026#34;data.id\u0026#34; id-field-path=\u0026#34;data.id\u0026#34; display-field-path=\u0026#34;data.phone_nr\u0026#34; ƒ-bind-options=\u0026#34;--collection(*.entities)\u0026#34; ƒ-bind-data=\u0026#34;--entity(*.owner.id)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-select\u0026gt; \u0026lt;furo-ui5-number-input label=\u0026#34;Selected option\u0026#34; ƒ-bind-data=\u0026#34;--entity(*.owner.id)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-number-input\u0026gt; \u0026lt;/furo-form-layouter\u0026gt; \u0026lt;!-- this data object contains the list --\u0026gt; \u0026lt;furo-data-object type=\u0026#34;person.PersonCollection\u0026#34; @-object-ready=\u0026#34;--collection\u0026#34; ƒ-inject-raw=\u0026#34;--response\u0026#34;\u0026gt;\u0026lt;/furo-data-object\u0026gt; \u0026lt;!-- this data object contains the field, you want to update --\u0026gt; \u0026lt;furo-data-object type=\u0026#34;task.Task\u0026#34; @-object-ready=\u0026#34;--entity\u0026#34;\u0026gt;\u0026lt;/furo-data-object\u0026gt;    Attributes and Properties #  activeFieldBinding #  default: false\nFlag to indicate if a field is attached Default: false idFieldPath #  default: 'id'\nDefines the field path that is used from the bound RepeaterNode (bindOptions) to identify the option items. Point-separated path to the field E.g. data.partner.ulid default: id This attribute is related to the option list displayFieldPath #  default: 'display_name'\nDefines the field path that is used from the bound RepeaterNode (bindOptions) to display the option items. Point-separated path to the field E.g. data.partner.display_name default: display_name This attribute is related to the option list valueFieldPath #  default: 'id'\nDefines the field path that is used to update the bound component if the user has selected an option. Point-separated path to the field Must be set if a data binding is specified. default: id This attribute is related to the option list. optionList[selected].valueFieldPath ==\u0026gt; bound FieldNode boundFieldIdPath #  default: 'id'\nDefines the id field path of the bound FieldNode. Point-separated path to the field Must be set if a data binding is specified with a complex type. default: id This attribute is related to the bound FieldNode. Events #  options-updated #  @-options-updated → optionNodeList\nFired after the option list was rebuilt. item-selected #  @-item-selected → selectedOption\nFired when the item of the dropdown list is selected. value-changed #  @-value-changed → selectedOption\nFires the field value when it changes. Methods #  readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. those attributes can be set. value-state, required,readonly,disabled, value-field-path, display-field-path Use this after manual or scripted update of the attributes.\n\nbindOptions #  bindOptions(repeaterNode `` ) ⟹ void\n``  → ƒ-bind-options\nHere a RepeaterNode can be connected to the component as an option list.\n repeaterNode    bindData #  bindData(fieldNode FieldNode ) ⟹ boolean\nFieldNode  → ƒ-bind-data\nOverridden bindData of FieldNodeAdapter\n fieldNode    selectOptionById #  selectOptionById(id * ) ⟹ void\n*  → ƒ-select-option-by-id\nSelects an option by id. The id field must be comparable.\n id must match the data   "});index.add({'id':180,'href':'/docs/components/furo-ui5-select-labeled/','title':"furo-ui5-select-labeled",'section':"Components",'content':"furo-ui5-select-labeled #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-select-labeled.js'; exports FuroUi5SelectLabeled js exports \u0026lt;furo-ui5-select-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: labeled select\n Description #  furo-ui5-select-labeled The furo-ui5-select-labeled is a composition to easily use a complete data select with label according to the design specification of SAP Fiori Design System.\nExample with options from specs #  A simple way to use the segmented button is, uising it with specified options for a string type.\nDefining a type with the options may look like a big overhead, but it let you switch the UI implementation by just changing the tag name.\nThe labels in the demo are not translated for better readability.\n          Markup #  1 2 3 4 5 6 7 8 9 10 11  \u0026lt;furo-ui5-select-labeled label=\u0026#34;Use with select\u0026#34; value-state=\u0026#34;Success\u0026#34; ƒ-bind-data=\u0026#34;--daoPerson(*.sex)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-select-labeled\u0026gt; \u0026lt;furo-ui5-select-labeled label=\u0026#34;Use with select\u0026#34; value-state=\u0026#34;Success\u0026#34; ƒ-bind-data=\u0026#34;--daoPerson(*.sex)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-select-labeled\u0026gt; \u0026lt;furo-ui5-text-input-labeled label=\u0026#34;use with text-input\u0026#34; value-state=\u0026#34;Success\u0026#34; ƒ-bind-data=\u0026#34;--daoPerson(*.sex)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-text-input-labeled\u0026gt;   Type definition #   look at fields.sex.meta.options.list\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  name:Persontype:Persondescription:Person message typelifecycle:null__proto:package:persontargetfile:person.protoimports:- google/protobuf/field_mask.protooptions:go_package:github.com/eclipse/eclipsefuro-web/furo-specs/dist/pb/person;personpbjava_multiple_files:\u0026#34;true\u0026#34;java_outer_classname:PersonProtojava_package:com.example.tutorial.personfields:sex:type:stringdescription:sex__proto:number:8__ui:nullmeta:default:femaleplaceholder:\u0026#34;\u0026#34;hint:\u0026#34;\u0026#34;label:sexoptions:flags:[]list:# set the default options- \u0026#39;@type\u0026#39;:type.googleapis.com/furo.Optionitemdisplay_name:person.type.sex.unknown.labelid:unknownselected:false- \u0026#39;@type\u0026#39;:type.googleapis.com/furo.Optionitemdisplay_name:person.type.sex.female.labelid:femaleselected:true- \u0026#39;@type\u0026#39;:type.googleapis.com/furo.Optionitemdisplay_name:person.type.sex.male.labelid:maleselected:falsereadonly:falserepeated:falsetypespecific:nullconstraints:{}  Example with bindOptions #  Set the id of the selected optioin to a value which is not in the list and press load options again.\n  load options           Markup #  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  \u0026lt;furo-ui5-select-labeled label=\u0026#34;by display_name\u0026#34; value-field-path=\u0026#34;data.id\u0026#34; id-field-path=\u0026#34;data.id\u0026#34; display-field-path=\u0026#34;data.display_name\u0026#34; ƒ-bind-options=\u0026#34;--collection(*.entities)\u0026#34; ƒ-bind-data=\u0026#34;--entity(*.owner.id)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-select-labeled\u0026gt; \u0026lt;furo-ui5-select-labeled label=\u0026#34;by first_name\u0026#34; value-field-path=\u0026#34;data.id\u0026#34; id-field-path=\u0026#34;data.id\u0026#34; display-field-path=\u0026#34;data.first_name\u0026#34; ƒ-bind-options=\u0026#34;--collection(*.entities)\u0026#34; ƒ-bind-data=\u0026#34;--entity(*.owner.id)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-select-labeled\u0026gt; \u0026lt;furo-ui5-select-labeled label=\u0026#34;by phone_nr\u0026#34; value-field-path=\u0026#34;data.id\u0026#34; id-field-path=\u0026#34;data.id\u0026#34; display-field-path=\u0026#34;data.phone_nr\u0026#34; ƒ-bind-options=\u0026#34;--collection(*.entities)\u0026#34; ƒ-bind-data=\u0026#34;--entity(*.owner.id)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-select-labeled\u0026gt; \u0026lt;furo-ui5-number-input-labeled label=\u0026#34;Selected option\u0026#34; ƒ-bind-data=\u0026#34;--entity(*.owner.id)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-number-input-labeled\u0026gt; \u0026lt;/furo-form-layouter\u0026gt; \u0026lt;!-- this data object contains the list --\u0026gt; \u0026lt;furo-data-object type=\u0026#34;person.PersonCollection\u0026#34; @-object-ready=\u0026#34;--collection\u0026#34; ƒ-inject-raw=\u0026#34;--response\u0026#34;\u0026gt;\u0026lt;/furo-data-object\u0026gt; \u0026lt;!-- this data object contains the field, you want to update --\u0026gt; \u0026lt;furo-data-object type=\u0026#34;task.Task\u0026#34; @-object-ready=\u0026#34;--entity\u0026#34;\u0026gt;\u0026lt;/furo-data-object\u0026gt;    Attributes and Properties #  label #  label string default: ''\nthe label for the data-number-input idFieldPath #  id-field-path string default: 'id'\nDefines the field path that is used from the injected RepeaterNode to identify the option items. Point-separated path to the field E.g. data.partner.ulid valueFieldPath #  value-field-path string default: 'id'\nDefines the field path that is used to update the bound component if the user has selected an option. Point-separated path to the field Must be set if a data binding is specified. displayFieldPath #  display-field-path string default: 'display_name'\nDefines the field path that is used from the injected RepeaterNode to display the option items. Point-separated path to the field E.g. data.partner.display_name required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user and appears in disabled state. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → String\nFires the field value when it changes. Methods #  focus #  focus(options Object ) ⟹ void\nObject  → ƒ-focus\nFocuses the underlying ui5 input element\n options https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus   bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    bindOptions #  bindOptions(repeaterNode `` ) ⟹ void\n``  → ƒ-bind-options\nBinds a repeaterNode to the furo-ui5-select component\n repeaterNode    Slots #  valueStateMessage #  Type: HTMLElement\ndefines the value state message that will be displayed as pop up under the input element. "});index.add({'id':181,'href':'/docs/components/furo-ui5-sign-pad/','title':"furo-ui5-sign-pad",'section':"Components",'content':"furo-ui5-sign-pad #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-sign-pad.js'; exports FuroUi5SignPad js exports \u0026lt;furo-ui5-sign-pad\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: draw or sign\n Description #  furo-sign-pad Simple pad to sign or draw something\nExample #    clear      1 2 3 4 5 6  \u0026lt;button @-click=\u0026#34;--clearClicked\u0026#34;\u0026gt;clear\u0026lt;/button\u0026gt; \u0026lt;furo-form-layouter four \u0026gt; \u0026lt;furo-ui5-sign-pad ƒ-clear=\u0026#34;--clearClicked\u0026#34; @-sign-updated=\u0026#34;--signed\u0026#34;\u0026gt;\u0026lt;/furo-ui5-sign-pad\u0026gt; \u0026lt;furo-ui5-sign-pad ƒ-clear=\u0026#34;--clearClicked\u0026#34; ƒ-put-image=\u0026#34;--signed\u0026#34;\u0026gt;\u0026lt;/furo-ui5-sign-pad\u0026gt; \u0026lt;/furo-form-layouter\u0026gt; \u0026lt;img ƒ-.src=\u0026#34;--signed\u0026#34; alt=\u0026#34;\u0026#34; width=\u0026#34;100px\u0026#34;\u0026gt;    Attributes and Properties #  Events #  sign-updated #  @-sign-updated → Base64\nFired when sign gets new painting, with base encoded image. Methods #  resize #  resize() ⟹ void\n* → ƒ-resize\nTrigger this method after a resize.\nThis is also needed\n\nclear #  clear() ⟹ void\n* → ƒ-clear\nClears the image. This also updates the bound field.\n\nputImage #  putImage(encodedImage imageURL ) ⟹ void\nimageURL  → ƒ-put-image\nAdds the encoded image to the canvas.\nMaybe you want to clear first.\n encodedImage    encodeImage #  encodeImage() ⟹ void\n* → ƒ-encode-image\nEncodes the image using the type and encodingOptions (quality) defined. The encoded image is available in the image property.\n\nbindData #  bindData(entityField `` ) ⟹ void\n``  → ƒ-bind-data\nbind a entity field\n entityField    "});index.add({'id':182,'href':'/docs/components/furo-ui5-table/','title':"furo-ui5-table",'section':"Components",'content':"furo-ui5-table #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-table.js'; exports FuroUi5Table js exports \u0026lt;furo-ui5-table\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: Display repeated fields in a table\n Description #  furo-ui5-table display entities in a ui5-table\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;furo-ui5-table ƒ-bind-data=\u0026#34;--data(*.entities)\u0026#34; \u0026gt; \u0026lt;!-- The column label is evaluated from the specs --\u0026gt; \u0026lt;ui5-table-column slot=\u0026#34;columns\u0026#34; field=\u0026#34;*.data.fieldname\u0026#34; \u0026gt;\u0026lt;/ui5-table-column\u0026gt; \u0026lt;ui5-table-column slot=\u0026#34;columns\u0026#34; field=\u0026#34;*.data.display_name\u0026#34; \u0026gt;\u0026lt;span\u0026gt;Custom Title\u0026lt;/span\u0026gt;\u0026lt;/ui5-table-column\u0026gt; \u0026lt;/furo-ui5-table\u0026gt;   Attributes which are taken from ui5-table-column #  field Define the field you want to bind. * is the root of the repeated field.\ncontext Set a context for the type renderer. The default value is cell.\nrenderer Set a specific renderer component for the column. If not set, the renderer is evaluated from the type of the bound field.\nExample #  The default typerenderer context for the cells is cell. You can set the context on the ui5-table-column.\n   load data\n   Custom Title      Markup #  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  \u0026lt;furo-ui5-table ƒ-bind-data=\u0026#34;--collection(*.entities)\u0026#34;\u0026gt; \u0026lt;!-- The column label is evaluated from the specs --\u0026gt; \u0026lt;ui5-table-column slot=\u0026#34;columns\u0026#34; field=\u0026#34;*.data.phone_nr\u0026#34; \u0026gt;\u0026lt;/ui5-table-column\u0026gt; \u0026lt;ui5-table-column slot=\u0026#34;columns\u0026#34; field=\u0026#34;*.data.first_name\u0026#34; \u0026gt;\u0026lt;/ui5-table-column\u0026gt; \u0026lt;!-- set a context for the typerenderer --\u0026gt; \u0026lt;ui5-table-column slot=\u0026#34;columns\u0026#34; context=\u0026#34;celledit\u0026#34; field=\u0026#34;*.data.first_name\u0026#34; \u0026gt;\u0026lt;/ui5-table-column\u0026gt; \u0026lt;!-- Setting a custom label --\u0026gt; \u0026lt;ui5-table-column slot=\u0026#34;columns\u0026#34; field=\u0026#34;*.data.name\u0026#34; \u0026gt;\u0026lt;span\u0026gt;Custom Title\u0026lt;/span\u0026gt;\u0026lt;/ui5-table-column\u0026gt; \u0026lt;/furo-ui5-table\u0026gt; \u0026lt;furo-data-object type=\u0026quot;person.PersonCollection\u0026quot; @-object-ready=\u0026quot;\u0026ndash;collection\u0026quot; ƒ-inject-raw=\u0026quot;\u0026ndash;response\u0026quot;\u0026gt;\u0026lt;/furo-data-object\u0026gt;\n\n  Attributes and Properties #  mode #  mode string default: 'None'\nDefines the mode of the component.\nAvailable options are:\n MultiSelect SingleSelect None   noDataText #  no-data-text \nDefines the text that will be displayed when there is no data. string stickyColumnHeader #  sticky-column-header \nDetermines whether the column headers remain fixed at the top of the page during vertical scrolling as long as the Web Component is in the viewport. busy #  busy \nBusy state Events #  data-loaded #  @-data-loaded → HTMLElement\nFired when the data is loaded into data table. The event detail contains the data table self. arrow-down-on-last-row #  @-arrow-down-on-last-row → entity\nFired when the ArrowDown is pressed on the last row. The event detail is the original entity of the row tablerow-selected #  @-tablerow-selected → entity\nFired when the row is selected. The event detail is the original entity of the row. arrow-up-on-first-row #  @-arrow-up-on-first-row → entity\nFired when the ArrowUp is pressed on the first row. The event detail is the original entity of the row rows-selected #  @-rows-selected → Array with the selected items\nFired when the row selection in MultiSelect mode was changed Methods #  bindData #  bindData(data `` ) ⟹ void\n``  → ƒ-bind-data\nBind a repeated data node.\n data    focus #  focus() ⟹ void\n* → ƒ-focus\nFocuses the header of the table\n\nfocusLast #  focusLast() ⟹ void\n* → ƒ-focus-last\nFocuses the last row.\n\nfocusFirst #  focusFirst() ⟹ void\n* → ƒ-focus-first\nFocuses the first row.\n\nsetBusy #  setBusy() ⟹ void\n* → ƒ-set-busy\nsetBusy Sets the busy state\n\nunsetBusy #  unsetBusy() ⟹ void\n* → ƒ-unset-busy\nunsetBusy Unsets the busy state\n\n"});index.add({'id':183,'href':'/docs/components/furo-ui5-table-row/','title':"furo-ui5-table-row",'section':"Components",'content':"furo-ui5-table-row #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/subcomponents/furo-ui5-table-row.js'; exports FuroUi5TableRow js exports \u0026lt;furo-ui5-table-row\u0026gt; custom-element-definition extends src/subcomponents/furo-ui5-table-row.js\n Summary:\n Description #  INTERNAL COMPONENT #  This is a helper component to send tablerow-selected event by clicking the row or pressing the enter on the row.\nAttributes and Properties #  _data #  default: {}\n\nEvents #  ui5-selection-requested #  @-ui5-selection-requested → Event\n\ntablerow-selected #  @-tablerow-selected → CustomEvent\n\narrow-down-on-last-row #  @-arrow-down-on-last-row → CustomEvent\n\narrow-up-on-first-row #  @-arrow-up-on-first-row → CustomEvent\n\nMethods #  focus #  focus() ⟹ void\n* → ƒ-focus\nfocus this row\n\nsetData #  setData(d `` ) ⟹ void\n``  → ƒ-set-data\n d    _select #  _select() ⟹ void\n* → ƒ\u0026ndash;select\n\n_arrowDownPressed #  _arrowDownPressed(event `` ) ⟹ void\n``  → ƒ\u0026ndash;arrow-down-pressed\n event    _arrowUpPressed #  _arrowUpPressed() ⟹ void\n* → ƒ\u0026ndash;arrow-up-pressed\n\n"});index.add({'id':184,'href':'/docs/components/furo-ui5-text-input/','title':"furo-ui5-text-input",'section':"Components",'content':"furo-ui5-text-input #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-text-input.js'; exports FuroUi5TextInput js extends src/furo-ui5-text-input.js mixes FieldNodeAdapter\n Summary: data text input field\n Description #  The \u0026lsquo;furo-ui5-text-input\u0026rsquo; component allows the user to enter and edit texts with data binding.\nIt supports all features from the SAP ui5 Input element.\nYou can bind any string type, like furo.fat.String type or the google.protobuf.StringValue type.\n1 2 3  \u0026lt;furo-ui5-text-input ƒ-bind-data=\u0026#34;--daoCountry(*.data.name)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-text-input\u0026gt;   Specificity #   Attributes which are set in the html source will have the highest specificity and will never get overwritten by metas or fat. Attributes set in meta will have the lowest specificity and will be overwritten by attributes from fat.  ** meta \u0026lt; fat \u0026lt; html **\nsupported FAT attributes #   \u0026ldquo;readonly\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to readonly \u0026ldquo;required\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to required \u0026ldquo;disabled\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to disabled \u0026ldquo;icon\u0026rdquo;:\u0026ldquo;home\u0026rdquo; set the icon \u0026ldquo;placeholder\u0026rdquo;:\u0026ldquo;string\u0026rdquo; set the placeholder for the element \u0026ldquo;max\u0026rdquo;:\u0026ldquo;number\u0026rdquo; set the maximum number of characters available in the input field.  supported meta and constraints #   readonly: true , set the element to readonly placeholder:\u0026ldquo;some string\u0026rdquo; set the placeholder for the element max:\u0026ldquo;number\u0026rdquo; set the maximum number of characters available in the input field.  The constraint required will mark the element as required\nMethods #  bindData(fieldNode) Bind an entity field. You can use the entity even when no data was received.\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with \u0026ndash;entity(*.fields.fieldname)\nExample #             1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  \u0026lt;furo-form-layouter four\u0026gt; \u0026lt;furo-ui5-text-input ƒ-bind-data=\u0026#34;--doExp(*.furo_data_text_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-text-input\u0026gt; \u0026lt;furo-ui5-text-input readonly ƒ-bind-data=\u0026#34;--doExp(*.furo_data_text_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-text-input\u0026gt; \u0026lt;furo-ui5-text-input disabled ƒ-bind-data=\u0026#34;--doExp(*.furo_data_text_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-text-input\u0026gt; \u0026lt;furo-ui5-text-input value-state=\u0026#34;Success\u0026#34; placeholder=\u0026#34;Placeholder\u0026#34; ƒ-bind-data=\u0026#34;--doExp(*.furo_data_text_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-text-input\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;    Attributes and Properties #  nativeInputAttributes #   \ntype #  default: 'Text'\n\ndisplayFieldPath #  default: 'display_name'\nDefines the field path that is used from the bound RepeaterNode (bindOptions) to display the text of the option items. Point-separated path to the field E.g. data.partner.display_name default: display_name This attribute is related to the option list descFieldPath #  default: 'id'\nDefines the field path that is used from the bound RepeaterNode (bindOptions) to display the additional description of the option items. Point-separated path to the field E.g. data.partner.id default: id This attribute is related to the option list wait #  default: 250\nDebounce time in milliseconds Default value: 250 Events #  search-requested #  @-search-requested → value\nFired when typing in input (debounced, default 250ms) change #  @-change → String\nFired when the input operation has finished by pressing Enter or on focusout. input #  @-input → String\nFired when the value of the ui5-input changes at each keystroke, and when a suggestion item has been selected. value-changed #  @-value-changed → String\nFires the field value when it changes. Methods #  readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. those attributes can be set. value-state, value-state-message, icon, placeholder, required,readonly,disabled\nUse this after manual or scripted update of the attributes.\n\nbindOptions #  bindOptions(repeaterNode `` ) ⟹ void\n``  → ƒ-bind-options\nHere a RepeaterNode can be connected to the component as an option list. The items are displayed as suggestion items.\n repeaterNode    "});index.add({'id':185,'href':'/docs/components/furo-ui5-text-input-labeled/','title':"furo-ui5-text-input-labeled",'section':"Components",'content':"furo-ui5-text-input-labeled #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-text-input-labeled.js'; exports FuroUi5TextInputLabeled js exports \u0026lt;furo-ui5-text-input-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: labeled input field\n Description #  furo-ui5-text-input-labeled The furo-ui5-text-input-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\nExample #              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  \u0026lt;furo-form-layouter four\u0026gt; \u0026lt;furo-ui5-text-input-labeled ƒ-bind-data=\u0026#34;--doExp(*.furo_data_text_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-text-input-labeled\u0026gt; \u0026lt;furo-ui5-text-input-labeled readonly ƒ-bind-data=\u0026#34;--doExp(*.furo_data_text_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-text-input-labeled\u0026gt; \u0026lt;furo-ui5-text-input-labeled disabled ƒ-bind-data=\u0026#34;--doExp(*.furo_data_text_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-text-input-labeled\u0026gt; \u0026lt;furo-ui5-text-input-labeled required ƒ-bind-data=\u0026#34;--doExp(*.furo_data_text_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-text-input-labeled\u0026gt; \u0026lt;furo-ui5-text-input-labeled value-state=\u0026#34;Success\u0026#34; placeholder=\u0026#34;Placeholder\u0026#34; ƒ-bind-data=\u0026#34;--doExp(*.furo_data_text_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-text-input-labeled\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;    Attributes and Properties #  label #  label string default: ''\nthe label for the data-text-input descFieldPath #  desc-field-path string default: 'id'\nDefines the field path that is used from the bound RepeaterNode (bindOptions) to display the additional description of the option items. Point-separated path to the field E.g. data.partner.id default: id This attribute is related to the option list displayFieldPath #  display-field-path string default: 'display_name'\nDefines the field path that is used from the injected RepeaterNode to display the option items. Point-separated path to the field E.g. data.partner.display_name required #  required Boolean \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled Boolean \nA Boolean attribute which, if present, means this field cannot be edited by the user and appears in disabled state. readonly #  readonly Boolean \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → String\nFires the field value when it changes. Methods #  focus #  focus(options Object ) ⟹ void\nObject  → ƒ-focus\nFocuses the underlying ui5 input element\n options https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus   bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    bindOptions #  bindOptions(repeaterNode `` ) ⟹ void\n``  → ƒ-bind-options\nBinds a repeaterNode to the furo-ui5-combobox component\n repeaterNode    Slots #  icon #  Type: HTMLElement\ndefines the icon to be displayed in the input element. icon #  Type: HTMLElement\nDefines the icon to be displayed in the input. "});index.add({'id':186,'href':'/docs/components/furo-ui5-textarea-input/','title':"furo-ui5-textarea-input",'section':"Components",'content':"furo-ui5-textarea-input #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-textarea-input.js'; exports FuroUi5TextareaInput js extends src/furo-ui5-textarea-input.js mixes FieldNodeAdapter\n Summary: data textarea input field\n Description #  The \u0026lsquo;furo-ui5-textarea-input\u0026rsquo; component allows the user to enter and edit texts with data binding.\nIt supports all features from the SAP ui5 Input element.\nYou can bind any string type, like furo.fat.String type or the google.protobuf.StringValue type.\n1 2 3  \u0026lt;furo-ui5-textarea-input ƒ-bind-data=\u0026#34;--daoCountry(*.data.name)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-textarea-input\u0026gt;   Specificity #   Attributes which are set in the html source will have the highest specificity and will never get overwritten by metas or fat. Attributes set in meta will have the lowest specificity and will be overwritten by attributes from fat.  ** meta \u0026lt; fat \u0026lt; html **\nsupported FAT attributes #   \u0026ldquo;readonly\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to readonly \u0026ldquo;required\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to required \u0026ldquo;disabled\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to disabled \u0026ldquo;placeholder\u0026rdquo;:\u0026ldquo;string\u0026rdquo; set the placeholder for the element \u0026ldquo;rows\u0026rdquo;:\u0026ldquo;number\u0026rdquo; set the number of rows. \u0026ldquo;growing\u0026rdquo;:\u0026ldquo;true\u0026rdquo; Enables the ui5-textarea to automatically grow and shrink dynamically with its content. \u0026ldquo;show-exceeded-text\u0026rdquo;:\u0026ldquo;true\u0026rdquo; if set to true. the characters exceeding the maxlength value are selected on paste and the counter below the ui5-textarea displays their number. If set to false, the user is not allowed to enter more characters than what is set in the maxlength property. \u0026ldquo;growing-max-lines\u0026rdquo;:\u0026ldquo;number\u0026rdquo; Defines the maximum number of lines that the Web Component can grow. \u0026ldquo;max\u0026rdquo;:\u0026ldquo;number\u0026rdquo; set the maximum number of characters available in the input field.  supported meta and constraints #   readonly: true , set the element to readonly placeholder:\u0026ldquo;some string\u0026rdquo; set the placeholder for the element max:\u0026ldquo;number\u0026rdquo; set the maximum number of characters available in the input field.  The constraint required will mark the element as required\nMethods #  bind-data(fieldNode) Bind a entity field. You can use the entity even when no data was received.\nWhen you use @-object-ready from a furo-ui5-object which emits a EntityNode, just bind the field with \u0026ndash;entity(*.fields.fieldname)\nExample #           1 2 3 4 5 6 7 8  \u0026lt;furo-ui5-textarea-input ƒ-bind-data=\u0026#34;--dataObject(*.furo_data_textarea_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-textarea-input\u0026gt; \u0026lt;furo-ui5-textarea-input rows=\u0026#34;9\u0026#34; value-state=\u0026#34;Information\u0026#34; ƒ-bind-data=\u0026#34;--dataObject(*.furo_data_textarea_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-textarea-input\u0026gt;    Attributes and Properties #  nativeInputAttributes #   \nvalue #  default: ''\n\nEvents #  change #  @-change → text\nFired when the input operation has finished by pressing Enter or on focusout. input #  @-input → ``\nFired when the value of the ui5-input changes at each keystroke. value-changed #  @-value-changed → String\nFires the field value when it changes. Methods #  readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. those attributes can be set. value-state, value-state-message, placeholder, required,readonly,disabled Use this after manual or scripted update of the attributes.\n\n"});index.add({'id':187,'href':'/docs/components/furo-ui5-textarea-input-labeled/','title':"furo-ui5-textarea-input-labeled",'section':"Components",'content':"furo-ui5-textarea-input-labeled #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-textarea-input-labeled.js'; exports FuroUi5TextareaInputLabeled js exports \u0026lt;furo-ui5-textarea-input-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: labeled textarea field\n Description #  furo-ui5-textarea-input-labeled The furo-ui5-textarea-input-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\nExample #           1 2 3 4 5 6 7 8  \u0026lt;furo-ui5-textarea-input-labeled ƒ-bind-data=\u0026#34;--dataObject(*.furo_data_textarea_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-textarea-input-labeled\u0026gt; \u0026lt;furo-ui5-textarea-input-labeled rows=\u0026#34;9\u0026#34; value-state=\u0026#34;Information\u0026#34; ƒ-bind-data=\u0026#34;--dataObject(*.furo_data_textarea_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-textarea-input-labeled\u0026gt;    Attributes and Properties #  label #  label string default: ''\nthe label for the data-textarea-input rows #  rows number default: 0\nDefines the number of visible text lines for the component. growingMaxLines #  growing-max-lines number default: 0\nDefines the maximum number of lines that the Web Component can grow. required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. showExceededText #  show-exceeded-text \nDetermines whether the characters exceeding the maximum allowed character count are visible in the furo-ui5-textarea-input.\nIf set to false, the user is not allowed to enter more characters than what is set in the maxlength property. If set to true the characters exceeding the maxlength value are selected on paste and the counter below the furo-ui5-textarea-input displays their number. growing #  growing \nEnables the furo-ui5-textarea to automatically grow and shrink dynamically with its content. Methods #  focus #  focus(options Object ) ⟹ void\nObject  → ƒ-focus\nFocuses the underlying ui5 input element\n options https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus   bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    "});index.add({'id':188,'href':'/docs/components/furo-ui5-time-picker/','title':"furo-ui5-time-picker",'section':"Components",'content':"furo-ui5-time-picker #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-time-picker.js'; exports FuroUi5TimePicker js extends src/furo-ui5-time-picker.js mixes FieldNodeAdapter\n Summary: furo data time picker field\n Description #  The furo-ui5-time-picker component allows the user to bind a field of type google.type.TimeOfDay. Represents a time of day. The date and time zone are either not significant or are specified elsewhere.\nhttps://sap.github.io/ui5-webcomponents/playground/components/TimePicker/\nSupported format options are pattern-based on Unicode LDML Date Format notation. For more information, see UTS #35: Unicode Locale Data Markup Language.\nFor example, if the format-pattern is \u0026ldquo;hh:mm:ss\u0026rdquo;, a valid value string is \u0026ldquo;11:42:35\u0026rdquo; and the same is displayed in the input.\nThe text field can be editable or read-only (readonly property), and it can be enabled or disabled (enabled property). To visualize semantic states, such as \u0026ldquo;error\u0026rdquo; or \u0026ldquo;warning\u0026rdquo;, the valueState property is provided. When the user makes changes to the time, the change event is fired, which enables you to react on any time change.\nYou can bind a string or google.type.TimeOfDay (https://github.com/googleapis/googleapis/blob/master/google/type/timeofday.proto).\n1 2 3  \u0026lt;furo-ui5-time-picker ƒ-bind-data=\u0026#34;--data(*.start_time)\u0026#34;\u0026gt; \u0026lt;/furo-ui5-time-picker\u0026gt;   supported meta and constraints #   readonly: true , set the element to readonly placeholder:\u0026ldquo;some string\u0026rdquo; set the placeholder for the element min:\u0026ldquo;11:42:35\u0026rdquo; set the minDate for the element (use iso date in the constraint) max:\u0026ldquo;23:59:59\u0026rdquo; set the maxDate for the element (use iso date in the constraint) pattern:\u0026ldquo;HH:mm:ss\u0026rdquo; set the pattern for the element  The constraint required will mark the element as required\nMethods #  bind-data(fieldNode) Bind a entity field. You can use the entity even when no data was received.\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with \u0026ndash;entity(*.fields.fieldname)\nExample #           1 2 3 4 5 6 7 8  \u0026lt;furo-ui5-time-picker ƒ-bind-data=\u0026#34;--dataObject(*.furo_data_time_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-time-picker\u0026gt; \u0026lt;furo-ui5-time-picker value-state=\u0026#34;Information\u0026#34; ƒ-bind-data=\u0026#34;--dataObject(*.furo_data_time_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-time-picker\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;    Attributes and Properties #  formatPattern #  default: ''\n\nEvents #  value-changed #  @-value-changed → String\nFires the field value when it changes in ISO 8601 format. change #  @-change → ``\nFired when the input operation has finished by pressing Enter or on focusout. Methods #  onFnaFieldValueChanged #  onFnaFieldValueChanged(value `` ) ⟹ void\n``  → ƒ-on-fna-field-value-changed\nFieldNodeAdapter callback function to handle changes on the model.\n value    readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. those attributes can be set. value-state, value-state-message, icon, placeholder, required,readonly,disabled\nUse this after manual or scripted update of the attributes.\n\n"});index.add({'id':189,'href':'/docs/components/furo-ui5-time-picker-labeled/','title':"furo-ui5-time-picker-labeled",'section':"Components",'content':"furo-ui5-time-picker-labeled #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-time-picker-labeled.js'; exports FuroUi5TimePickerLabeled js exports \u0026lt;furo-ui5-time-picker-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: labeled input field\n Description #  furo-ui5-time-picker-labeled The furo-ui5-time-picker-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\nInside a furo-form-layouter set to four #           1 2 3 4 5 6 7 8 9 10  \u0026lt;furo-form-layouter four\u0026gt; \u0026lt;furo-ui5-time-picker-labeled ƒ-bind-data=\u0026#34;--dataObject(*.furo_data_time_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-time-picker-labeled\u0026gt; \u0026lt;furo-ui5-time-picker-labeled value-state=\u0026#34;Success\u0026#34; text=\u0026#34;Override\u0026#34; ƒ-bind-data=\u0026#34;--dataObject(*.furo_data_time_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-time-picker-labeled\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;   Inside a furo-form-layouter set to two #           1 2 3 4 5 6 7 8 9 10  \u0026lt;furo-form-layouter two\u0026gt; \u0026lt;furo-ui5-time-picker-labeled ƒ-bind-data=\u0026#34;--dataObject(*.furo_data_time_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-time-picker-labeled\u0026gt; \u0026lt;furo-ui5-time-picker-labeled value-state=\u0026#34;Success\u0026#34; text=\u0026#34;Override\u0026#34; ƒ-bind-data=\u0026#34;--dataObject(*.furo_data_time_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-time-picker-labeled\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;    Attributes and Properties #  label #  label string default: ''\nthe label for the data-date-picker required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled reflects \nA Boolean attribute which, if present, means this field cannot be edited by the user. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → String\nFires the field value when it changes in ISO 8601 format. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    "});index.add({'id':190,'href':'/docs/components/furo-ui5-toggle-button/','title':"furo-ui5-toggle-button",'section':"Components",'content':"furo-ui5-toggle-button #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-toggle-button.js'; exports FuroUi5ToggleButton js extends src/furo-ui5-toggle-button.js mixes FieldNodeAdapter\n Summary: boolean toggle button\n Description #  The \u0026lsquo;furo-ui5-toggle-button\u0026rsquo; component allows the user to switch true and false for Bool with data binding.\nIt supports all features from the SAP ui5 toggleButton element.\nYou can bind bool type, furo.fat.Bool type or the google.wrapper.BoolValue type.\n1 2 3  \u0026lt;furo-ui5-toggle-button ƒ-bind-data=\u0026#34;--daoCountry(*.data.classified_as_risk_area)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-toggle-button\u0026gt;   Specificity #   Attributes which are set in the html source will have the highest specificity and will never get overwritten by metas or fat. Attributes set in meta will have the lowest specificity and will be overwritten by attributes from fat.     meta fat html     1 10 100    supported FAT attributes #   \u0026ldquo;readonly\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to readonly \u0026ldquo;disabled\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to disabled \u0026ldquo;icon\u0026rdquo;:\u0026quot;\u0026quot; set the icon \u0026ldquo;design\u0026rdquo;:\u0026quot;\u0026quot; set the design  supported meta and constraints #   readonly: true , set the element to readonly  The constraint required will mark the element as required\nExample #      Override     1 2 3 4 5 6 7 8 9 10  \u0026lt;furo-form-layouter four\u0026gt; \u0026lt;furo-ui5-toggle-button ƒ-bind-data=\u0026#34;--doExp(*.furo_data_checkbox_input)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-toggle-button\u0026gt; \u0026lt;furo-ui5-toggle-button design=\u0026#34;Positive\u0026#34; text ƒ-bind-data=\u0026#34;--doExp(*.furo_data_checkbox_input)\u0026#34; \u0026gt;Override\u0026lt;/furo-ui5-toggle-button\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;    Attributes and Properties #  _previousDesign #  default: 'Default'\n\nEvents #  click #  @-click → ``\nFired when the input operation has finished by pressing Enter or on focusout. value-changed #  @-value-changed → Boolean\nFires the value of pressed when value changed. Methods #  readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom.\n\n"});index.add({'id':191,'href':'/docs/components/furo-ui5-tree/','title':"furo-ui5-tree",'section':"Components",'content':"furo-ui5-tree #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-tree.js'; exports FuroUi5Tree js exports \u0026lt;furo-ui5-tree\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: tree navigation menu\n Description #  furo-tree renders a tree structure\nData signature #  1 2 3 4 5 6  - type:\u0026#39;tree.Tree #Navigation tree type with recursive navigation nodes\u0026#39;fields:root:\u0026#39;tree.Navigationnode:1 #Root node of the tree\u0026#39;id:\u0026#39;string:2 #[optional] Id of the tree\u0026#39;display_name:\u0026#39;- string:3 #[optional] String representation of the tree\u0026#39;description:\u0026#39;string:4 #[optional] description of the tree\u0026#39;  1 2 3 4 5 6 7 8 9 10 11 12  - type:\u0026#39;tree.Navigationnode #Item of the navigationtree\u0026#39;fields:id:\u0026#39;string:1 #Id of the node\u0026#39;display_name:\u0026#39;- string:2 #String representation of the node\u0026#39;children:\u0026#39;[] tree.Navigationnode:3 #Children of this node\u0026#39;open:\u0026#39;bool:4 #node is open or not\u0026#39;secondary_text:\u0026#39;string:5 #[optional] Secondary text of the node\u0026#39;description:\u0026#39;string:6 #[optional] Searchable description of the node\u0026#39;icon:\u0026#39;string:7 #[optional] icon of the node\u0026#39;key_words:\u0026#39;string:8 #[optional] searchable key words of the node\u0026#39;has_error:\u0026#39;bool:9 #[optional] error indicator\u0026#39;is_group_label:\u0026#39;bool:10 #[optional] Mark node as group label\u0026#39;  Minimalistic Example #             Source for the tree part with keyboard navigation\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u0026lt;furo-ui5-tree ƒ-bind-data=\u0026#34;--entityObj(*.data)\u0026#34; @-node-selected=\u0026#34;--nodeSelected\u0026#34; ƒ-trigger-navigation=\u0026#34;--navigation\u0026#34; \u0026gt; \u0026lt;!-- add the furo-navigation-pad for keyboard navigation --\u0026gt; \u0026lt;furo-navigation-pad @-navigated=\u0026#34;--navigation\u0026#34;\u0026gt;\u0026lt;/furo-navigation-pad\u0026gt; \u0026lt;/furo-ui5-tree\u0026gt; \u0026lt;furo-data-object type=\u0026quot;tree.TreeEntity\u0026quot; ƒ-inject-raw=\u0026quot;\u0026ndash;data\u0026quot; @-object-ready=\u0026quot;\u0026ndash;entityObj\u0026quot; \u0026gt;\u0026lt;/furo-data-object\u0026gt; \n Example with deep link and root node set as header #               1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  \u0026lt;furo-ui5-tree slot=\u0026#34;master\u0026#34; root-as-header ƒ-bind-data=\u0026#34;--entityObj(*.data)\u0026#34; qp=\u0026#34;panel\u0026#34; ƒ-location-in=\u0026#34;--qp\u0026#34; @-node-selected=\u0026#34;--nodeSelected\u0026#34; @-qp-change-requested=\u0026#34;--qpchangerequest\u0026#34; ƒ-trigger-navigation=\u0026#34;--navigation\u0026#34; \u0026gt; \u0026lt;!-- add the furo-navigation-pad for keyboard navigation --\u0026gt; \u0026lt;furo-navigation-pad @-navigated=\u0026#34;--navigation\u0026#34;\u0026gt;\u0026lt;/furo-navigation-pad\u0026gt; \u0026lt;/furo-ui5-tree\u0026gt; \u0026lt;!\u0026ndash; update the location \u0026ndash;\u0026gt; \u0026lt;furo-location-updater ƒ-set-qp=\u0026quot;\u0026ndash;qpchangerequest\u0026quot;\u0026gt;\u0026lt;/furo-location-updater\u0026gt; \u0026lt;!\u0026ndash; track location changes \u0026ndash;\u0026gt; \u0026lt;furo-location @-location-query-changed=\u0026quot;\u0026ndash;qp\u0026quot;\u0026gt;\u0026lt;/furo-location\u0026gt;\n\u0026lt;furo-data-object type=\u0026quot;tree.TreeEntity\u0026quot; ƒ-inject-raw=\u0026quot;\u0026ndash;data\u0026quot; @-object-ready=\u0026quot;\u0026ndash;entityObj\u0026quot; \u0026gt;\u0026lt;/furo-data-object\u0026gt; \u0026lt;furo-fetch-json ƒ-fetch=\u0026quot;\u0026ndash;entityObj\u0026quot; src=\u0026quot;/mockdata/trees/1/testdata.json\u0026quot; @-data=\u0026quot;\u0026ndash;data\u0026quot; \u0026gt;\u0026lt;/furo-fetch-json\u0026gt; \n  Attributes and Properties #  tabindex #  tabindex reflects number default: 0\nSets the tabindex expandDepth #  expand-depth number default: 2\nSets the maximal expand level relative from the current node.\nExpanding is a expensive operation. depth #  depth \nMaximal depth for the tree. Default is infinite. qp #  qp \nQuery param to watch. Set qp to have a deep linkable tree.\nIf you set this attribute, the node-selected event will only be fired on ƒ-qp-in or ƒ-select-by-id.\nIf you select an item the qp-change-request will be fired instead. With the qp-change-request event, you should update the url. A furo-location should watch the url and update the location on the tree, which will trigger a node-selected event.\n1 2 3 4 5 6  \u0026lt;furo-location @-location-query-changed=\u0026#34;--qp\u0026#34;\u0026gt;\u0026lt;/furo-location\u0026gt; \u0026lt;furo-ui5-tree qp=\u0026#34;panel\u0026#34; ƒ-location-in=\u0026#34;--qp\u0026#34; @-qp-change-requested=\u0026#34;--qpchangerequest\u0026#34;\u0026gt;\u0026lt;/furo-ui5-tree\u0026gt; \u0026lt;!-- update the location with the selected tree item --\u0026gt; \u0026lt;furo-location-updater ƒ-set-qp=\u0026#34;--qpchangerequest\u0026#34;\u0026gt;\u0026lt;/furo-location-updater\u0026gt;   \nrootAsHeader #  root-as-header \nSet this flag if you do not want a header-text section. hideRootNode #  hide-root-node \nSet this flag if you do not want to see the root node headerText #  header-text \nOverride display name from root object secondaryText #  secondary-text \nOverride description from root object. focused #  focused reflects \nindicates that the element is focused Events #  node-focused #  @-node-focused → focused field\nFired when branch-focused #  @-branch-focused → focused field\nFired when leaf-focused #  @-leaf-focused → ``\nFired when node-selected #  @-node-selected → selected field\nFired when the item gets selected, does not fire when you work with query params qp-change-requested #  @-qp-change-requested → Object {\u0026amp;#34;this.qp\u0026amp;#34;: this._selectedField.id._value}\nFired when qp mode is enabled. Nodes are only selectable with qpIn or selectById branch-selected #  @-branch-selected → selected field\nFired when leaf-selected #  @-leaf-selected → selected field\nFired when node-opened #  @-node-opened → ``\nFired when a node is opened node-closed #  @-node-closed → ``\nFired when a node is closed nodes-expanded #  @-nodes-expanded → ``\nFired when nodes are expanded recursive nodes-collapsed #  @-nodes-collapsed → ``\nFired when nodes are collapsed recursive. Methods #  collapseFocused #  collapseFocused() ⟹ void\n* → ƒ-collapse-focused\ncollapses the focused element. If it is closed the parent will be focused.\n\nexpandFocused #  expandFocused() ⟹ void\n* → ƒ-expand-focused\nexpands the focused node, if it is opened the first child will be focused\n\nexpandFocusedRecursive #  expandFocusedRecursive() ⟹ void\n* → ƒ-expand-focused-recursive\nexpands the focused node recursive\n\ncollapseFocusedRecursive #  collapseFocusedRecursive() ⟹ void\n* → ƒ-collapse-focused-recursive\ncollapses the focused node recursive\n\nselectFocused #  selectFocused() ⟹ void\n* → ƒ-select-focused\nselects the focused element.\n\nsearch #  search(term `` ) ⟹ []\n``  → ƒ-search\nSearch in the visible nodes\n term    searchOpenTree #  searchOpenTree() ⟹ void\n* → ƒ-search-open-tree\n\nresetSearch #  resetSearch() ⟹ void\n* → ƒ-reset-search\nDisables the search mode and clears the term\n\nfocusParent #  focusParent() ⟹ void\n* → ƒ-focus-parent\nFocuses the parent tree node without selecting it.\nThe tree item will also scrollIntoViewIfNeeded() (on all platforms which support this method).\n\nfocusPrevious #  focusPrevious() ⟹ void\n* → ƒ-focus-previous\nfocus the previous visible node.\nThe tree item will also scrollIntoViewIfNeeded() (on all platforms which support this method).\n\nqpIn #  qpIn(qpObject `` ) ⟹ void\n``  → ƒ-qp-in\nSelects the node which is defined on qp\nUse this, if you do not have a location object.\n qpObject    locationIn #  locationIn(locationObject `` ) ⟹ *|boolean\n``  → ƒ-location-in\nInject a location object, which contains a query param property to select the current node.\n locationObject    selectById #  selectById(nodeID `` ) ⟹ void\n``  → ƒ-select-by-id\n nodeID    selectPrev #  selectPrev() ⟹ void\n* → ƒ-select-prev\nselect the previous visible item\n\nexpandNodeRecursive #  expandNodeRecursive() ⟹ void\n* → ƒ-expand-node-recursive\nexpands the currently selected node recursive\n\nexpandAll #  expandAll() ⟹ void\n* → ƒ-expand-all\n\ncollapseAll #  collapseAll() ⟹ void\n* → ƒ-collapse-all\n\ncollapseNodeRecursive #  collapseNodeRecursive() ⟹ void\n* → ƒ-collapse-node-recursive\nexpands the currently selected node recursive\n\ntoggle #  toggle() ⟹ void\n* → ƒ-toggle\ntoggles the currently selected node\n\naddSubNode #  addSubNode(rawNode `` ) ⟹ void\n``  → ƒ-add-sub-node\n rawNode    deleteNode #  deleteNode() ⟹ void\n* → ƒ-delete-node\n\nselectNext #  selectNext() ⟹ void\n* → ƒ-select-next\nselect the next visible item\n\ntriggerNavigation #  triggerNavigation(key `` ) ⟹ void\n``  → ƒ-trigger-navigation\n key    focusFirst #  focusFirst() ⟹ void\n* → ƒ-focus-first\nFocuses the first node in the tree without selecting it.\nUse selectFocused to select the focused node.\nThe tree item will also scrollIntoViewIfNeeded() (on all platforms which support this method).\n\nfocusLast #  focusLast() ⟹ void\n* → ƒ-focus-last\nFocuses the last node in the tree without selecting it.\nUse selectFocused to select the focused node.\nThe tree item will also scrollIntoViewIfNeeded() (on all platforms which support this method).\n\nfocusNext #  focusNext() ⟹ void\n* → ƒ-focus-next\nfocuses the next visible tree node.\nThe tree item will also scrollIntoViewIfNeeded() (on all platforms which support this method).\n\nfocus #  focus() ⟹ void\n* → ƒ-focus\nfocuses the tree itself. You can use this in combination with keyboard navigation (furo-navigation-pad)\n\nbindData #  bindData(treeNode NavigationNode|Tree ) ⟹ void\nNavigationNode|Tree  → ƒ-bind-data\nBinds a FieldNode.\nSupported types: everything with a tree.Tree or tree.Navigationnode signature.\n treeNode Fieldnode   focusSelected #  focusSelected() ⟹ void\n* → ƒ-focus-selected\nFocuses the currently selected tree item.\nThe tree item will also scrollIntoViewIfNeeded() (on all platforms which support this method).\n\nStyling #  The following custom properties available for styling:\n   Custom property Description     --surface background color  default: white fallback: N/A   --on-surface foreground color  default: #333333 fallback: N/A   --tree-indentation-1 tree indention level 1  default: 16px fallback: N/A   --tree-indentation-2 tree indention level 2  default: 32px fallback: N/A   --tree-indentation-3 tree indention level 3  default: 48px fallback: N/A   --tree-indentation-4 tree indention level 4  default: 56px fallback: N/A   --tree-indentation-5 tree indention level 5  default: 64px fallback: N/A   --tree-indentation-6 tree indention level 6  default: 72px fallback: N/A   --tree-indentation-7 tree indention level 7  default: 80px fallback: N/A   --tree-indentation-8 tree indention level 8  default: 88px fallback: N/A   --tree-indentation-9 tree indention level 9  default: 92px fallback: N/A   --tree-indentation-10 tree indention level 10  default: 96px fallback: N/A   --tree-indentation-11 tree indention level 11  default: 100px fallback: N/A   --tree-indentation-12 tree indention level 12  default: 104px fallback: N/A    "});index.add({'id':192,'href':'/docs/components/furo-ui5-tree-item/','title':"furo-ui5-tree-item",'section':"Components",'content':"furo-ui5-tree-item #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/subcomponents/furo-ui5-tree-item.js'; exports FuroUi5TreeItem js exports \u0026lt;furo-ui5-tree-item\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: tree item\n Description #  furo-tree-item /**\nINTERNAL COMPONENT #  This is a helper component to send tablerow-selected event by clicking the row or pressing the enter on the row.\nAttributes and Properties #  hidden #  hidden reflects boolean default: true\nDescription isGroupLabel #  is-group-label reflects boolean default: false\n\nindentation #  default: 0\n\n_icon #  default: 'border'\n\nfocused #  focused reflects \n\nsearchmatch #  searchmatch reflects \n\ninedit #  inedit reflects \n\nhaserror #  haserror reflects \n\nselected #  selected reflects \n\nnoicon #  noicon \n\nMethods #  search #  search(event `` ) ⟹ void\n``  → ƒ-search\n event    _updateItem #  _updateItem() ⟹ void\n* → ƒ\u0026ndash;update-item\n\nbindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    __addNodeSelectedListener #  __addNodeSelectedListener() ⟹ void\n* → ƒ\u0026mdash;add-node-selected-listener\n\nStyling #  The following custom properties available for styling:\n   Custom property Description     --tree-indentation-1 tree indention level 1  default: 16px fallback: N/A   --tree-indentation-2 tree indention level 2  default: 32px fallback: N/A   --tree-indentation-3 tree indention level 3  default: 48px fallback: N/A   --tree-indentation-4 tree indention level 4  default: 56px fallback: N/A   --tree-indentation-5 tree indention level 5  default: 64px fallback: N/A   --tree-indentation-6 tree indention level 6  default: 72px fallback: N/A   --tree-indentation-7 tree indention level 7  default: 80px fallback: N/A   --tree-indentation-8 tree indention level 8  default: 88px fallback: N/A   --tree-indentation-9 tree indention level 9  default: 92px fallback: N/A   --tree-indentation-10 tree indention level 10  default: 96px fallback: N/A   --tree-indentation-11 tree indention level 11  default: 100px fallback: N/A   --tree-indentation-12 tree indention level 12  default: 104px fallback: N/A    "});index.add({'id':193,'href':'/docs/components/furo-ui5-typerenderer-labeled/','title':"furo-ui5-typerenderer-labeled",'section':"Components",'content':"furo-ui5-typerenderer-labeled #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-typerenderer-labeled.js'; exports FuroUi5TyperendererLabeled js exports \u0026lt;furo-ui5-typerenderer-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: labeled input field\n Description #  furo-ui5-typerenderer-labeled The furo-ui5-typerenderer-labeled is a composition to easily use a display field with label according to the design specification of SAP Fiori Design System.\nAttributes and Properties #  label #  label string default: ''\nthe label for the data-text-input valueState #  value-state reflects string default: ''\nValue State context #  context string default: 'display'\n\ndisabled #  disabled reflects \nDisabled State Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds the fieldNode to the component binding set can be customised here otherwise the standard bindData in the ui5-data-input will be used\n fieldNode    "});index.add({'id':194,'href':'/docs/components/furo-ui5-z-grid/','title':"furo-ui5-z-grid",'section':"Components",'content':"furo-ui5-z-grid #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/furo-ui5-z-grid.js'; exports \u0026lt;furo-ui5-z-grid\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Summary: grid with a z pattern\n Description #  z-grid is a grid which places your elements in a z pattern. It creates a grid which can be imagined as a grid with cells of the size 8rem x 8rem.~\nThe size on the x-axis can vary a little bit, according to the the available space.\nThis component is nestable.\n1 2 3 4 5 6 7 8 9 10 11  \u0026lt;furo-z-grid\u0026gt; \u0026lt;your-component hspace=\u0026#34;2\u0026#34; vspace=\u0026#34;4\u0026#34;\u0026gt;\u0026lt;/your-component\u0026gt; \u0026lt;your-component hspace=\u0026#34;2\u0026#34; vspace=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;/your-component\u0026gt; \u0026lt;/furo-z-grid\u0026gt; \u0026lt;!-- with automatic padding --\u0026gt; \u0026lt;furo-z-grid padding\u0026gt; \u0026lt;your-component hspan=\u0026#34;2\u0026#34; vspan=\u0026#34;4\u0026#34;\u0026gt;\u0026lt;/your-component\u0026gt; \u0026lt;your-component hspan=\u0026#34;2\u0026#34; vspan=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;/your-component\u0026gt; \u0026lt;/furo-z-grid\u0026gt;   sizes #  The sizes are calculated from the available space that the grid becomes from its parent.\nSizes are calculated as following #   | small | medium | large | xlarge | | | | | | | 0...599 | 600...1023 | 1024...1439 | 1440...nnnn | hspan #  Set the horizontal space (the width) with the hspan attribute.\nAvailable ranges are from 1 to 9 and full.\nTo tell a element that it has to use the full width use hspan=\u0026quot;full\u0026quot; or use the alias full or full-width.\nhspan=\u0026quot;1\u0026quot;, hspan=\u0026quot;2\u0026quot;,\u0026hellip;,hspan=\u0026quot;9\u0026quot;, hspan=\u0026quot;full\u0026quot;\nvspan #  Set the vertical space (the height) with the vspan attribute.\nAvailable ranges are from 1 to 9.\nvspan=\u0026quot;1\u0026quot;, vspan=\u0026quot;2\u0026quot;,\u0026hellip;,vspan=\u0026quot;9\u0026quot;\nnewline #  To force a placement on a new line use newline\npadding #  Set the attribute padding to add paddings according to the size of the furo-z-grid automatically.\n:host([size=\u0026lsquo;size-s\u0026rsquo;]) ==\u0026gt; 0.25rem 1rem;\n:host([size=\u0026lsquo;size-m\u0026rsquo;] ==\u0026gt; 0.25rem 2rem;\n:host([size=\u0026lsquo;size-l\u0026rsquo;] ==\u0026gt; 1rem 2rem;\n:host([size=\u0026lsquo;size-xl\u0026rsquo;] ==\u0026gt; 1rem 3rem;\nfull-on-[size] #  To set full width on a specific current size, use full-on-size-small , full-on-size-medium , full-on-size-large ,full-on-size-xlarge.\nWhen the available space has the given size, the default hspan are overridden and the full width is used.\nhide-on-[size] #  To hide a element on a specific current size, use hide-on-size-small , hide-on-size-medium , hide-on-size-large ,hide-on-size-xlarge.\nshow-on-[size] #  To show a element only on a specific current size, use show-on-size-small , show-on-size-medium , show-on-size-large ,show-on-size-xlarge.\ncustom span sizes on different sizes (hspan-on-[size]) #  To set a specific width (hspan) on a specific current size, use hspan-on-size-small=\u0026quot;1...9\u0026quot; , hspan-on-size-medium=\u0026quot;1...9\u0026quot; , hspan-on-size-large=\u0026quot;1...9\u0026quot; , hspan-on-size-xlarge=\u0026quot;1...9\u0026quot; .\nOhter attributes #  The attributes full and full-width are aliases for hspan=\u0026quot;full\u0026quot;.\nNamed lines and columns #  last-col refers to the last column. last-row refers to the last line/row.\nSample #  Switch the demo to fullscreen and resize your screen to see the effect.\nLook at furo-ui5-flexible-grid for more examples.\n  furo-ui5-flexible-grid div {border: 1px solid black;}    1x2 1x1 2x2 2x1 full width, no height given      1 2 3 4 5 6 7 8 9  \u0026lt;furo-ui5-z-grid\u0026gt; \u0026lt;div vspan=\u0026#34;2\u0026#34; hspan=\u0026#34;1\u0026#34; style=\u0026#34;background: whitesmoke;\u0026#34;\u0026gt;1x2\u0026lt;/div\u0026gt; \u0026lt;div vspan=\u0026#34;1\u0026#34; hspan=\u0026#34;1\u0026#34; style=\u0026#34;background: pink;\u0026#34;\u0026gt;1x1\u0026lt;/div\u0026gt; \u0026lt;div vspan=\u0026#34;2\u0026#34; hspan=\u0026#34;2\u0026#34; style=\u0026#34;background: papayawhip;\u0026#34;\u0026gt;2x2\u0026lt;/div\u0026gt; \u0026lt;div vspan=\u0026#34;1\u0026#34; hspan=\u0026#34;2\u0026#34; style=\u0026#34;background: lightblue;\u0026#34;\u0026gt;2x1\u0026lt;/div\u0026gt; \u0026lt;div hspan=\u0026#34;full\u0026#34; style=\u0026#34;background: papayawhip;\u0026#34;\u0026gt; full width, no height given \u0026lt;/div\u0026gt; \u0026lt;/furo-ui5-z-grid\u0026gt;    Attributes and Properties #  Methods #  Slots #  default #  Type: HTMLElement [0..n]\ndefault slot to add content. Styling #  The following custom properties available for styling:\n   Custom property Description     --furo-ui5-cardContentHeight card content height with vspan=1, \u0026ndash;furo-ui5-cardContentHeight is calculated by span * 2 - cardHeaderHeight  default: 4rem fallback: N/A   --furo-ui5-cardContentHeight card content height with vspan=2, \u0026ndash;furo-ui5-cardContentHeight is calculated by span * 2 - cardHeaderHeight  default: 8rem fallback: N/A   --furo-ui5-cardContentHeight card content height with vspan=3, \u0026ndash;furo-ui5-cardContentHeight is calculated by span * 2 - cardHeaderHeight  default: 12rem fallback: N/A   --furo-ui5-cardContentHeight card content height with vspan=4, \u0026ndash;furo-ui5-cardContentHeight is calculated by span * 2 - cardHeaderHeight  default: 16rem fallback: N/A   --furo-ui5-cardContentHeight card content height with vspan=5, \u0026ndash;furo-ui5-cardContentHeight is calculated by span * 2 - cardHeaderHeight  default: 20rem fallback: N/A   --furo-ui5-cardContentHeight card content height with vspan=6, \u0026ndash;furo-ui5-cardContentHeight is calculated by span * 2 - cardHeaderHeight  default: 24rem fallback: N/A   --furo-ui5-cardContentHeight card content height with vspan=7, \u0026ndash;furo-ui5-cardContentHeight is calculated by span * 2 - cardHeaderHeight  default: 28rem fallback: N/A   --furo-ui5-cardContentHeight card content height with vspan=8, \u0026ndash;furo-ui5-cardContentHeight is calculated by span * 2 - cardHeaderHeight  default: 32rem fallback: N/A   --furo-ui5-cardContentHeight card content height with vspan=9, \u0026ndash;furo-ui5-cardContentHeight is calculated by span * 2 - cardHeaderHeight  default: 36rem fallback: N/A    "});index.add({'id':195,'href':'/docs/components/ui5-reference-search-item/','title':"ui5-reference-search-item",'section':"Components",'content':"ui5-reference-search-item #  @furo/ui5 v1.0.0-rc.18 import '@furo/ui5/src/ui5-reference-search-item.js'; exports Ui5ReferenceSearchItem js exports \u0026lt;ui5-reference-search-item\u0026gt; custom-element-definition extends src/ui5-reference-search-item.js\n Summary: representation of a result item\n Description #  reference-search-item Repeated item to display the search result set\nAttributes and Properties #  _item #  default: {}\n\ndisplayField #  default: 'display_name'\n\nEvents #  item-selected #  @-item-selected → item\nFired when item is selected Methods #  injectItem #  injectItem(item `` ) ⟹ void\n``  → ƒ-inject-item\nInject of the item data of inner text of the element is defined with the attribute display-field (default value: display_name)\n item    deselect #  deselect() ⟹ void\n* → ƒ-deselect\n\npreselect #  preselect() ⟹ void\n* → ƒ-preselect\n\nselect #  select() ⟹ void\n* → ƒ-select\n\n"});index.add({'id':196,'href':'/docs/components/','title':"Components",'section':"Docs",'content':"@furo/ui5 #  @furo/ui5 v1.0.0-rc.18 SAP UI5 Web Components data bindings for furo\nWhat is inside #  Components #    furo-ui5-bool-icon Displays a icon for a boolean value  furo-ui5-busy-indicator ui5 busy indicator with methods  furo-ui5-button ui5 button with methods  furo-ui5-card Ui5 card with data bindings  furo-ui5-chart-display Display charts with data objects  furo-ui5-chart connect data to a chart  furo-ui5-checkbox-input-labeled labeled input field  furo-ui5-checkbox-input data checkbox input field  furo-ui5-combobox-labeled labeled combobox  furo-ui5-combobox data combobox field  furo-ui5-context-menu-display context menu  furo-ui5-context-menu Context menu  furo-ui5-date-picker-labeled labeled input field  furo-ui5-date-picker bindable datepicker field  furo-ui5-date-time-picker-labeled labeled input field  furo-ui5-date-time-picker furo data datetime picker field  furo-ui5-dialog-display Display element for furo-ui5-dialog  furo-ui5-dialog Dialog element  furo-ui5-flexible-grid a grid splitter  furo-ui5-form-field-container responsive labels for your input elements  furo-ui5-header-panel A bindable header panel  furo-ui5-message-strip-display furo ui5 message strip  furo-ui5-message-strip furo ui5 message strip  furo-ui5-money-input-labeled labeled input field  furo-ui5-money-input Binds a entityObject field google.type.Money to a number-input and currency dropdown fields  furo-ui5-multi-combobox-labeled labeled multi-combobox  furo-ui5-multi-combobox data select field  furo-ui5-multi-input-labeled labeled textarea field  furo-ui5-multi-input repeated strings  furo-ui5-notification-group-display ui5 notification group display  furo-ui5-notification-list-display ui5 notification list  furo-ui5-notification trigger component for notifications  furo-ui5-number-input-labeled labeled input field  furo-ui5-number-input data number input field  furo-ui5-pagination-bar Pagination Bar  furo-ui5-password-input-labeled labeled input field  furo-ui5-password-input data password input field  furo-ui5-property ????? bind types of type any  furo-ui5-typerenderer-labeled  furo-ui5-radio-button boolean toggle button  furo-ui5-reference-search labeled input field  furo-ui5-reference-search furo ui5 data reference search  furo-ui5-segmented-button segmented button  furo-ui5-select-labeled labeled select  furo-ui5-select data select field  furo-ui5-sign-pad draw or sign  furo-ui5-table Display repeated fields in a table  furo-ui5-text-input-labeled labeled input field  furo-ui5-text-input data text input field  furo-ui5-textarea-input-labeled labeled textarea field  furo-ui5-textarea-input data textarea input field  furo-ui5-time-picker-labeled labeled input field  furo-ui5-time-picker furo data time picker field  furo-ui5-toggle-button boolean toggle button  furo-ui5-tree tree navigation menu  furo-ui5-typerenderer-labeled labeled input field  furo-ui5-z-grid grid with a z pattern  ui5-reference-search-item representation of a result item  furo-ui5-context-menu-item context menu item  furo-ui5-context-submenu helper  furo-ui5-table-row  furo-ui5-tree-item tree item  "});index.add({'id':197,'href':'/docs/components/Events/','title':"Events",'section':"Components",'content':"Events #  @furo/components v1.0.0-rc.18 import '@furo/components/src/src/lib/Events.js'; exports Events js\n Attributes and Properties #  Methods #  buildChangeEvent #  buildChangeEvent(detail `` ) ⟹ Event\nCreates an universal value-changed event All extended ui5 components should use this builder function to create the change event\n detail    "});index.add({'id':198,'href':'/docs/components/MediaSize/','title':"MediaSize",'section':"Components",'content':"MediaSize #  @furo/components v1.0.0-rc.18 import '@furo/components/src/src/lib/MediaSize.js'; exports MediaSize js\n MediaSize resolver #  Returns the media size from S to XXL according to the screen width.\nUse this to set style vars according to the current media size.\nUsage #  Apply the media-size attribute to your main-stage or component.\n1 2 3 4 5 6 7  window.addEventListener(\u0026#39;resize\u0026#39;, MediaSize.DebounceBuilder(() =\u0026gt; { this.setAttribute(\u0026#34;media-size\u0026#34;, MediaSize.GetMediaSize()) }, MediaSize.HANDLE_RESIZE_DEBOUNCE_RATE) ); // initial size this.setAttribute(\u0026#34;media-size\u0026#34;, MediaSize.GetMediaSize())   Set media-size related values for your variables.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  :host([media-size=\u0026#39;XXL\u0026#39;]) { --FuroUi5MediaSizeIndentation: 2rem 3rem 1rem 3rem; --FuroUi5MediaSizeIndentationTop: 2rem; --FuroUi5MediaSizeIndentationRight: 3rem; --FuroUi5MediaSizeIndentationBottom: 1; --FuroUi5MediaSizeIndentationLeft: 3rem; } :host([media-size=\u0026#39;XL\u0026#39;]) { --FuroUi5MediaSizeIndentation: 2rem 3rem 1rem 3rem; --FuroUi5MediaSizeIndentationTop: 2rem; --FuroUi5MediaSizeIndentationRight: 3rem; --FuroUi5MediaSizeIndentationBottom: 1; --FuroUi5MediaSizeIndentationLeft: 3rem; } :host([media-size=\u0026#39;L\u0026#39;]) { --FuroUi5MediaSizeIndentation: 1rem 2rem 0 2rem; --FuroUi5MediaSizeIndentationTop: 1rem; --FuroUi5MediaSizeIndentationRight: 2rem; --FuroUi5MediaSizeIndentationBottom: 0; --FuroUi5MediaSizeIndentationLeft: 2rem; } :host([media-size=\u0026#39;M\u0026#39;]) { --FuroUi5MediaSizeIndentation: 0.625rem 2rem 0 2rem; --FuroUi5MediaSizeIndentationTop: 0.625rem; --FuroUi5MediaSizeIndentationRight: 2rem; --FuroUi5MediaSizeIndentationBottom: 0; --FuroUi5MediaSizeIndentationLeft: 2rem; } :host([media-size=\u0026#39;S\u0026#39;]) { --FuroUi5MediaSizeIndentation: 0.625rem 1rem 0 1rem; --FuroUi5MediaSizeIndentationTop: 0.625rem; --FuroUi5MediaSizeIndentationRight: 1rem; --FuroUi5MediaSizeIndentationBottom: 0; --FuroUi5MediaSizeIndentationLeft: 1rem; }   Attributes and Properties #  HANDLE_RESIZE_DEBOUNCE_RATE #   Default debounce rate for resize updates. BREAKPOINTS #   \nBREAKPOINTS_MAP #   \nMethods #  GetMediaSize #  GetMediaSize() ⟹ String\nReturns the media size.\nSizes: S,M,L,XL,XXl\n\nDebounceBuilder #  DebounceBuilder(func *delay* ) ⟹ (function(...[*]): void)|*\nGenerates a debounced function.\n func  delay    "});index.add({'id':199,'href':'/docs/typerenderer/','title':"Typerenderer",'section':"Docs",'content':"@furo/ui5 #  @furo/ui5 v1.0.0-rc.18 SAP UI5 Web Components data bindings for furo\nWhat is inside #  Components #    cell-bool cell display renderer for bool  cell-double cell display renderer for double  cell cell display renderer for float  cell-furo-bigdecimal cell display renderer for type furo.BigDecimal  cell-furo-fat-bool cell display renderer for furo.fat.Bool  cell-furo-fat-double cell display renderer for furo.fat.Double  cell-furo-fat-float cell display renderer for furo.fat.Float  cell-furo-fat-int32 cell display renderer for furo.fat.Int32  cell-furo-fat-int64 cell display renderer for furo.fat.Int64  cell-furo-fat-string cell display renderer for furo.fat.String  cell-furo-fat-uint32 cell display renderer for furo.fat.Uint32  cell-furo-fat-uint64 cell display renderer for furo.fat.Uint64  cell-furo-integerproperty cell display renderer for furo.Integerproperty  cell-furo-link cell display renderer for furo.Link  cell-furo-numberproperty cell display renderer for furo.Numberproperty  cell-furo-property-repeated cell display renderer for [] furo.Property  cell-furo-property cell display renderer for furo.Property  cell-furo-reference cell display renderer for furo.Reference  cell-furo-stringoptionproperty cell display renderer for furo.Stringoptionproperty  cell-furo-stringproperty cell display renderer for furo.Stringproperty  cell-furo-type-date cell display renderer for furo.type.Date  cell-furo-type-money cell display renderer for furo.type.Money  cell-google-protobuf-any cell display renderer for google.protobuf.Any  cell-google-protobuf-boolvalue cell display renderer for google.protobuf.BoolValue  cell-google-protobuf-doublevalue cell display renderer for google.protobuf.DoubleValue  cell-google-protobuf- cell display renderer for google.protobuf.  cell-google-protobuf-int32value cell display renderer for google.protobuf.Int32Value  cell-google-protobuf-int64value cell display renderer for google.protobuf.Int64Value  cell-google-protobuf-stringvalue cell display renderer for google.protobuf.StringValue  cell-google-protobuf-timestamp cell display renderer for google.protobuf.Timestamp  cell-google-protobuf-uint32value cell display renderer for google.protobuf.Uint32Value  cell-google-protobuf-uint64value cell display renderer for google.protobuf.Uint64Value  cell-google-type-color cell display renderer for google.type.Color  cell-google-type-date cell display renderer for google.type.Date  cell-google-type-money cell display renderer for google.type.Money  cell-google-type-timeofday cell display renderer for google.type.TimeOfDay  cell-int32 cell display renderer for int32  cell-int64 cell display renderer for int64  cell-string cell display renderer for string  cell-uint32 cell display renderer for uint32  cell-uint64 cell display renderer for uint64  celledit-bool celledit renderer for bool  celledit-double celledit renderer for double  celledit-float celledit renderer for float  celledit-furo-bigdecimal celledit renderer for type furo.BigDecimal  celledit-furo-fat-int32 celledit renderer for furo.fat.Int32  celledit-furo-fat-int64 celledit renderer for furo.fat.Int64  celledit-furo-link celledit renderer for furo.Link  celledit-furo-property-repeated celledit renderer for [] furo.Property  celledit-furo-property celledit renderer for furo.Property  celledit-furo-reference celledit renderer for furo.Reference  celledit-furo-type-money celledit renderer for furo.type.Money  celledit-google-protobuf-any celledit renderer for google.protobuf.Any  celledit-google-type-money celledit renderer for google.type.Money  celledit-int32 celledit renderer for int32  celledit-int64 celledit renderer for int64  celledit-string celledit renderer for string  celledit-uint32 celledit renderer for uint32  celledit-uint64 celledit renderer for uint64  display-bool display renderer for bool  display-double display renderer for double  display-float display renderer for float  display-furo-bigdecimal display renderer for furo.BigDecimal  display-furo-fat-bool display renderer for furo.fat.Bool  display-furo-fat-double display renderer for furo.fat.Double  display-furo-fat-float display renderer for furo.fat.Float  display-furo-fat-int32 display renderer for furo.fat.Int32  display-furo-fat-int64 display renderer for furo.fat.Int64  display-furo-fat-string display renderer for furo.fat.String  display-furo-fat-Uint32 display renderer for furo.fat.Uint32  display-furo-fat-uint64 display renderer for furo.fat.Uint64  display-furo- display renderer for furo.  display-furo-link display renderer for furo.Link  display-furo-numberproperty display renderer for furo.Numberproperty  display-furo-property-repeated display renderer for [] furo.Property  display-furo-property-labeled display renderer for [] furo.Property with labels  display-furo-property display renderer for furo.Property  display-furo-reference display renderer for furo.Reference  display-furo-stringoptionproperty display renderer for furo.Stringoptionproperty  display-furo-stringproperty display renderer for furo.Stringproperty  display-furo-type-date display renderer for furo.type.Date  display-furo-type-money display renderer for furo.type.Money  display-google-protobuf- display renderer for google.protobuf.  display-google-protobuf-boolvalue display renderer for google.protobuf.BoolValue  display-google-protobuf-doublevalue display renderer for google.protobuf.DoubleValue  display-google-protobuf-floatvalue display renderer for google.protobuf.FloatValue  display-google-protobuf-int32Value display renderer for google.protobuf.Int32Value  display-google-protobuf-int64Value display renderer for google.protobuf.Int64Value  display-google-protobuf-stringvalue display renderer for google.protobuf.StringValue  display-google-protobuf-timestamp display renderer for google.protobuf.Timestamp  display-google-protobuf-uint32value display renderer for google.protobuf.Uint32Value  display-google-protobuf-uint64value display renderer for google.protobuf.Uint64Value  display-google-type-color display renderer for google.type.Color  display-google-type-date display renderer for google.type.Date  display-google-type-money display renderer for google.type.Money  display-google-type-timeofday display renderer for google.type.TimeOfDay  display-int32 display renderer for int32  display-int64 display renderer for int64  display-string display renderer for string  display-uint32 display renderer for uint32  display-uint64 display renderer for uint64  form-bool form renderer for bool  form-double form renderer for double  form-float form renderer for float  form-furo-bigdecimal form renderer for type furo.BigDecimal  form-furo-fat-bool form renderer for furo.fat.Bool  form-furo-fat-double form renderer for furo.fat.Double  form-furo-fat-float form renderer for furo.fat.Float  form-furo-fat-int32 form renderer for furo.fat.Int32  form-furo-fat-int64 form renderer for furo.fat.Int64  form-furo-fat-string form renderer for furo.fat.String  form-furo-fat-uint32 form renderer for furo.fat.Uint32  form-furo-fat-uint64 form renderer for furo.fat.Uint64  form-furo-integerproperty form renderer for furo.Integerproperty  form-furo-integerproperty form renderer for furo.Integerproperty  form-furo-reference form renderer for furo.Reference  form-furo-stringoptionproperty form renderer for furo.Stringoptionproperty  form-furo-stringproperty form renderer for furo.Stringproperty  form-furo-type-date form renderer for furo.type.Date  form-furo-type-money form renderer for furo.type.Money  form-google-protobuf-boolvalue form renderer for google.protobuf.BoolValue  form-google-protobuf-doublevalue form renderer for google.protobuf.Double  form-google-protobuf-floatvalue form renderer for google.protobuf.FloatValue  form-google-protobuf-int32value form renderer for google.protobuf.Int32Value  form-google-protobuf-int64value form renderer for google.protobuf.Int64Value  form-google-protobuf-stringValue form renderer for google.protobuf.StringValue  form-google-protobuf-timestamp form renderer for google.protobuf.Timestamp  form-google-type-date form renderer for google.type.Date  form-google-type-money form renderer for google.type.Money  form-google-type-timeofday form renderer for google.type.TimeOfDay  form-int32 form renderer for int32  form-int64 form renderer for int64  form-string form renderer for string  form-uint32 form renderer for uint32  form-uint64 form renderer for uint64  "});index.add({'id':200,'href':'/docs/components/Ui5LabelDataBinding/','title':"Ui5LabelDataBinding",'section':"Components",'content':"Ui5LabelDataBinding #  @furo/components v1.0.0-rc.18 import '@furo/components/src/src/lib/Ui5LabelDataBinding.js'; exports Ui5LabelDataBinding js\n Helper class for binding ui5 labeled elements\nAttributes and Properties #  Methods #  bindData #  bindData(element `` fieldNode FieldNode ) ⟹ void\nbind data for labeled element\n element  fieldNode    isFatType #  isFatType(field `` ) ⟹ boolean\ncheck whether it is a fat type\n field    "});})();