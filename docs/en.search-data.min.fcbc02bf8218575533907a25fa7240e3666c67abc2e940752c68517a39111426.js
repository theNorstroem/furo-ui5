'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/guides/gettingstarted/','title':"Getting started",'section':"Guides",'content':"Getting Started #   define your specs init \u0026hellip;  "});index.add({'id':1,'href':'/docs/guides/','title':"Guides",'section':"Docs",'content':"How to #  get started? Installation? init? style?\n"});index.add({'id':2,'href':'/docs/typerenderer/cell-bool/','title':"cell-bool",'section':"typerenderer",'content':"cell-bool #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-bool.js'; exports CellBool js exports \u0026lt;cell-bool\u0026gt; custom-element-definition superclass LitElement\n cell-bool The cell-bool component displays a FieldNode of type bool in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode of type bool, furo.fat.Bool, google.wrapper.BoolValue   "});index.add({'id':3,'href':'/docs/typerenderer/cell-double/','title':"cell-double",'section':"typerenderer",'content':"cell-double #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-double.js'; exports CellDouble js exports \u0026lt;cell-double\u0026gt; custom-element-definition superclass LitElement\n cell-double The cell-double component displays a FieldNode of type double in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':4,'href':'/docs/typerenderer/cell-float/','title':"cell-float",'section':"typerenderer",'content':"cell-float #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-float.js'; exports CellFloat js exports \u0026lt;cell-float\u0026gt; custom-element-definition superclass LitElement\n cell-float The cell-float component displays a FieldNode of type float in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  _displayValue #  default: ''\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':5,'href':'/docs/typerenderer/cell-furo-fat-bool/','title':"cell-furo-fat-bool",'section':"typerenderer",'content':"cell-furo-fat-bool #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-furo-fat-bool.js'; exports \u0026lt;cell-furo-fat-bool\u0026gt; custom-element-definition extends /src/typerenderer/cell-bool.js superclass CellBool\n cell-furo-fat-bool The cell-furo-fat-bool component displays a FieldNode of type furo.fat.bool in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode of type bool, furo.fat.Bool, google.wrapper.BoolValue   "});index.add({'id':6,'href':'/docs/typerenderer/cell-furo-fat-double/','title':"cell-furo-fat-double",'section':"typerenderer",'content':"cell-furo-fat-double #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-furo-fat-double.js'; exports \u0026lt;cell-furo-fat-double\u0026gt; custom-element-definition extends /src/typerenderer/cell-double.js superclass CellDouble\n cell-furo-fat-double The cell-furo-fat-double component displays a FieldNode of type furo.fat.Double in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':7,'href':'/docs/typerenderer/cell-furo-fat-float/','title':"cell-furo-fat-float",'section':"typerenderer",'content':"cell-furo-fat-float #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-furo-fat-float.js'; exports \u0026lt;cell-furo-fat-float\u0026gt; custom-element-definition extends /src/typerenderer/cell-float.js superclass CellFloat\n cell-furo-fat-float The cell-furo-fat-float component displays a FieldNode of type furo.fat.Float in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  _displayValue #  default: ''\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':8,'href':'/docs/typerenderer/cell-furo-fat-int32/','title':"cell-furo-fat-int32",'section':"typerenderer",'content':"cell-furo-fat-int32 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-furo-fat-int32.js'; exports CellFuroFatInt32 js exports \u0026lt;cell-furo-fat-int32\u0026gt; custom-element-definition extends /src/typerenderer/cell-int32.js superclass CellInt32\n cell-int32 The cell-int32 component displays a FieldNode of type furo.fat.Int32 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':9,'href':'/docs/typerenderer/cell-furo-fat-int64/','title':"cell-furo-fat-int64",'section':"typerenderer",'content':"cell-furo-fat-int64 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-furo-fat-int64.js'; exports CellFuroFatInt64 js exports \u0026lt;cell-furo-fat-int64\u0026gt; custom-element-definition extends /src/typerenderer/cell-furo-fat-int32.js superclass CellFuroFatInt32\n cell-furo-fat-int64 The cell-furo-fat-int64 component displays a FieldNode of type furo.fat.int64 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':10,'href':'/docs/typerenderer/cell-furo-fat-string/','title':"cell-furo-fat-string",'section':"typerenderer",'content':"cell-furo-fat-string #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-furo-fat-string.js'; exports \u0026lt;cell-furo-fat-string\u0026gt; custom-element-definition superclass LitElement\n cell-furo-fat-string The cell-furo-fat-string component displays a FieldNode of type furo.fat.String in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _updateMeta #  _updateMeta() ⟹ void\n* → ƒ\u0026ndash;update-meta\n\n"});index.add({'id':11,'href':'/docs/typerenderer/cell-furo-fat-uint32/','title':"cell-furo-fat-uint32",'section':"typerenderer",'content':"cell-furo-fat-uint32 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-furo-fat-uint32.js'; exports \u0026lt;cell-furo-fat-uint32\u0026gt; custom-element-definition extends /src/typerenderer/cell-furo-fat-int32.js superclass CellFuroFatInt32\n cell-furo-fat-uint32 The cell-furo-fat-uint32 component displays a FieldNode of type furo.fat.Uint32 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':12,'href':'/docs/typerenderer/cell-furo-fat-uint64/','title':"cell-furo-fat-uint64",'section':"typerenderer",'content':"cell-furo-fat-uint64 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-furo-fat-uint64.js'; exports \u0026lt;cell-furo-fat-uint64\u0026gt; custom-element-definition extends /src/typerenderer/cell-furo-fat-int64.js superclass CellFuroFatInt64\n cell-furo-fat-uint64 The cell-furo-fat-uint64 component displays a FieldNode of type furo.fat.uint64 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':13,'href':'/docs/typerenderer/cell-furo-integerproperty/','title':"cell-furo-integerproperty",'section':"typerenderer",'content':"cell-furo-integerproperty #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-furo-integerproperty.js'; exports CellFuroIntegerproperty js exports \u0026lt;cell-furo-integerproperty\u0026gt; custom-element-definition extends /src/typerenderer/cell-int32.js superclass CellInt32\n cell-furo-integerproperty The cell-furo-integerproperty component displays a FieldNode of type furo.Integerproperty in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':14,'href':'/docs/typerenderer/cell-furo-link/','title':"cell-furo-link",'section':"typerenderer",'content':"cell-furo-link #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-furo-link.js'; exports \u0026lt;cell-furo-link\u0026gt; custom-element-definition superclass LitElement\n cell-furo-link The cell-furo-link component displays a FieldNode of type furo.Link in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':15,'href':'/docs/typerenderer/cell-furo-numberproperty/','title':"cell-furo-numberproperty",'section':"typerenderer",'content':"cell-furo-numberproperty #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-furo-numberproperty.js'; exports CellFuroNumberproperty js exports \u0026lt;cell-furo-numberproperty\u0026gt; custom-element-definition extends /src/typerenderer/cell-furo-integerproperty.js superclass CellFuroIntegerproperty\n cell-furo-numberproperty The cell-furo-numberrproperty component displays a FieldNode of type furo.Numberproperty in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':16,'href':'/docs/typerenderer/cell-furo-property/','title':"cell-furo-property",'section':"typerenderer",'content':"cell-furo-property #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-furo-property.js'; exports CellFuroProperty js exports \u0026lt;cell-furo-property\u0026gt; custom-element-definition superclass LitElement mixes FBP\n cell-furo-property The cell-furo-property component displays a FieldNode of type furo.Property in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  noDataText #  noDataText string default: ''\nDefines the empty state display With a furo.Property type, the effective type is only known when the data is transmitted. Default: '' _typeResolved #  default: false\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the cell-furo-property is a simple proxy element to show the initial state if no data is available.\n fieldNode    "});index.add({'id':17,'href':'/docs/typerenderer/cell-furo-property-repeated/','title':"cell-furo-property-repeated",'section':"typerenderer",'content':"cell-furo-property-repeated #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-furo-property-repeated.js'; exports CellFuroPropertyRepeated js exports \u0026lt;cell-furo-property-repeated\u0026gt; custom-element-definition superclass LitElement mixes FBP\n cell-furo-property-repeats The cell-furo-property-repeats component displays a FieldNode of type furo.Property in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  elementList #  default: []\n\n_typeResolved #  default: false\n\nnoDataText #  noDataText \nDefines the empty state display With a furo.Property type, the effective type is only known when the data is transmitted. Default: '' Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the cell-furo-property-repeats is a simple proxy element to show the initial state if no data is available.\n fieldNode    _updateFieldList #  _updateFieldList() ⟹ void\n* → ƒ\u0026ndash;update-field-list\n\n"});index.add({'id':18,'href':'/docs/typerenderer/cell-furo-reference/','title':"cell-furo-reference",'section':"typerenderer",'content':"cell-furo-reference #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-furo-reference.js'; exports \u0026lt;cell-furo-reference\u0026gt; custom-element-definition superclass LitElement\n cell-furo-reference The cell-furo-reference component displays a FieldNode of type furo.Reference in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':19,'href':'/docs/typerenderer/cell-furo-stringoptionproperty/','title':"cell-furo-stringoptionproperty",'section':"typerenderer",'content':"cell-furo-stringoptionproperty #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-furo-stringoptionproperty.js'; exports CellFuroStringoptionproperty js exports \u0026lt;cell-furo-stringoptionproperty\u0026gt; custom-element-definition extends /src/typerenderer/cell-furo-stringproperty.js superclass CellFuroStringproperty\n cell-furo-stringoptionproperty The cell-furo-numberrproperty component displays a FieldNode of type furo.Stringoptionproperty in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':20,'href':'/docs/typerenderer/cell-furo-stringproperty/','title':"cell-furo-stringproperty",'section':"typerenderer",'content':"cell-furo-stringproperty #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-furo-stringproperty.js'; exports CellFuroStringproperty js exports \u0026lt;cell-furo-stringproperty\u0026gt; custom-element-definition extends /src/typerenderer/cell-string.js superclass CellString\n cell-furo-stringproperty The cell-furo-stringproperty component displays a FieldNode of type furo.Stringproperty in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':21,'href':'/docs/typerenderer/cell-furo-type-date/','title':"cell-furo-type-date",'section':"typerenderer",'content':"cell-furo-type-date #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-furo-type-date.js'; exports \u0026lt;cell-furo-type-date\u0026gt; custom-element-definition extends /src/typerenderer/cell-google-type-date.js superclass CellGoogleTypeDate\n cell-furo-type-date The cell-furo-type-date component displays a FieldNode of type furo.type.Date in read only mode.\nif the field display_name is set, the component will use that value for the display.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':22,'href':'/docs/typerenderer/cell-furo-type-money/','title':"cell-furo-type-money",'section':"typerenderer",'content':"cell-furo-type-money #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-furo-type-money.js'; exports \u0026lt;cell-furo-type-money\u0026gt; custom-element-definition extends /src/typerenderer/cell-google-type-money.js superclass CellGoogleTypeMoney\n cell-furo-type-money The cell-furo-type-money component displays a FieldNode of type furo.type.Money in read only mode.\nif the field display_name is set, the component will use that value for the display.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':23,'href':'/docs/typerenderer/cell-google-protobuf-any/','title':"cell-google-protobuf-any",'section':"typerenderer",'content':"cell-google-protobuf-any #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-google-protobuf-any.js'; exports \u0026lt;cell-google-protobuf-any\u0026gt; custom-element-definition superclass LitElement\n cell-google-protobuf-any The cell-google-protobuf-any component is a wrapper displays of type google.protobuf.Any in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  _typeResolved #  default: false\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the cell-google-protobuf-any is a simple proxy element to show the initial state if no data is available.\n fieldNode    "});index.add({'id':24,'href':'/docs/typerenderer/cell-google-protobuf-boolvalue/','title':"cell-google-protobuf-boolvalue",'section':"typerenderer",'content':"cell-google-protobuf-boolvalue #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-google-protobuf-boolvalue.js'; exports \u0026lt;cell-google-protobuf-boolvalue\u0026gt; custom-element-definition extends /src/typerenderer/cell-bool.js superclass CellBool\n cell-google-protobuf-boolvalue The cell-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.BoolValue in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode of type bool, furo.fat.Bool, google.wrapper.BoolValue   "});index.add({'id':25,'href':'/docs/typerenderer/cell-google-protobuf-doublevalue/','title':"cell-google-protobuf-doublevalue",'section':"typerenderer",'content':"cell-google-protobuf-doublevalue #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-google-protobuf-doublevalue.js'; exports \u0026lt;cell-google-protobuf-doublevalue\u0026gt; custom-element-definition extends /src/typerenderer/cell-double.js superclass CellDouble\n cell-double The cell-double component displays a FieldNode of type google.protobuf.DoubleValue in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':26,'href':'/docs/typerenderer/cell-google-protobuf-floatvalue/','title':"cell-google-protobuf-floatvalue",'section':"typerenderer",'content':"cell-google-protobuf-floatvalue #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-google-protobuf-floatvalue.js'; exports \u0026lt;cell-google-protobuf-floatvalue\u0026gt; custom-element-definition extends /src/typerenderer/cell-float.js superclass CellFloat\n cell-google-protobuf-floatvalue The cell-google-protobuf-floatvalue component displays a FieldNode of type google.protobuf.FloatValue in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  _displayValue #  default: ''\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':27,'href':'/docs/typerenderer/cell-google-protobuf-int32value/','title':"cell-google-protobuf-int32value",'section':"typerenderer",'content':"cell-google-protobuf-int32value #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-google-protobuf-int32value.js'; exports \u0026lt;cell-google-protobuf-int32value\u0026gt; custom-element-definition extends /src/typerenderer/cell-int32.js superclass CellInt32\n cell-google-protobuf-boolvalue The cell-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.BoolValue in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':28,'href':'/docs/typerenderer/cell-google-protobuf-int64value/','title':"cell-google-protobuf-int64value",'section':"typerenderer",'content':"cell-google-protobuf-int64value #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-google-protobuf-int64value.js'; exports \u0026lt;cell-google-protobuf-int64value\u0026gt; custom-element-definition extends /src/typerenderer/cell-int64.js superclass CellInt64\n cell-google-protobuf-boolvalue The cell-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.BoolValue in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':29,'href':'/docs/typerenderer/cell-google-protobuf-stringvalue/','title':"cell-google-protobuf-stringvalue",'section':"typerenderer",'content':"cell-google-protobuf-stringvalue #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-google-protobuf-stringvalue.js'; exports \u0026lt;cell-google-protobuf-stringvalue\u0026gt; custom-element-definition superclass LitElement\n cell-google-protobuf-stringvalue The cell-google-protobuf-stringvalue component displays a FieldNode of type google.protobuf.Stringvalue in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _updateValue #  _updateValue() ⟹ void\n* → ƒ\u0026ndash;update-value\n\n"});index.add({'id':30,'href':'/docs/typerenderer/cell-google-protobuf-timestamp/','title':"cell-google-protobuf-timestamp",'section':"typerenderer",'content':"cell-google-protobuf-timestamp #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-google-protobuf-timestamp.js'; exports \u0026lt;cell-google-protobuf-timestamp\u0026gt; custom-element-definition superclass LitElement\n cell-google-protobuf-timestamp The cell-google-protobuf-timestamp component displays a FieldNode of type google.prtobuf.Timestamp in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':31,'href':'/docs/typerenderer/cell-google-protobuf-uint32value/','title':"cell-google-protobuf-uint32value",'section':"typerenderer",'content':"cell-google-protobuf-uint32value #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-google-protobuf-uint32value.js'; exports \u0026lt;cell-google-protobuf-uint32value\u0026gt; custom-element-definition extends /src/typerenderer/cell-uint32.js superclass CellUint32\n cell-google-protobuf-boolvalue The cell-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.BoolValue in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':32,'href':'/docs/typerenderer/cell-google-protobuf-uint64value/','title':"cell-google-protobuf-uint64value",'section':"typerenderer",'content':"cell-google-protobuf-uint64value #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-google-protobuf-uint64value.js'; exports \u0026lt;cell-google-protobuf-uint64value\u0026gt; custom-element-definition extends /src/typerenderer/cell-uint64.js superclass CellUint64\n cell-google-protobuf-boolvalue The cell-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.BoolValue in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':33,'href':'/docs/typerenderer/cell-google-type-color/','title':"cell-google-type-color",'section':"typerenderer",'content':"cell-google-type-color #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-google-type-color.js'; exports \u0026lt;cell-google-type-color\u0026gt; custom-element-definition superclass LitElement\n cell-google-type-color The cell-google-type-color component displays a FieldNode of type google.type.Color in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  _red #  default: ''\n\n_green #  default: ''\n\n_blue #  default: ''\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':34,'href':'/docs/typerenderer/cell-google-type-date/','title':"cell-google-type-date",'section':"typerenderer",'content':"cell-google-type-date #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-google-type-date.js'; exports CellGoogleTypeDate js exports \u0026lt;cell-google-type-date\u0026gt; custom-element-definition superclass LitElement\n cell-google-type-date The cell-google-type-date component displays a FieldNode of type google.type.Date in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':35,'href':'/docs/typerenderer/cell-google-type-money/','title':"cell-google-type-money",'section':"typerenderer",'content':"cell-google-type-money #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-google-type-money.js'; exports CellGoogleTypeMoney js exports \u0026lt;cell-google-type-money\u0026gt; custom-element-definition superclass LitElement\n cell-google-type-money The cell-google-type-money component displays a FieldNode of type google.type.Money in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':36,'href':'/docs/typerenderer/cell-google-type-timeofday/','title':"cell-google-type-timeofday",'section':"typerenderer",'content':"cell-google-type-timeofday #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-google-type-timeofday.js'; exports \u0026lt;cell-google-type-timeofday\u0026gt; custom-element-definition superclass LitElement\n cell-google-type-timeofday The cell-google-type-timeofday component displays a FieldNode of type google.type.TimeOfDay in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':37,'href':'/docs/typerenderer/cell-int32/','title':"cell-int32",'section':"typerenderer",'content':"cell-int32 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-int32.js'; exports CellInt32 js exports \u0026lt;cell-int32\u0026gt; custom-element-definition superclass LitElement\n cell-int32 The cell-int32 component displays a FieldNode of type int32 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':38,'href':'/docs/typerenderer/cell-int64/','title':"cell-int64",'section':"typerenderer",'content':"cell-int64 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-int64.js'; exports CellInt64 js exports \u0026lt;cell-int64\u0026gt; custom-element-definition superclass LitElement\n cell-int64 The cell-int64 component displays a FieldNode of type int64 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':39,'href':'/docs/typerenderer/cell-string/','title':"cell-string",'section':"typerenderer",'content':"cell-string #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-string.js'; exports CellString js exports \u0026lt;cell-string\u0026gt; custom-element-definition superclass LitElement\n cell-string The cell-string component displays a FieldNode of type string in read only mode.\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':40,'href':'/docs/typerenderer/cell-uint32/','title':"cell-uint32",'section':"typerenderer",'content':"cell-uint32 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-uint32.js'; exports CellUint32 js exports \u0026lt;cell-uint32\u0026gt; custom-element-definition extends /src/typerenderer/cell-int32.js superclass CellInt32\n cell-uint32 The cell-uint32 component displays a FieldNode of type uint64 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':41,'href':'/docs/typerenderer/cell-uint64/','title':"cell-uint64",'section':"typerenderer",'content':"cell-uint64 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/cell-uint64.js'; exports CellUint64 js exports \u0026lt;cell-uint64\u0026gt; custom-element-definition extends /src/typerenderer/cell-int64.js superclass CellInt64\n cell-uint64 The cell-uint64 component displays a FieldNode of type uint64 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery cell-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':42,'href':'/docs/typerenderer/celledit-bool/','title':"celledit-bool",'section':"typerenderer",'content':"celledit-bool #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-bool.js'; exports CelleditBool js exports \u0026lt;celledit-bool\u0026gt; custom-element-definition extends /src/furo-ui5-checkbox-input.js superclass FuroUi5CheckboxInput\ncelledit renderer for bool\ncelledit-bool is a celledit context renderer.\nIt uses furo-ui5-checkbox-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':43,'href':'/docs/typerenderer/celledit-double/','title':"celledit-double",'section':"typerenderer",'content':"celledit-double #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-double.js'; exports CelleditDouble js exports \u0026lt;celledit-double\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\ncelledit renderer for double\ncelledit-double is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':44,'href':'/docs/typerenderer/celledit-float/','title':"celledit-float",'section':"typerenderer",'content':"celledit-float #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-float.js'; exports CelleditFloat js exports \u0026lt;celledit-float\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\ncelledit renderer for float\ncelledit-float is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':45,'href':'/docs/typerenderer/celledit-furo-fat-bool/','title':"celledit-furo-fat-bool",'section':"typerenderer",'content':"celledit-furo-fat-bool #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-furo-fat-bool.js'; exports \u0026lt;celledit-furo-fat-bool\u0026gt; custom-element-definition extends /src/typerenderer/celledit-bool.js superclass CelleditBool\ncelledit renderer for bool\ncelledit-furo-fat-bool is a celledit context renderer.\nIt uses furo-ui5-checkbox-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':46,'href':'/docs/typerenderer/celledit-furo-fat-double/','title':"celledit-furo-fat-double",'section':"typerenderer",'content':"celledit-furo-fat-double #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-furo-fat-double.js'; exports \u0026lt;celledit-furo-fat-double\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\ncelledit renderer for furo.fat.Double\ncelledit-furo-fat-double is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':47,'href':'/docs/typerenderer/celledit-furo-fat-float/','title':"celledit-furo-fat-float",'section':"typerenderer",'content':"celledit-furo-fat-float #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-furo-fat-float.js'; exports \u0026lt;celledit-furo-fat-float\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\ncelledit renderer for furo.fat.Float\ncelledit-furo-fat-float is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':48,'href':'/docs/typerenderer/celledit-furo-fat-int32/','title':"celledit-furo-fat-int32",'section':"typerenderer",'content':"celledit-furo-fat-int32 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-furo-fat-int32.js'; exports CelleditFuroFatInt32 js exports \u0026lt;celledit-furo-fat-int32\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\ncelledit renderer for furo.fat.Int32\ncelledit-furo-fat-int32 is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':49,'href':'/docs/typerenderer/celledit-furo-fat-int64/','title':"celledit-furo-fat-int64",'section':"typerenderer",'content':"celledit-furo-fat-int64 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-furo-fat-int64.js'; exports CelleditFuroFatInt64 js exports \u0026lt;celledit-furo-fat-int64\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\ncelledit renderer for furo.fat.Int64\ncelledit-furo-fat-int64 is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':50,'href':'/docs/typerenderer/celledit-furo-fat-string/','title':"celledit-furo-fat-string",'section':"typerenderer",'content':"celledit-furo-fat-string #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-furo-fat-string.js'; exports \u0026lt;celledit-furo-fat-string\u0026gt; custom-element-definition extends /src/typerenderer/celledit-string.js superclass CelleditString\n Attributes and Properties #  Methods #  "});index.add({'id':51,'href':'/docs/typerenderer/celledit-furo-fat-uint32/','title':"celledit-furo-fat-uint32",'section':"typerenderer",'content':"celledit-furo-fat-uint32 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-furo-fat-uint32.js'; exports \u0026lt;celledit-furo-fat-uint32\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\ncelledit renderer for furo.fat.Uint32\ncelledit-furo-fat-uint32 is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':52,'href':'/docs/typerenderer/celledit-furo-fat-uint64/','title':"celledit-furo-fat-uint64",'section':"typerenderer",'content':"celledit-furo-fat-uint64 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-furo-fat-uint64.js'; exports \u0026lt;celledit-furo-fat-uint64\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\ncelledit renderer for furo.fat.Uint64\ncelledit-furo-fat-uint64 is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':53,'href':'/docs/typerenderer/celledit-furo-integerproperty/','title':"celledit-furo-integerproperty",'section':"typerenderer",'content':"celledit-furo-integerproperty #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-furo-integerproperty.js'; exports \u0026lt;celledit-furo-integerproperty\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\ncelledit renderer for furo.Integerproperty\ncelledit-furo-integerproperty is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    "});index.add({'id':54,'href':'/docs/typerenderer/celledit-furo-link/','title':"celledit-furo-link",'section':"typerenderer",'content':"celledit-furo-link #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-furo-link.js'; exports \u0026lt;celledit-furo-link\u0026gt; custom-element-definition superclass LitElement\n celledit-furo-link The celledit-furo-link component displays a FieldNode of type furo.Link in read only mode.\nEvery celledit-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':55,'href':'/docs/typerenderer/celledit-furo-numberproperty/','title':"celledit-furo-numberproperty",'section':"typerenderer",'content':"celledit-furo-numberproperty #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-furo-numberproperty.js'; exports \u0026lt;celledit-furo-numberproperty\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\ncelledit renderer for furo.INumberproperty\ncelledit-furo-numberproperty is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    "});index.add({'id':56,'href':'/docs/typerenderer/celledit-furo-property/','title':"celledit-furo-property",'section':"typerenderer",'content':"celledit-furo-property #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-furo-property.js'; exports CelleditFuroProperty js exports \u0026lt;celledit-furo-property\u0026gt; custom-element-definition superclass LitElement mixes FBP\n celledit-furo-property The celledit-furo-property component displays a FieldNode of type furo.Property in read only mode.\nEvery celledit-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  noDataText #  noDataText string default: ''\nDefines the empty state display With a furo.Property type, the effective type is only known when the data is transmitted. Default: '' _typeResolved #  default: false\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the celledit-furo-property is a simple proxy element to show the initial state if no data is available.\n fieldNode    _warning #  _warning() ⟹ void\n* → ƒ\u0026ndash;warning\n\n"});index.add({'id':57,'href':'/docs/typerenderer/celledit-furo-property-repeated/','title':"celledit-furo-property-repeated",'section':"typerenderer",'content':"celledit-furo-property-repeated #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-furo-property-repeated.js'; exports CelleditFuroPropertyRepeated js exports \u0026lt;celledit-furo-property-repeated\u0026gt; custom-element-definition superclass LitElement mixes FBP\n celledit-furo-property-repeats The celledit-furo-property-repeats component displays a FieldNode of type furo.Property in read only mode.\nEvery celledit-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  elementList #  default: []\n\n_typeResolved #  default: false\n\nnoDataText #  noDataText \nDefines the empty state display With a furo.Property type, the effective type is only known when the data is transmitted. Default: '' Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the celledit-furo-property-repeats is a simple proxy element to show the initial state if no data is available.\n fieldNode    _updateFieldList #  _updateFieldList() ⟹ void\n* → ƒ\u0026ndash;update-field-list\n\n"});index.add({'id':58,'href':'/docs/typerenderer/celledit-furo-reference/','title':"celledit-furo-reference",'section':"typerenderer",'content':"celledit-furo-reference #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-furo-reference.js'; exports \u0026lt;celledit-furo-reference\u0026gt; custom-element-definition extends /src/furo-ui5-reference-search.js superclass FuroUi5ReferenceSearch\n Attributes and Properties #  Methods #  "});index.add({'id':59,'href':'/docs/typerenderer/celledit-furo-stringoptionproperty/','title':"celledit-furo-stringoptionproperty",'section':"typerenderer",'content':"celledit-furo-stringoptionproperty #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-furo-stringoptionproperty.js'; exports \u0026lt;celledit-furo-stringoptionproperty\u0026gt; custom-element-definition extends /src/furo-ui5-select.js superclass FuroUi5Select\n Attributes and Properties #  Methods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    "});index.add({'id':60,'href':'/docs/typerenderer/celledit-furo-stringproperty/','title':"celledit-furo-stringproperty",'section':"typerenderer",'content':"celledit-furo-stringproperty #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-furo-stringproperty.js'; exports \u0026lt;celledit-furo-stringproperty\u0026gt; custom-element-definition extends /src/typerenderer/celledit-string.js superclass CelleditString\n Attributes and Properties #  Methods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    "});index.add({'id':61,'href':'/docs/typerenderer/celledit-furo-type-date/','title':"celledit-furo-type-date",'section':"typerenderer",'content':"celledit-furo-type-date #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-furo-type-date.js'; exports \u0026lt;celledit-furo-type-date\u0026gt; custom-element-definition extends /src/furo-ui5-date-picker.js superclass FuroUi5DatePicker\n Attributes and Properties #  Methods #  "});index.add({'id':62,'href':'/docs/typerenderer/celledit-furo-type-money/','title':"celledit-furo-type-money",'section':"typerenderer",'content':"celledit-furo-type-money #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-furo-type-money.js'; exports \u0026lt;celledit-furo-type-money\u0026gt; custom-element-definition extends /src/furo-ui5-money-input.js superclass FuroUi5MoneyInput\n Attributes and Properties #  Methods #  "});index.add({'id':63,'href':'/docs/typerenderer/celledit-google-protobuf-any/','title':"celledit-google-protobuf-any",'section':"typerenderer",'content':"celledit-google-protobuf-any #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-google-protobuf-any.js'; exports \u0026lt;celledit-google-protobuf-any\u0026gt; custom-element-definition superclass LitElement\n celledit-google-protobuf-any The celledit-google-protobuf-any component is a wrapper displays of type google.protobuf.Any in read only mode.\nEvery celledit-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  _typeResolved #  default: false\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the celledit-google-protobuf-any is a simple proxy element to show the initial state if no data is available.\n fieldNode    "});index.add({'id':64,'href':'/docs/typerenderer/celledit-google-protobuf-boolvalue/','title':"celledit-google-protobuf-boolvalue",'section':"typerenderer",'content':"celledit-google-protobuf-boolvalue #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-google-protobuf-boolvalue.js'; exports \u0026lt;celledit-google-protobuf-boolvalue\u0026gt; custom-element-definition extends /src/typerenderer/celledit-bool.js superclass CelleditBool\ncelledit renderer for bool\ncelledit-google-protobuf-boolvalue is a celledit context renderer.\nIt uses furo-ui5-checkbox-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':65,'href':'/docs/typerenderer/celledit-google-protobuf-doublevalue/','title':"celledit-google-protobuf-doublevalue",'section':"typerenderer",'content':"celledit-google-protobuf-doublevalue #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-google-protobuf-doublevalue.js'; exports \u0026lt;celledit-google-protobuf-doublevalue\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\ncelledit renderer for google.protobuf.Double\ncelledit-google-protobuf-doublevalue is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':66,'href':'/docs/typerenderer/celledit-google-protobuf-floatvalue/','title':"celledit-google-protobuf-floatvalue",'section':"typerenderer",'content':"celledit-google-protobuf-floatvalue #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-google-protobuf-floatvalue.js'; exports \u0026lt;celledit-google-protobuf-floatvalue\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\ncelledit renderer for google.protobuf.Float\ncelledit-google-protobuf-floatvalue is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':67,'href':'/docs/typerenderer/celledit-google-protobuf-int32value/','title':"celledit-google-protobuf-int32value",'section':"typerenderer",'content':"celledit-google-protobuf-int32value #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-google-protobuf-int32value.js'; exports \u0026lt;celledit-google-protobuf-int32value\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\ncelledit renderer for google.protobuf.Int32value\ncelledit-google-protobuf-int32value is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':68,'href':'/docs/typerenderer/celledit-google-protobuf-int64value/','title':"celledit-google-protobuf-int64value",'section':"typerenderer",'content':"celledit-google-protobuf-int64value #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-google-protobuf-int64value.js'; exports \u0026lt;celledit-google-protobuf-int64value\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\ncelledit renderer for google.protobuf.Int64\ncelledit-google-protobuf-int64value is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':69,'href':'/docs/typerenderer/celledit-google-protobuf-stringvalue/','title':"celledit-google-protobuf-stringvalue",'section':"typerenderer",'content':"celledit-google-protobuf-stringvalue #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-google-protobuf-stringvalue.js'; exports \u0026lt;celledit-google-protobuf-stringvalue\u0026gt; custom-element-definition extends /src/typerenderer/celledit-string.js superclass CelleditString\n Attributes and Properties #  Methods #  "});index.add({'id':70,'href':'/docs/typerenderer/celledit-google-protobuf-timestamp/','title':"celledit-google-protobuf-timestamp",'section':"typerenderer",'content':"celledit-google-protobuf-timestamp #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-google-protobuf-timestamp.js'; exports \u0026lt;celledit-google-protobuf-timestamp\u0026gt; custom-element-definition extends /src/furo-ui5-date-time-picker.js superclass FuroUi5DateTimePicker\n Attributes and Properties #  Methods #  "});index.add({'id':71,'href':'/docs/typerenderer/celledit-google-protobuf-uint32value/','title':"celledit-google-protobuf-uint32value",'section':"typerenderer",'content':"celledit-google-protobuf-uint32value #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-google-protobuf-uint32value.js'; exports \u0026lt;celledit-google-protobuf-uint32value\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\ncelledit renderer for google.protobuf.Uint32value\ncelledit-google-protobuf-uint32value is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':72,'href':'/docs/typerenderer/celledit-google-protobuf-uint64value/','title':"celledit-google-protobuf-uint64value",'section':"typerenderer",'content':"celledit-google-protobuf-uint64value #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-google-protobuf-uint64value.js'; exports \u0026lt;celledit-google-protobuf-uint64value\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\ncelledit renderer for google.protobuf.Uint64value\ncelledit-google-protobuf-uint64value is a celledit context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':73,'href':'/docs/typerenderer/celledit-google-type-date/','title':"celledit-google-type-date",'section':"typerenderer",'content':"celledit-google-type-date #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-google-type-date.js'; exports \u0026lt;celledit-google-type-date\u0026gt; custom-element-definition extends /src/furo-ui5-date-picker.js superclass FuroUi5DatePicker\ncelledit renderer for google.type.Date\ncelledit-google-type-date is a celledit context renderer.\nIt uses furo-ui5-date-picker as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':74,'href':'/docs/typerenderer/celledit-google-type-money/','title':"celledit-google-type-money",'section':"typerenderer",'content':"celledit-google-type-money #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-google-type-money.js'; exports \u0026lt;celledit-google-type-money\u0026gt; custom-element-definition extends /src/furo-ui5-money-input.js superclass FuroUi5MoneyInput\ncelledit renderer for google.type.Money\ncelledit-google-type-money is a celledit context renderer.\nIt uses furo-ui5-money-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':75,'href':'/docs/typerenderer/celledit-google-type-timeofday/','title':"celledit-google-type-timeofday",'section':"typerenderer",'content':"celledit-google-type-timeofday #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-google-type-timeofday.js'; exports \u0026lt;celledit-google-type-timeofday\u0026gt; custom-element-definition extends /src/furo-ui5-time-picker.js superclass FuroUi5TimePicker\ncelledit renderer for google.type.TimeOfDay\ncelledit-google-type-timeofday is a celledit context renderer.\nIt uses furo-ui5-time-picker as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':76,'href':'/docs/typerenderer/celledit-int32/','title':"celledit-int32",'section':"typerenderer",'content':"celledit-int32 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-int32.js'; exports CelleditInt32 js exports \u0026lt;celledit-int32\u0026gt; custom-element-definition extends /src/furo-ui5-number-input.js superclass FuroUi5NumberInput\n Attributes and Properties #  Methods #  "});index.add({'id':77,'href':'/docs/typerenderer/celledit-int64/','title':"celledit-int64",'section':"typerenderer",'content':"celledit-int64 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-int64.js'; exports CelleditInt64 js exports \u0026lt;celledit-int64\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\n Attributes and Properties #  Methods #  "});index.add({'id':78,'href':'/docs/typerenderer/celledit-string/','title':"celledit-string",'section':"typerenderer",'content':"celledit-string #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-string.js'; exports CelleditString js exports \u0026lt;celledit-string\u0026gt; custom-element-definition extends /src/furo-ui5-text-input.js superclass FuroUi5TextInput\n Attributes and Properties #  Methods #  "});index.add({'id':79,'href':'/docs/typerenderer/celledit-uint32/','title':"celledit-uint32",'section':"typerenderer",'content':"celledit-uint32 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-uint32.js'; exports CelleditUint32 js exports \u0026lt;celledit-uint32\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\n Attributes and Properties #  Methods #  "});index.add({'id':80,'href':'/docs/typerenderer/celledit-uint64/','title':"celledit-uint64",'section':"typerenderer",'content':"celledit-uint64 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/celledit-uint64.js'; exports CelleditUint64 js exports \u0026lt;celledit-uint64\u0026gt; custom-element-definition extends /src/typerenderer/celledit-int32.js superclass CelleditInt32\n Attributes and Properties #  Methods #  "});index.add({'id':81,'href':'/docs/typerenderer/display-bool/','title':"display-bool",'section':"typerenderer",'content':"display-bool #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-bool.js'; exports DisplayBool js exports \u0026lt;display-bool\u0026gt; custom-element-definition superclass LitElement\n display-bool The display-bool component displays a FieldNode of type bool in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':82,'href':'/docs/typerenderer/display-double/','title':"display-double",'section':"typerenderer",'content':"display-double #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-double.js'; exports DisplayDouble js exports \u0026lt;display-double\u0026gt; custom-element-definition superclass LitElement\n display-double The display-double component displays a FieldNode of type double in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':83,'href':'/docs/typerenderer/display-float/','title':"display-float",'section':"typerenderer",'content':"display-float #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-float.js'; exports DisplayFloat js exports \u0026lt;display-float\u0026gt; custom-element-definition superclass LitElement\n display-float The display-float component displays a FieldNode of type float in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':84,'href':'/docs/typerenderer/display-furo-fat-bool/','title':"display-furo-fat-bool",'section':"typerenderer",'content':"display-furo-fat-bool #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-fat-bool.js'; exports \u0026lt;display-furo-fat-bool\u0026gt; custom-element-definition extends /src/typerenderer/display-bool.js superclass DisplayBool\n display-furo-fat-bool The display-furo-fat-bool component displays a FieldNode of type furo.fat.bool in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':85,'href':'/docs/typerenderer/display-furo-fat-double/','title':"display-furo-fat-double",'section':"typerenderer",'content':"display-furo-fat-double #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-fat-double.js'; exports \u0026lt;display-furo-fat-double\u0026gt; custom-element-definition extends /src/typerenderer/display-double.js superclass DisplayDouble\n display-furo-fat-double The display-furo-fat-double component displays a FieldNode of type furo.fat.Double in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':86,'href':'/docs/typerenderer/display-furo-fat-float/','title':"display-furo-fat-float",'section':"typerenderer",'content':"display-furo-fat-float #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-fat-float.js'; exports \u0026lt;display-furo-fat-float\u0026gt; custom-element-definition extends /src/typerenderer/display-float.js superclass DisplayFloat\n display-furo-fat-float The display-furo-fat-float component displays a FieldNode of type furo.fat.Float in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':87,'href':'/docs/typerenderer/display-furo-fat-int32/','title':"display-furo-fat-int32",'section':"typerenderer",'content':"display-furo-fat-int32 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-fat-int32.js'; exports DisplayFuroFatInt32 js exports \u0026lt;display-furo-fat-int32\u0026gt; custom-element-definition extends /src/typerenderer/display-int32.js superclass DisplayInt32\n display-int32 The display-int32 component displays a FieldNode of type furo.fat.Int32 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':88,'href':'/docs/typerenderer/display-furo-fat-int64/','title':"display-furo-fat-int64",'section':"typerenderer",'content':"display-furo-fat-int64 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-fat-int64.js'; exports DisplayFuroFatInt64 js exports \u0026lt;display-furo-fat-int64\u0026gt; custom-element-definition extends /src/typerenderer/display-furo-fat-int32.js superclass DisplayFuroFatInt32\n display-furo-fat-int64 The display-furo-fat-int64 component displays a FieldNode of type furo.fat.int64 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':89,'href':'/docs/typerenderer/display-furo-fat-string/','title':"display-furo-fat-string",'section':"typerenderer",'content':"display-furo-fat-string #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-fat-string.js'; exports \u0026lt;display-furo-fat-string\u0026gt; custom-element-definition superclass LitElement\n display-furo-fat-string The display-furo-fat-string component displays a FieldNode of type furo.fat.String in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _updateMeta #  _updateMeta() ⟹ void\n* → ƒ\u0026ndash;update-meta\n\n_formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':90,'href':'/docs/typerenderer/display-furo-fat-uint32/','title':"display-furo-fat-uint32",'section':"typerenderer",'content':"display-furo-fat-uint32 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-fat-uint32.js'; exports \u0026lt;display-furo-fat-uint32\u0026gt; custom-element-definition extends /src/typerenderer/display-furo-fat-int32.js superclass DisplayFuroFatInt32\n display-furo-fat-uint32 The display-furo-fat-uint32 component displays a FieldNode of type furo.fat.Uint32 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':91,'href':'/docs/typerenderer/display-furo-fat-uint64/','title':"display-furo-fat-uint64",'section':"typerenderer",'content':"display-furo-fat-uint64 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-fat-uint64.js'; exports \u0026lt;display-furo-fat-uint64\u0026gt; custom-element-definition extends /src/typerenderer/display-furo-fat-int64.js superclass DisplayFuroFatInt64\n display-furo-fat-uint64 The display-furo-fat-uint64 component displays a FieldNode of type furo.fat.uint64 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':92,'href':'/docs/typerenderer/display-furo-integerproperty/','title':"display-furo-integerproperty",'section':"typerenderer",'content':"display-furo-integerproperty #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-integerproperty.js'; exports DisplayFuroIntegerproperty js exports \u0026lt;display-furo-integerproperty\u0026gt; custom-element-definition extends /src/typerenderer/display-int32.js superclass DisplayInt32\n display-furo-integerproperty The display-furo-integerproperty component displays a FieldNode of type furo.Integerproperty in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':93,'href':'/docs/typerenderer/display-furo-link/','title':"display-furo-link",'section':"typerenderer",'content':"display-furo-link #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-link.js'; exports \u0026lt;display-furo-link\u0026gt; custom-element-definition superclass LitElement\n display-furo-link The display-furo-link component displays a FieldNode of type furo.Link in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':94,'href':'/docs/typerenderer/display-furo-numberproperty/','title':"display-furo-numberproperty",'section':"typerenderer",'content':"display-furo-numberproperty #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-numberproperty.js'; exports DisplayFuroNumberproperty js exports \u0026lt;display-furo-numberproperty\u0026gt; custom-element-definition extends /src/typerenderer/display-furo-integerproperty.js superclass DisplayFuroIntegerproperty\n display-furo-numberproperty The display-furo-numberrproperty component displays a FieldNode of type furo.Numberproperty in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':95,'href':'/docs/typerenderer/display-furo-property/','title':"display-furo-property",'section':"typerenderer",'content':"display-furo-property #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-property.js'; exports DisplayFuroProperty js exports \u0026lt;display-furo-property\u0026gt; custom-element-definition superclass LitElement mixes FBP\n display-furo-property The display-furo-property component displays a FieldNode of type furo.Property in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  noDataText #  noDataText string default: ''\nDefines the empty state display With a furo.Property type, the effective type is only known when the data is transmitted. Default: '' _typeResolved #  default: false\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the display-furo-property is a simple proxy element to show the initial state if no data is available.\n fieldNode    "});index.add({'id':96,'href':'/docs/typerenderer/display-furo-property-repeated/','title':"display-furo-property-repeated",'section':"typerenderer",'content':"display-furo-property-repeated #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-property-repeated.js'; exports DisplayFuroPropertyRepeated js exports \u0026lt;display-furo-property-repeated\u0026gt; custom-element-definition superclass LitElement mixes FBP\n display-furo-property-repeats The display-furo-property-repeats component displays a FieldNode of type furo.Property in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  elementList #  default: []\n\n_typeResolved #  default: false\n\nnoDataText #  noDataText \nDefines the empty state display With a furo.Property type, the effective type is only known when the data is transmitted. Default: '' Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the display-furo-property-repeats is a simple proxy element to show the initial state if no data is available.\n fieldNode    _updateFieldList #  _updateFieldList() ⟹ void\n* → ƒ\u0026ndash;update-field-list\n\n"});index.add({'id':97,'href':'/docs/typerenderer/display-furo-property-repeats-labeled/','title':"display-furo-property-repeats-labeled",'section':"typerenderer",'content':"display-furo-property-repeats-labeled #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-property-repeats-labeled.js'; exports DisplayFuroPropertyRepeatsLabeled js exports \u0026lt;display-furo-property-repeats-labeled\u0026gt; custom-element-definition extends /src/typerenderer/display-furo-property-repeated.js superclass DisplayFuroPropertyRepeated\n display-furo-property-repeats-labeled The display-furo-property-repeats-labeled component displays a RepeaterNode of type furo.Property in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  elementList #  default: []\n\n_typeResolved #  default: false\n\nnoDataText #  noDataText \nDefines the empty state display With a furo.Property type, the effective type is only known when the data is transmitted. Default: '' Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the display-furo-property-repeats is a simple proxy element to show the initial state if no data is available.\n fieldNode    "});index.add({'id':98,'href':'/docs/typerenderer/display-furo-reference/','title':"display-furo-reference",'section':"typerenderer",'content':"display-furo-reference #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-reference.js'; exports \u0026lt;display-furo-reference\u0026gt; custom-element-definition superclass LitElement\n display-furo-reference The display-furo-reference component displays a FieldNode of type furo.Reference in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':99,'href':'/docs/typerenderer/display-furo-stringoptionproperty/','title':"display-furo-stringoptionproperty",'section':"typerenderer",'content':"display-furo-stringoptionproperty #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-stringoptionproperty.js'; exports DisplayFuroStringoptionproperty js exports \u0026lt;display-furo-stringoptionproperty\u0026gt; custom-element-definition extends /src/typerenderer/display-furo-stringproperty.js superclass DisplayFuroStringproperty\n display-furo-stringoptionproperty The display-furo-numberrproperty component displays a FieldNode of type furo.Stringoptionproperty in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':100,'href':'/docs/typerenderer/display-furo-stringproperty/','title':"display-furo-stringproperty",'section':"typerenderer",'content':"display-furo-stringproperty #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-stringproperty.js'; exports DisplayFuroStringproperty js exports \u0026lt;display-furo-stringproperty\u0026gt; custom-element-definition extends /src/typerenderer/display-string.js superclass DisplayString\n display-furo-stringproperty The display-furo-stringproperty component displays a FieldNode of type furo.Stringproperty in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':101,'href':'/docs/typerenderer/display-furo-type-date/','title':"display-furo-type-date",'section':"typerenderer",'content':"display-furo-type-date #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-type-date.js'; exports \u0026lt;display-furo-type-date\u0026gt; custom-element-definition extends /src/typerenderer/display-google-type-date.js superclass DisplayGoogleTypeDate\n display-furo-type-date The display-furo-type-date component displays a FieldNode of type furo.type.Date in read only mode.\nif the field display_name is set, the component will use that value for the display.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':102,'href':'/docs/typerenderer/display-furo-type-money/','title':"display-furo-type-money",'section':"typerenderer",'content':"display-furo-type-money #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-furo-type-money.js'; exports \u0026lt;display-furo-type-money\u0026gt; custom-element-definition extends /src/typerenderer/display-google-type-money.js superclass DisplayGoogleTypeMoney\n display-furo-type-money The display-furo-type-money component displays a FieldNode of type furo.type.Money in read only mode.\nif the field display_name is set, the component will use that value for the display.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\nbindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':103,'href':'/docs/typerenderer/display-google-protobuf-any/','title':"display-google-protobuf-any",'section':"typerenderer",'content':"display-google-protobuf-any #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-google-protobuf-any.js'; exports \u0026lt;display-google-protobuf-any\u0026gt; custom-element-definition superclass LitElement\n display-google-protobuf-any The display-google-protobuf-any component is a wrapper displays of type google.protobuf.Any in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  _typeResolved #  default: false\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component the display-google-protobuf-any is a simple proxy element to show the initial state if no data is available.\n fieldNode    "});index.add({'id':104,'href':'/docs/typerenderer/display-google-protobuf-boolvalue/','title':"display-google-protobuf-boolvalue",'section':"typerenderer",'content':"display-google-protobuf-boolvalue #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-google-protobuf-boolvalue.js'; exports \u0026lt;display-google-protobuf-boolvalue\u0026gt; custom-element-definition extends /src/typerenderer/display-bool.js superclass DisplayBool\n display-google-protobuf-boolvalue The display-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.BoolValue in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':105,'href':'/docs/typerenderer/display-google-protobuf-doublevalue/','title':"display-google-protobuf-doublevalue",'section':"typerenderer",'content':"display-google-protobuf-doublevalue #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-google-protobuf-doublevalue.js'; exports \u0026lt;display-google-protobuf-doublevalue\u0026gt; custom-element-definition extends /src/typerenderer/display-double.js superclass DisplayDouble\n display-double The display-double component displays a FieldNode of type google.protobuf.DoubleValue in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':106,'href':'/docs/typerenderer/display-google-protobuf-floatvalue/','title':"display-google-protobuf-floatvalue",'section':"typerenderer",'content':"display-google-protobuf-floatvalue #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-google-protobuf-floatvalue.js'; exports \u0026lt;display-google-protobuf-floatvalue\u0026gt; custom-element-definition extends /src/typerenderer/display-float.js superclass DisplayFloat\n display-google-protobuf-floatvalue The display-google-protobuf-floatvalue component displays a FieldNode of type google.protobuf.FloatValue in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':107,'href':'/docs/typerenderer/display-google-protobuf-int32value/','title':"display-google-protobuf-int32value",'section':"typerenderer",'content':"display-google-protobuf-int32value #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-google-protobuf-int32value.js'; exports \u0026lt;display-google-protobuf-int32value\u0026gt; custom-element-definition extends /src/typerenderer/display-int32.js superclass DisplayInt32\n display-google-protobuf-boolvalue The display-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.BoolValue in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':108,'href':'/docs/typerenderer/display-google-protobuf-int64value/','title':"display-google-protobuf-int64value",'section':"typerenderer",'content':"display-google-protobuf-int64value #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-google-protobuf-int64value.js'; exports \u0026lt;display-google-protobuf-int64value\u0026gt; custom-element-definition extends /src/typerenderer/display-int64.js superclass DisplayInt64\n display-google-protobuf-boolvalue The display-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.BoolValue in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':109,'href':'/docs/typerenderer/display-google-protobuf-stringvalue/','title':"display-google-protobuf-stringvalue",'section':"typerenderer",'content':"display-google-protobuf-stringvalue #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-google-protobuf-stringvalue.js'; exports \u0026lt;display-google-protobuf-stringvalue\u0026gt; custom-element-definition extends /src/typerenderer/display-string.js superclass DisplayString\n display-google-protobuf-stringvalue The display-google-protobuf-stringvalue component displays a FieldNode of type google.protobuf.Stringvalue in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':110,'href':'/docs/typerenderer/display-google-protobuf-timestamp/','title':"display-google-protobuf-timestamp",'section':"typerenderer",'content':"display-google-protobuf-timestamp #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-google-protobuf-timestamp.js'; exports \u0026lt;display-google-protobuf-timestamp\u0026gt; custom-element-definition superclass LitElement\n display-google-protobuf-timestamp The display-google-protobuf-timestamp component displays a FieldNode of type google.prtobuf.Timestamp in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':111,'href':'/docs/typerenderer/display-google-protobuf-uint32value/','title':"display-google-protobuf-uint32value",'section':"typerenderer",'content':"display-google-protobuf-uint32value #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-google-protobuf-uint32value.js'; exports \u0026lt;display-google-protobuf-uint32value\u0026gt; custom-element-definition extends /src/typerenderer/display-uint32.js superclass DisplayUint32\n display-google-protobuf-boolvalue The display-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.BoolValue in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':112,'href':'/docs/typerenderer/display-google-protobuf-uint64value/','title':"display-google-protobuf-uint64value",'section':"typerenderer",'content':"display-google-protobuf-uint64value #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-google-protobuf-uint64value.js'; exports \u0026lt;display-google-protobuf-uint64value\u0026gt; custom-element-definition extends /src/typerenderer/display-uint64.js superclass DisplayUint64\n display-google-protobuf-boolvalue The display-google-protobuf-boolvalue component displays a FieldNode of type google.protobuf.BoolValue in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':113,'href':'/docs/typerenderer/display-google-type-color/','title':"display-google-type-color",'section':"typerenderer",'content':"display-google-type-color #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-google-type-color.js'; exports \u0026lt;display-google-type-color\u0026gt; custom-element-definition superclass LitElement\n display-google-type-color The display-google-type-color component displays a FieldNode of type google.type.Color in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  _red #  default: ''\n\n_green #  default: ''\n\n_blue #  default: ''\n\nMethods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':114,'href':'/docs/typerenderer/display-google-type-date/','title':"display-google-type-date",'section':"typerenderer",'content':"display-google-type-date #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-google-type-date.js'; exports DisplayGoogleTypeDate js exports \u0026lt;display-google-type-date\u0026gt; custom-element-definition superclass LitElement\n display-google-type-date The display-google-type-date component displays a FieldNode of type google.type.Date in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':115,'href':'/docs/typerenderer/display-google-type-money/','title':"display-google-type-money",'section':"typerenderer",'content':"display-google-type-money #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-google-type-money.js'; exports DisplayGoogleTypeMoney js exports \u0026lt;display-google-type-money\u0026gt; custom-element-definition superclass LitElement\n display-google-type-money The display-google-type-money component displays a FieldNode of type google.type.Money in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':116,'href':'/docs/typerenderer/display-google-type-timeofday/','title':"display-google-type-timeofday",'section':"typerenderer",'content':"display-google-type-timeofday #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-google-type-timeofday.js'; exports \u0026lt;display-google-type-timeofday\u0026gt; custom-element-definition superclass LitElement\n display-google-type-timeofday The display-google-type-timeofday component displays a FieldNode of type google.type.TimeOfDay in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':117,'href':'/docs/typerenderer/display-int32/','title':"display-int32",'section':"typerenderer",'content':"display-int32 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-int32.js'; exports DisplayInt32 js exports \u0026lt;display-int32\u0026gt; custom-element-definition superclass LitElement\n display-int32 The display-int32 component displays a FieldNode of type int32 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':118,'href':'/docs/typerenderer/display-int64/','title':"display-int64",'section':"typerenderer",'content':"display-int64 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-int64.js'; exports DisplayInt64 js exports \u0026lt;display-int64\u0026gt; custom-element-definition superclass LitElement\n display-int64 The display-int64 component displays a FieldNode of type int64 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':119,'href':'/docs/typerenderer/display-string/','title':"display-string",'section':"typerenderer",'content':"display-string #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-string.js'; exports DisplayString js exports \u0026lt;display-string\u0026gt; custom-element-definition superclass LitElement\n display-string The display-string component displays a FieldNode of type string in read only mode.\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    "});index.add({'id':120,'href':'/docs/typerenderer/display-uint32/','title':"display-uint32",'section':"typerenderer",'content':"display-uint32 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-uint32.js'; exports DisplayUint32 js exports \u0026lt;display-uint32\u0026gt; custom-element-definition extends /src/typerenderer/display-int32.js superclass DisplayInt32\n display-uint32 The display-uint32 component displays a FieldNode of type uint64 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':121,'href':'/docs/typerenderer/display-uint64/','title':"display-uint64",'section':"typerenderer",'content':"display-uint64 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/display-uint64.js'; exports DisplayUint64 js exports \u0026lt;display-uint64\u0026gt; custom-element-definition extends /src/typerenderer/display-int64.js superclass DisplayInt64\n display-uint64 The display-uint64 component displays a FieldNode of type uint64 in read only mode.\nThe component uses locale from the environment to display the date value accordingly. https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\nEvery display-xxx component should implement the following API:\n function: bindData(fieldNode){\u0026hellip;}  Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a field node to the component\n fieldNode    _formatDisplay #  _formatDisplay() ⟹ void\n* → ƒ\u0026ndash;format-display\n\n"});index.add({'id':122,'href':'/docs/typerenderer/form-bool/','title':"form-bool",'section':"typerenderer",'content':"form-bool #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-bool.js'; exports FormBool js exports \u0026lt;form-bool\u0026gt; custom-element-definition extends /src/furo-ui5-checkbox-input-labeled.js superclass FuroUi5CheckboxInputLabeled\nform renderer for bool\nform-bool is a form context renderer.\nIt uses furo-ui5-checkbox-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':123,'href':'/docs/typerenderer/form-double/','title':"form-double",'section':"typerenderer",'content':"form-double #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-double.js'; exports FormDouble js exports \u0026lt;form-double\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Attributes and Properties #  Methods #  "});index.add({'id':124,'href':'/docs/typerenderer/form-float/','title':"form-float",'section':"typerenderer",'content':"form-float #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-float.js'; exports FormFloat js exports \u0026lt;form-float\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Attributes and Properties #  Methods #  "});index.add({'id':125,'href':'/docs/typerenderer/form-furo-fat-bool/','title':"form-furo-fat-bool",'section':"typerenderer",'content':"form-furo-fat-bool #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-furo-fat-bool.js'; exports \u0026lt;form-furo-fat-bool\u0026gt; custom-element-definition extends /src/typerenderer/form-bool.js superclass FormBool\nform renderer for bool\nform-furo-fat-bool is a form context renderer.\nIt uses furo-ui5-checkbox-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':126,'href':'/docs/typerenderer/form-furo-fat-double/','title':"form-furo-fat-double",'section':"typerenderer",'content':"form-furo-fat-double #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-furo-fat-double.js'; exports \u0026lt;form-furo-fat-double\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\nform renderer for furo.fat.Double\nform-furo-fat-double is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':127,'href':'/docs/typerenderer/form-furo-fat-float/','title':"form-furo-fat-float",'section':"typerenderer",'content':"form-furo-fat-float #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-furo-fat-float.js'; exports \u0026lt;form-furo-fat-float\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\nform renderer for furo.fat.Float\nform-furo-fat-float is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':128,'href':'/docs/typerenderer/form-furo-fat-int32/','title':"form-furo-fat-int32",'section':"typerenderer",'content':"form-furo-fat-int32 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-furo-fat-int32.js'; exports FormFuroFatInt32 js exports \u0026lt;form-furo-fat-int32\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\nform renderer for furo.fat.Int32\nform-furo-fat-int32 is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':129,'href':'/docs/typerenderer/form-furo-fat-int64/','title':"form-furo-fat-int64",'section':"typerenderer",'content':"form-furo-fat-int64 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-furo-fat-int64.js'; exports FormFuroFatInt64 js exports \u0026lt;form-furo-fat-int64\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\nform renderer for furo.fat.Int64\nform-furo-fat-int64 is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':130,'href':'/docs/typerenderer/form-furo-fat-string/','title':"form-furo-fat-string",'section':"typerenderer",'content':"form-furo-fat-string #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-furo-fat-string.js'; exports \u0026lt;form-furo-fat-string\u0026gt; custom-element-definition extends /src/furo-ui5-text-input-labeled.js superclass FuroUi5TextInputLabeled\n Attributes and Properties #  Methods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    "});index.add({'id':131,'href':'/docs/typerenderer/form-furo-fat-uint32/','title':"form-furo-fat-uint32",'section':"typerenderer",'content':"form-furo-fat-uint32 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-furo-fat-uint32.js'; exports \u0026lt;form-furo-fat-uint32\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\nform renderer for furo.fat.Uint32\nform-furo-fat-uint32 is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':132,'href':'/docs/typerenderer/form-furo-fat-uint64/','title':"form-furo-fat-uint64",'section':"typerenderer",'content':"form-furo-fat-uint64 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-furo-fat-uint64.js'; exports \u0026lt;form-furo-fat-uint64\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\nform renderer for furo.fat.Uint64\nform-furo-fat-uint64 is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':133,'href':'/docs/typerenderer/form-furo-integerproperty/','title':"form-furo-integerproperty",'section':"typerenderer",'content':"form-furo-integerproperty #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-furo-integerproperty.js'; exports \u0026lt;form-furo-integerproperty\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\nform renderer for furo.Integerproperty\nform-furo-integerproperty is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    "});index.add({'id':134,'href':'/docs/typerenderer/form-furo-numberproperty/','title':"form-furo-numberproperty",'section':"typerenderer",'content':"form-furo-numberproperty #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-furo-numberproperty.js'; exports \u0026lt;form-furo-numberproperty\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\nform renderer for furo.Integerproperty\nform-furo-integerproperty is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    "});index.add({'id':135,'href':'/docs/typerenderer/form-furo-reference/','title':"form-furo-reference",'section':"typerenderer",'content':"form-furo-reference #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-furo-reference.js'; exports \u0026lt;form-furo-reference\u0026gt; custom-element-definition extends /src/furo-ui5-reference-search-labeled.js superclass FuroUi5ReferenceSearchLabeled\n Attributes and Properties #  Methods #  "});index.add({'id':136,'href':'/docs/typerenderer/form-furo-stringoptionproperty/','title':"form-furo-stringoptionproperty",'section':"typerenderer",'content':"form-furo-stringoptionproperty #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-furo-stringoptionproperty.js'; exports \u0026lt;form-furo-stringoptionproperty\u0026gt; custom-element-definition extends /src/furo-ui5-select-labeled.js superclass FuroUi5SelectLabeled\n Attributes and Properties #  Methods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    "});index.add({'id':137,'href':'/docs/typerenderer/form-furo-stringproperty/','title':"form-furo-stringproperty",'section':"typerenderer",'content':"form-furo-stringproperty #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-furo-stringproperty.js'; exports FormFuroStringproperty js exports \u0026lt;form-furo-stringproperty\u0026gt; custom-element-definition extends /src/furo-ui5-text-input-labeled.js superclass FuroUi5TextInputLabeled\n Attributes and Properties #  Methods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    "});index.add({'id':138,'href':'/docs/typerenderer/form-furo-type-date/','title':"form-furo-type-date",'section':"typerenderer",'content':"form-furo-type-date #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-furo-type-date.js'; exports \u0026lt;form-furo-type-date\u0026gt; custom-element-definition extends /src/furo-ui5-date-picker-labeled.js superclass FuroUi5DatePickerLabeled\n Attributes and Properties #  Methods #  "});index.add({'id':139,'href':'/docs/typerenderer/form-furo-type-money/','title':"form-furo-type-money",'section':"typerenderer",'content':"form-furo-type-money #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-furo-type-money.js'; exports \u0026lt;form-furo-type-money\u0026gt; custom-element-definition extends /src/furo-ui5-money-input-labeled.js superclass FuroUi5MoneyInputLabeled\n Attributes and Properties #  Methods #  "});index.add({'id':140,'href':'/docs/typerenderer/form-google-protobuf-boolvalue/','title':"form-google-protobuf-boolvalue",'section':"typerenderer",'content':"form-google-protobuf-boolvalue #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-google-protobuf-boolvalue.js'; exports \u0026lt;form-google-protobuf-boolvalue\u0026gt; custom-element-definition extends /src/typerenderer/form-bool.js superclass FormBool\nform renderer for bool\nform-google-protobuf-boolvalue is a form context renderer.\nIt uses furo-ui5-checkbox-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':141,'href':'/docs/typerenderer/form-google-protobuf-doublevalue/','title':"form-google-protobuf-doublevalue",'section':"typerenderer",'content':"form-google-protobuf-doublevalue #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-google-protobuf-doublevalue.js'; exports \u0026lt;form-google-protobuf-doublevalue\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\nform renderer for google.protobuf.Double\nform-google-protobuf-doublevalue is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':142,'href':'/docs/typerenderer/form-google-protobuf-floatvalue/','title':"form-google-protobuf-floatvalue",'section':"typerenderer",'content':"form-google-protobuf-floatvalue #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-google-protobuf-floatvalue.js'; exports \u0026lt;form-google-protobuf-floatvalue\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\nform renderer for google.protobuf.Float\nform-google-protobuf-floatvalue is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':143,'href':'/docs/typerenderer/form-google-protobuf-int32value/','title':"form-google-protobuf-int32value",'section':"typerenderer",'content':"form-google-protobuf-int32value #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-google-protobuf-int32value.js'; exports \u0026lt;form-google-protobuf-int32value\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\nform renderer for google.protobuf.Int32value\nform-google-protobuf-int32value is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':144,'href':'/docs/typerenderer/form-google-protobuf-int64value/','title':"form-google-protobuf-int64value",'section':"typerenderer",'content':"form-google-protobuf-int64value #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-google-protobuf-int64value.js'; exports \u0026lt;form-google-protobuf-int64value\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\nform renderer for google.protobuf.Int64\nform-google-protobuf-int64value is a form context renderer.\nIt uses furo-ui5-number-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':145,'href':'/docs/typerenderer/form-google-protobuf-stringvalue/','title':"form-google-protobuf-stringvalue",'section':"typerenderer",'content':"form-google-protobuf-stringvalue #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-google-protobuf-stringvalue.js'; exports \u0026lt;form-google-protobuf-stringvalue\u0026gt; custom-element-definition extends /src/furo-ui5-text-input-labeled.js superclass FuroUi5TextInputLabeled\n Attributes and Properties #  Methods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    "});index.add({'id':146,'href':'/docs/typerenderer/form-google-protobuf-timestamp/','title':"form-google-protobuf-timestamp",'section':"typerenderer",'content':"form-google-protobuf-timestamp #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-google-protobuf-timestamp.js'; exports \u0026lt;form-google-protobuf-timestamp\u0026gt; custom-element-definition extends /src/furo-ui5-date-time-picker-labeled.js superclass FuroUi5DateTimePickerLabeled\n Attributes and Properties #  Methods #  "});index.add({'id':147,'href':'/docs/typerenderer/form-google-type-date/','title':"form-google-type-date",'section':"typerenderer",'content':"form-google-type-date #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-google-type-date.js'; exports \u0026lt;form-google-type-date\u0026gt; custom-element-definition extends /src/furo-ui5-date-picker-labeled.js superclass FuroUi5DatePickerLabeled\nform renderer for google.type.Date\nform-google-type-date is a form context renderer.\nIt uses furo-ui5-date-picker as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':148,'href':'/docs/typerenderer/form-google-type-money/','title':"form-google-type-money",'section':"typerenderer",'content':"form-google-type-money #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-google-type-money.js'; exports \u0026lt;form-google-type-money\u0026gt; custom-element-definition extends /src/furo-ui5-money-input-labeled.js superclass FuroUi5MoneyInputLabeled\nform renderer for google.type.Money\nform-google-type-money is a form context renderer.\nIt uses furo-ui5-money-input as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':149,'href':'/docs/typerenderer/form-google-type-timeofday/','title':"form-google-type-timeofday",'section':"typerenderer",'content':"form-google-type-timeofday #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-google-type-timeofday.js'; exports \u0026lt;form-google-type-timeofday\u0026gt; custom-element-definition extends /src/furo-ui5-time-picker-labeled.js superclass FuroUi5TimePickerLabeled\nform renderer for google.type.TimeOfDay\nform-google-type-timeofday is a form context renderer.\nIt uses furo-ui5-time-picker as the renderer\nAttributes and Properties #  Methods #  "});index.add({'id':150,'href':'/docs/typerenderer/form-int32/','title':"form-int32",'section':"typerenderer",'content':"form-int32 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-int32.js'; exports FormInt32 js exports \u0026lt;form-int32\u0026gt; custom-element-definition extends /src/furo-ui5-number-input-labeled.js superclass FuroUi5NumberInputLabeled\n Attributes and Properties #  Methods #  "});index.add({'id':151,'href':'/docs/typerenderer/form-int64/','title':"form-int64",'section':"typerenderer",'content':"form-int64 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-int64.js'; exports FormInt64 js exports \u0026lt;form-int64\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Attributes and Properties #  Methods #  "});index.add({'id':152,'href':'/docs/typerenderer/form-string/','title':"form-string",'section':"typerenderer",'content':"form-string #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-string.js'; exports FormString js exports \u0026lt;form-string\u0026gt; custom-element-definition extends /src/furo-ui5-text-input-labeled.js superclass FuroUi5TextInputLabeled\n Attributes and Properties #  Methods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    "});index.add({'id':153,'href':'/docs/typerenderer/form-uint32/','title':"form-uint32",'section':"typerenderer",'content':"form-uint32 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-uint32.js'; exports FormUint32 js exports \u0026lt;form-uint32\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Attributes and Properties #  Methods #  "});index.add({'id':154,'href':'/docs/typerenderer/form-uint64/','title':"form-uint64",'section':"typerenderer",'content':"form-uint64 #  @furo/typerenderer v1.0.0-alpha.2 import '@furo/typerenderer/src/form-uint64.js'; exports FormUint64 js exports \u0026lt;form-uint64\u0026gt; custom-element-definition extends /src/typerenderer/form-int32.js superclass FormInt32\n Attributes and Properties #  Methods #  "});index.add({'id':155,'href':'/docs/components/furo-chart-display/','title':"furo-chart-display",'section':"components",'content':"furo-chart-display #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-chart-display.js'; exports \u0026lt;furo-chart-display\u0026gt; custom-element-definition superclass LitElement mixes FBP\nDisplay charts with data objects\nfuro-chart-display Component to display charts with apex the apex charts lib (https://github.com/apexcharts/apexcharts.js).\nUse furo-data-chart-binder to connect your data.\n1 2 3 4 5 6 7  \u0026lt;furo-chart-display chart-type=\u0026#34;bar\u0026#34;\u0026gt; \u0026lt;furo-data-chart-binder ƒ-bind-data=\u0026#34;--projectDAO(*.entities)\u0026#34; data-field=\u0026#34;data.cost_limit.units\u0026#34; category-field=\u0026#34;data.description\u0026#34; \u0026gt;\u0026lt;/furo-data-chart-binder\u0026gt; \u0026lt;/furo-chart-display\u0026gt;   Attributes and Properties #  sparkline #  sparkline \nHides all elements of the chart other than the primary graphic. Use this to visualize data in very small areas. xaxisTitle #  xaxis-title \nGive the x-axis a title which will be displayed below the axis labels by default. xaxisDatetime #  xaxis-datetime \nSet this to true if you have datetime, google.type.date or timestamp data on the x-axis zebra #  zebra \nset zebra color like zebra=\u0026quot;#f3f4f5, #fff\u0026quot; to get stripes noDataText #  no-data-text \nSet the text to display, if no data is given.\nIf this option is not set, the default is No data. legend #  legend \nEnables the legend on bottom left with offset 0:0 dataLabels #  data-labels \nEnable labels with data on every item. tooltip #  tooltip \nshow a tooltip on mouseover legendAlign #  legend-align \nAligns the legend to left center right\ndefault is left legendPosition #  legend-position \nSet the position of the legend to top, right, bottom, left\nDefault is bottom legendOffsetX #  legend-offset-x \nMoves the legend in the x direction for n pixels from legend-position legendOffsetY #  legend-offset-y \nMoves the legend in the y direction for n pixels from legend-position toolbar #  toolbar \nEnables the toolbar toolbarDownload #  toolbar-download \nEnables the download option in the toolbar (svg,csv,png) plotHorizontal #  plot-horizontal \nEnable this to draw the bars horizontally grid #  grid \nDraw the horizontal grid lines chartType #  chart-type \nline, area, bar are mixable\nradar, scatter, heatmap\npie donut polarArea radialBar can only consume 1 data series stacked #  stacked \nWORK IN PROGRESS Stacked bar charts are not mixable titleText #  title-text \nSet the title. titleAlign #  title-align \nAligns the title. Possible values are \u0026lsquo;left\u0026rsquo;, \u0026lsquo;center\u0026rsquo;, \u0026lsquo;right\u0026rsquo;\nDefault is left titleOffsetX #  title-offset-x \nMoves the title for n pixels on the x-axis from the alignment direction titleOffsetY #  title-offset-y \nMoves the title for n pixels on the y-axis from the alignment direction fixedHeight #  fixed-height \nSet a fixed height for the plot. Default is auto, this can be useful if you need to control the heights apexOptions #  default: **{ series: [], yaxis: [], // belize qualitative color palete colors: [ '#5899DA', '#E8743B', '#19A979', '#ED4A7B', '#945ECF', '#13A4B4', '#525DF4', '#BF399E', '#6C8893', '#EE6868', '#2F6497', ], noData: { text: 'No data.', align: 'center', verticalAlign: 'middle', offsetX: 0, offsetY: 0, style: { color: undefined, fontSize: '14px', fontFamily: undefined, }, }, chart: { // height: 550, type: 'line', stacked: false, events: {}, toolbar: { show: false, // disable by default tools: { download: false, selection: true, zoom: true, zoomin: true, zoomout: true, pan: true, reset: true, }, }, sparkline: { enabled: false, }, }, grid: { show: false, // https://apexcharts.com/docs/options/grid/ // zebra // row: { // colors: [\u0026quot;#f3f4f5\u0026quot;, \u0026quot;#fff\u0026quot;], // } }, dataLabels: { enabled: false, },\n title: { // text: \u0026amp;#39;XYZ - Analysis\u0026amp;#39;, align: \u0026amp;#39;left\u0026amp;#39;, // offsetX: 70, }, stroke: {}, tooltip: { enabled: false, fixed: { enabled: false, position: \u0026amp;#39;topLeft\u0026amp;#39;, // topRight, topLeft, bottomRight, bottomLeft offsetY: 30, offsetX: 160, }, }, legend: { show: false, position: \u0026amp;#39;bottom\u0026amp;#39;, horizontalAlign: \u0026amp;#39;left\u0026amp;#39;, offsetX: 0, offsetY: 0, formatter: (seriesName, opts) =\u0026amp;gt; { if ( opts.w.config.yaxis[opts.seriesIndex] \u0026amp;amp;\u0026amp;amp; opts.w.config.yaxis[opts.seriesIndex].legendLabel ) { return [opts.w.config.yaxis[opts.seriesIndex].legendLabel]; } return [seriesName]; }, }, plotOptions: {}, xaxis: { // type: \u0026amp;#34;datetime\u0026amp;#34;, // tickAmount: 6, title: { text: undefined, }, }, }**\u0026lt;/small\u0026gt;  \nEvents #  data-point-clicked #  @-data-point-clicked → Fieldnode\nFired when a marker for this data source was clicked. Note: the event is fired from the furo-data-chart-binder Methods #  _initChart #  _initChart(apexOptions `` ) ⟹ void\n``  → ƒ\u0026ndash;init-chart\n apexOptions    _registerDataSourceComponents #  _registerDataSourceComponents(dataSources `` ) ⟹ void\n``  → ƒ\u0026ndash;register-data-source-components\n dataSources    _fillInitialData #  _fillInitialData() ⟹ void\n* → ƒ\u0026ndash;fill-initial-data\n\n"});index.add({'id':156,'href':'/docs/components/furo-data-bool-icon/','title':"furo-data-bool-icon",'section':"components",'content':"furo-data-bool-icon #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-data-bool-icon.js'; exports \u0026lt;furo-data-bool-icon\u0026gt; custom-element-definition superclass LitElement mixes FBP\nDisplays a icon/symbol for a boolean value\nfuro-data-bool-icon Displays a icon/symbol for a boolean value\nThis component uses utf-8 symbols for true and false at the moment.\nAttributes and Properties #  symboltrue #  symboltrue string default: '▼'\nDefines the symbol for the true state symbolfalse #  symbolfalse string default: '▶'\nDefines the symbol for the false state field #  default: {}\n\nMethods #  toggle #  toggle() ⟹ void\n* → ƒ-toggle\nToggles the icon.\n\nbindData #  bindData(d FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBind a fieldNode.\n d of type bool   _updateSymbol #  _updateSymbol() ⟹ void\n* → ƒ\u0026ndash;update-symbol\n\n"});index.add({'id':157,'href':'/docs/components/furo-data-chart-binder/','title':"furo-data-chart-binder",'section':"components",'content':"furo-data-chart-binder #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-data-chart-binder.js'; exports \u0026lt;furo-data-chart-binder\u0026gt; custom-element-definition superclass LitElement\nconnect data to a chart\nfuro-data-chart-binder Connects data objects (repeaterNodes) with the charting lib.\nUse multiple binders if you need more then one series per chart.\n1 2 3 4 5 6 7  \u0026lt;furo-chart-display chart-type=\u0026#34;bar\u0026#34;\u0026gt; \u0026lt;furo-data-chart-binder ƒ-bind-data=\u0026#34;--projectDAO(*.entities)\u0026#34; data-field=\u0026#34;data.cost_limit.units\u0026#34; category-field=\u0026#34;data.description\u0026#34; \u0026gt;\u0026lt;/furo-data-chart-binder\u0026gt; \u0026lt;/furo-chart-display\u0026gt;   Attributes and Properties #  axisLabelOpposite #  axis-label-opposite \nPut the axis label on the opposite site (usually right) axisLabel #  axis-label \nText for the y axis axisLabelColor #  axis-label-color \nCustom color for the y axis description text axisBorder #  axis-border \nShow a border on the right side of the y axis descriptions and labels. axisBorderColor #  axis-border-color \nCustom color for the border. axisTicks #  axis-ticks \nShow tick marks on the y axis. axisTooltip #  axis-tooltip \nShow a tooltip with the current value while hovering. axisTicksColor #  axis-ticks-color \nCustom color for the ticks seriesName #  series-name \nSeries with same name will get the same y-axis legendLabel #  legend-label \nLabel the Series for the legend. This text is also shown on the tooltips. This is useful when you have more then one data series. strokeWidth #  chart-stroke-width number default: 1\nDefine the thickness of the lines in px. markerSize #  chart-marker-size number default: 0\nSet the size of the markers (hover state) in px. strokeCurve #  chart-curve string default: 'straight'\nDefine the curve style for line and area charts.\nPossible values: \u0026lsquo;smooth\u0026rsquo;, \u0026lsquo;straight\u0026rsquo;, \u0026lsquo;stepline\u0026rsquo; options #  default: { seriesName: undefined, legendLabel: undefined, // custom field opposite: false, axisTicks: { show: false, borderType: 'solid', color: '#666666', width: 6, offsetX: 0, offsetY: 0, }, axisBorder: { show: false, color: '#666666', stroke: 1, }, labels: { show: false, style: { colors: '#666666', }, }, title: { style: { color: '#666666', }, }, tooltip: { enabled: false, offsetX: 0, }, }\n\ndataField #  data-field \nDefine the data field or fields here. For most charts this is the y axis.\nSome charts requires more then one data field (i.e. bubbles want at least 3 fields data-field=\u0026quot;data.start.day, data.end.day, data.start.day\u0026quot; ). categoryField #  category-field \nDefine the category field here (only 1 field). You can think of this as it is the x axis for your chart. chartType #  chart-type \nUse this for mixed charts scenarios only, prefer to define the chart-type on the chart-display. Specify the default type on the display and set the custom type on this binder. chartColor #  chart-color \nIf you need to give an explicit color for the series you can use this attribute. xaxis #  xaxis \n\nEvents #  data-point-clicked #  @-data-point-clicked → Fieldnode\nFired when a marker for this data source was clicked data-updated #  @-data-updated → data-series\nFired when datasource has updated data Methods #  bindData #  bindData(data `` ) ⟹ void\n``  → ƒ-bind-data\n data    _dataPointSelection #  _dataPointSelection(e *context* config `` ) ⟹ void\n  ``  → ƒ\u0026ndash;data-point-selection\n e  context  config    _initEmptySeries #  _initEmptySeries() ⟹ void\n* → ƒ\u0026ndash;init-empty-series\n\n_pathGet #  _pathGet(root Object path string | !Array\u0026amp;lt;string|number\u0026amp;gt; ) ⟹ *\nObject string | !Array\u0026amp;lt;string|number\u0026amp;gt;  → ƒ\u0026ndash;path-get\nReads a value from a path. If any sub-property in the path is undefined, this method returns undefined (will never throw.\n root Object from which to dereference path from path Path to read   _split #  _split(path `` ) ⟹ void\n``  → ƒ\u0026ndash;split\n path    "});index.add({'id':158,'href':'/docs/components/furo-data-context-menu/','title':"furo-data-context-menu",'section':"components",'content':"furo-data-context-menu #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-context-menu.js'; exports FuroUi5ContextMenu js exports \u0026lt;furo-data-context-menu\u0026gt; custom-element-definition superclass LitElement mixes FBP\na context menu\nfuro-data-context-menu A material design context menu or menu element.\nYou have to put a furo-data-context-menu-display element in one of the parent elements of the element where you use the furo-data-context-menu. The app-shell is a good place for that.\n1 2 3  \u0026lt;furo-data-context-menu condensed position=\u0026#34;below\u0026#34; ƒ-trigger=\u0026#34;--menuClkd\u0026#34; ƒ-bind-data=\u0026#34;--menuObject\u0026#34; @-menu-item-selected=\u0026#34;--menuItem\u0026#34;\u0026gt; \u0026lt;furo-icon-button icon=\u0026#34;menu\u0026#34; @-click=\u0026#34;--menuClkd\u0026#34;\u0026gt;\u0026lt;/furo-icon-button\u0026gt; \u0026lt;/furo-data-context-menu\u0026gt;   Attributes and Properties #  _context #  context \nUse this to set a string value as context. condensed #  condensed \nset this for condensed mode. Events #  open-furo-data-menu-requested #  @-open-furo-data-menu-requested → {context, menuitem}\nFired when context menu was triggered menu-item-selected #  @-menu-item-selected → {context, menuitem}\nFired when a menu item is selected Methods #  bindData #  bindData(menu `` ** Fieldnode ) ⟹ void\n`` Fieldnode  → ƒ-bind-data\nBind your menu object with the signature of menu.Menuitem or [menu.Menuitem].\n menu   || RepeaterNode}   setContext #  setContext(ctx * ) ⟹ void\n*  → ƒ-set-context\nSets the context. Use this if you want to set a Object as context\n ctx Can be anything, will be returned at the menu-item-selected method   trigger #  trigger(byKeyboard `` ) ⟹ void\n``  → ƒ-trigger\nTriggers the context menu. Set by keyboard to true to focus the first element for keyboard navigation\n byKeyboard    triggerContext #  triggerContext(context Object byKeyboard `` ) ⟹ void\nObject ``  → ƒ-trigger-context\ntriggers the menu with context\n context  byKeyboard    Slots #  default #  Type: HTMLElement\ndefault slot to add an individual context menu opener component (e.g. furo-icon-button). "});index.add({'id':159,'href':'/docs/components/furo-data-context-menu-display/','title':"furo-data-context-menu-display",'section':"components",'content':"furo-data-context-menu-display #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-context-menu-display.js'; exports FuroUi5ContextMenuDisplay js exports \u0026lt;furo-data-context-menu-display\u0026gt; custom-element-definition superclass LitElement mixes FBP\n Attributes and Properties #  borderDistance #  default: 48\n\n_repeatsChanged #   \ncondensed #  condensed reflects \nset this for condensed mode Methods #  hideMenu #  hideMenu() ⟹ void\n* → ƒ-hide-menu\n\ntriggerNavigation #  triggerNavigation(key `` ) ⟹ void\n``  → ƒ-trigger-navigation\nInterface for the furo navigation pad\n key    "});index.add({'id':160,'href':'/docs/components/furo-data-context-menu-item/','title':"furo-data-context-menu-item",'section':"components",'content':"furo-data-context-menu-item #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-context-menu-item.js'; exports FuroUi5ContextMenuItem js exports \u0026lt;furo-data-context-menu-item\u0026gt; custom-element-definition superclass LitElement mixes FBP\nhelper\nfuro-data-context-menu-item is a helper component for furo-data-context-menu.\nUse furo-data-context-menu to show a context menu.\nAttributes and Properties #  focused #  focused reflects \nfocused state Events #  mousefocus #  @-mousefocus → index\nFired when hovered with mouse opensub-requested #  @-opensub-requested → menu: this.menuitem, initiator: this\nFired when submenu should be opened item-selected #  @-item-selected → item\nFired when item was selected Methods #  bindData #  bindData(menuNode `` ) ⟹ void\n``  → ƒ-bind-data\n menuNode    select #  select(key `` ) ⟹ void\n``  → ƒ-select\nselects the item if it does not have child elements\n key    index #  index(i `` ) ⟹ void\n``  → ƒ-index\nstore the index for mouseover focus\n i    setFocused #  setFocused() ⟹ void\n* → ƒ-set-focused\nmark item as focused\n\nunsetFocused #  unsetFocused() ⟹ void\n* → ƒ-unset-focused\nmark item as unfocused\n\n"});index.add({'id':161,'href':'/docs/components/furo-data-context-submenu/','title':"furo-data-context-submenu",'section':"components",'content':"furo-data-context-submenu #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-context-submenu.js'; exports FuroUi5ContextSubmenu js exports \u0026lt;furo-data-context-submenu\u0026gt; custom-element-definition superclass LitElement mixes FBP\nhelper\nfuro-data-context-submenu is a helper component for furo-data-context-menu.\nUse furo-data-context-menu to show a context menu.\nAttributes and Properties #  borderDistance #  default: 48\n\ndepth #  depth \nDepth of the submenu Methods #  init #  init(e *display* byKeyboard `` ) ⟹ void\n  ``  → ƒ-init\n e  display  byKeyboard    hideMenu #  hideMenu() ⟹ void\n* → ƒ-hide-menu\n\ntriggerNavigation #  triggerNavigation(key `` ) ⟹ void\n``  → ƒ-trigger-navigation\nInterface for the furo navigation pad\n key    "});index.add({'id':162,'href':'/docs/components/furo-data-sign-pad/','title':"furo-data-sign-pad",'section':"components",'content':"furo-data-sign-pad #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-sign-pad.js'; exports FuroUi5SignPad js exports \u0026lt;furo-data-sign-pad\u0026gt; custom-element-definition extends /src/furo-sign-pad.js superclass FuroSignPad\nBind a entityObject.field to a sign-pad input\nfuro-data-sign-pad Describe your element\nAttributes and Properties #  field #  default: {}\n\nEvents #  sign-updated #  @-sign-updated → Base64\nFired when sign gets new painting, with base encoded image. Methods #  bindData #  bindData(entityField `` ) ⟹ void\n``  → ƒ-bind-data\nbind a entity field\n entityField    clear #  clear() ⟹ void\n* → ƒ-clear\nClears the image\n\nencodeImage #  encodeImage() ⟹ void\n* → ƒ-encode-image\nupdate field._value on new drawing\n\nresize #  resize() ⟹ void\n* → ƒ-resize\n\n_setEmpty #  _setEmpty(b `` ) ⟹ void\n``  → ƒ\u0026ndash;set-empty\nunlock() { this.signaturePad.on(); }\nlock() { this.signaturePad.off(); }\n b    _setActive #  _setActive(b `` ) ⟹ void\n``  → ƒ\u0026ndash;set-active\n b    setImage #  setImage(encodedImage `` ) ⟹ void\n``  → ƒ-set-image\n encodedImage    _onBegin #  _onBegin() ⟹ void\n* → ƒ\u0026ndash;on-begin\n\n_onEnd #  _onEnd() ⟹ void\n* → ƒ\u0026ndash;on-end\n\n_dotSizeChanged #  _dotSizeChanged(newValue `` ) ⟹ void\n``  → ƒ\u0026ndash;dot-size-changed\n newValue    _minWidthChanged #  _minWidthChanged(newValue `` ) ⟹ void\n``  → ƒ\u0026ndash;min-width-changed\n newValue    _maxWidthChanged #  _maxWidthChanged(newValue `` ) ⟹ void\n``  → ƒ\u0026ndash;max-width-changed\n newValue    _backgroundColorChanged #  _backgroundColorChanged(newValue `` ) ⟹ void\n``  → ƒ\u0026ndash;background-color-changed\n newValue    _penColorChanged #  _penColorChanged(newValue `` ) ⟹ void\n``  → ƒ\u0026ndash;pen-color-changed\n newValue    _velocityFilterWeightChanged #  _velocityFilterWeightChanged(newValue `` ) ⟹ void\n``  → ƒ\u0026ndash;velocity-filter-weight-changed\n newValue    _onEncodingChanged #  _onEncodingChanged(type *encoderOptions* ) ⟹ void\n   → ƒ\u0026ndash;on-encoding-changed\n type  encoderOptions    "});index.add({'id':163,'href':'/docs/components/furo-mini-tabs/','title':"furo-mini-tabs",'section':"components",'content':"furo-mini-tabs #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-mini-tabs.js'; exports \u0026lt;furo-mini-tabs\u0026gt; custom-element-definition superclass LitElement mixes FBP\ntodo shortdescription\nfuro-mini-tabs Tabs\nAttributes and Properties #  Methods #  injectItems #  injectItems(nodeArray `` ) ⟹ void\n``  → ƒ-inject-items\n nodeArray    "});index.add({'id':164,'href':'/docs/components/furo-panel-coordinator-tab-item/','title':"furo-panel-coordinator-tab-item",'section':"components",'content':"furo-panel-coordinator-tab-item #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-panel-coordinator-tab-item.js'; exports \u0026lt;furo-panel-coordinator-tab-item\u0026gt; custom-element-definition superclass LitElement mixes FBP\ntodo shortdescription\nfuro-mini-tab-item todo Describe your element\nAttributes and Properties #  selected #  selected reflects boolean default: false\nDescription hovered #  default: false\n\ninedit #  inedit reflects boolean default: false\n\nhaserror #  haserror reflects boolean default: false\n\n_select #   \n_deselect #   \n_error #   \n_inedit #   \n_focus #   \n_unfocus #   \n_clear #   \nfocused #  focused reflects \n\nMethods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    _removeListeners #  _removeListeners() ⟹ void\n* → ƒ\u0026ndash;remove-listeners\n\nStyling #  The following custom properties available for styling:\n   Custom property Description     --surface Border bottom color  default: N/A fallback: #fafafa   --on-surface foreground color  default: N/A fallback: N/A   --error error color  default: N/A fallback: red   --furo-button-padding label padding, 0 var(\u0026ndash;furo-button-padding, var(\u0026ndash;spacing-s, 16px))  default: --spacing-s fallback: 16px    "});index.add({'id':165,'href':'/docs/components/furo-panel-coordinator-tabs/','title':"furo-panel-coordinator-tabs",'section':"components",'content':"furo-panel-coordinator-tabs #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-panel-coordinator-tabs.js'; exports \u0026lt;furo-panel-coordinator-tabs\u0026gt; custom-element-definition superclass LitElement mixes FBP\ntab navigation for panel-coordinator\nTab navigation for the open panels in a panel-coordinator.\n1 2 3 4 5 6 7  \u0026lt;!-- inject the tabs from panelCoordinator and connect the keyboard navigation --\u0026gt; \u0026lt;furo-panel-coordinator-tabs ƒ-inject-tabs=\u0026#34;--panelChanges\u0026#34; ƒ-trigger-navigation=\u0026#34;--navpadPanelTabs\u0026#34; \u0026gt; \u0026lt;!-- add keyboard navigation --\u0026gt; \u0026lt;furo-navigation-pad @-navigated=\u0026#34;--navpadPanelTabs\u0026#34;\u0026gt;\u0026lt;/furo-navigation-pad\u0026gt; \u0026lt;/furo-panel-coordinator-tabs\u0026gt; \u0026lt;furo-pages flex default=\u0026#34;default\u0026#34;\u0026gt; \u0026lt;furo-panel-coordinator ƒ-show-page=\u0026#34;--nodeSelected\u0026#34; @-panels-changed=\u0026#34;--panelChanges\u0026#34;\u0026gt;\u0026lt;/furo-panel-coordinator\u0026gt;   Attributes and Properties #  tabindex #  tabindex reflects number default: 0\nSets the tabindex _focusIndex #  default: 0\n\nfocused #  focused reflects \nindicates that the element is focused Methods #  triggerNavigation #  triggerNavigation(key `` ) ⟹ void\n``  → ƒ-trigger-navigation\nConnect your navigation pad.\nDefault mappings are:\n Enter =\u0026gt; selectFocused ArroLeft =\u0026gt; focusPrevious ArroRight =\u0026gt; focusNext Home =\u0026gt; focusFirst End =\u0026gt; focusLast Escape =\u0026gt; closeFocused  To disable a function, just add the ignored-keys to furo-navigation-tabs.\n key    closeFocused #  closeFocused() ⟹ void\n* → ƒ-close-focused\nCloses the focused tab.\n\nfocusNext #  focusNext() ⟹ void\n* → ƒ-focus-next\nFocuses the next tab. If you are on the last tab, the frist tab will be selected\n\nfocusFirst #  focusFirst() ⟹ void\n* → ƒ-focus-first\nFocuses the first tab.\n\nfocusLast #  focusLast() ⟹ void\n* → ƒ-focus-last\nFocuses the last tab.\n\nselectFocused #  selectFocused() ⟹ void\n* → ƒ-select-focused\nSelect the focused tab.\n\nfocusPrevious #  focusPrevious() ⟹ void\n* → ƒ-focus-previous\nFocuses the previous tab.\n\ninjectTabs #  injectTabs(nodeArray `` ) ⟹ void\n``  → ƒ-inject-tabs\nInject data from a navigationnode\n nodeArray    focus #  focus() ⟹ void\n* → ƒ-focus\nfocuses the element itself. The \u0026ldquo;focused\u0026rdquo; tab will get the focus\n\n"});index.add({'id':166,'href':'/docs/components/furo-panel-head/','title':"furo-panel-head",'section':"components",'content':"furo-panel-head #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-panel-head.js'; exports \u0026lt;furo-panel-head\u0026gt; custom-element-definition superclass LitElement mixes FBP\ndislay a navigationNode as title\nfuro-panel-head Displays a navigation node as title\nAttributes and Properties #  _field #  default: {}\n\nMethods #  bindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\nbinds a fieldNode to the internal _field is listenting to field-value-changed event\n fieldNode    "});index.add({'id':167,'href':'/docs/components/furo-sign-pad/','title':"furo-sign-pad",'section':"components",'content':"furo-sign-pad #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-sign-pad.js'; exports FuroSignPad js exports \u0026lt;furo-sign-pad\u0026gt; custom-element-definition superclass LitElement mixes FBP\ndraw or sign\nfuro-sign-pad Simple pad to sign or draw something\nSample #       Attributes and Properties #  Events #  sign-updated #  @-sign-updated → Base64\nFired when sign gets new painting, with base encoded image. Methods #  resize #  resize() ⟹ void\n* → ƒ-resize\n\n_setEmpty #  _setEmpty(b `` ) ⟹ void\n``  → ƒ\u0026ndash;set-empty\nunlock() { this.signaturePad.on(); }\nlock() { this.signaturePad.off(); }\n b    _setActive #  _setActive(b `` ) ⟹ void\n``  → ƒ\u0026ndash;set-active\n b    clear #  clear() ⟹ void\n* → ƒ-clear\nClears the image\n\nsetImage #  setImage(encodedImage `` ) ⟹ void\n``  → ƒ-set-image\n encodedImage    encodeImage #  encodeImage() ⟹ void\n* → ƒ-encode-image\nEncodes the image using the type and encodingOptions (quality) defined. The encoded image is available in the image property.\n\n_onBegin #  _onBegin() ⟹ void\n* → ƒ\u0026ndash;on-begin\n\n_onEnd #  _onEnd() ⟹ void\n* → ƒ\u0026ndash;on-end\n\n_dotSizeChanged #  _dotSizeChanged(newValue `` ) ⟹ void\n``  → ƒ\u0026ndash;dot-size-changed\n newValue    _minWidthChanged #  _minWidthChanged(newValue `` ) ⟹ void\n``  → ƒ\u0026ndash;min-width-changed\n newValue    _maxWidthChanged #  _maxWidthChanged(newValue `` ) ⟹ void\n``  → ƒ\u0026ndash;max-width-changed\n newValue    _backgroundColorChanged #  _backgroundColorChanged(newValue `` ) ⟹ void\n``  → ƒ\u0026ndash;background-color-changed\n newValue    _penColorChanged #  _penColorChanged(newValue `` ) ⟹ void\n``  → ƒ\u0026ndash;pen-color-changed\n newValue    _velocityFilterWeightChanged #  _velocityFilterWeightChanged(newValue `` ) ⟹ void\n``  → ƒ\u0026ndash;velocity-filter-weight-changed\n newValue    _onEncodingChanged #  _onEncodingChanged(type *encoderOptions* ) ⟹ void\n   → ƒ\u0026ndash;on-encoding-changed\n type  encoderOptions    "});index.add({'id':168,'href':'/docs/components/furo-tree/','title':"furo-tree",'section':"components",'content':"furo-tree #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-tree.js'; exports FuroTree js exports \u0026lt;furo-tree\u0026gt; custom-element-definition superclass LitElement mixes FBP\ntree navigation menu\nfuro-tree renders a tree structure\nAttributes and Properties #  tabindex #  tabindex reflects number default: 0\nSets the tabindex _searchTerm #  default: ''\n\nexpandDepth #  expand-depth number default: 2\nSets the maximal expand level relative from the current node.\nExpanding is a expensive operation. _searchIsActive #  searching reflects boolean default: false\nindicator for searching. Maybe you want style your item depending on this attribute treeItemComponent #   If you want to use a custom component for the tree-item, set this attribute. The default item component is furo-tree-item. _treeItemTepmplate #   \ndepth #  depth \nMaximal depth for the tree. Default is infinite. qp #  qp \nQuery param to watch. If you set this attribute, the node-selected event will only be fired on ƒ-qp-in or ƒ-select-by-id. If you select an item the qp-change-request will be fired. rootAsHeader #  root-as-header \nSet this flag if you do not want a header-text section. hideRootNode #  hide-root-node \nSet this flag if you do not want to see the root node headerText #  header-text \nOverride display name from root object secondaryText #  secondary-text \nOverride description from root object. nobgonhead #  no-bg-on-header \ndisables the background color on focus, selected, \u0026hellip; on header node\nWorks only with root-as-header enabled focused #  focused reflects \nindicates that the element is focused Events #  node-focused #  @-node-focused → focused field\nFired when branch-focused #  @-branch-focused → focused field\nFired when leaf-focused #  @-leaf-focused → ``\nFired when node-selected #  @-node-selected → selected field\nFired when the item gets selected, does not fire when you work with query params qp-change-requested #  @-qp-change-requested → Object {\u0026amp;#34;this.qp\u0026amp;#34;: this._selectedField.id._value}\nFired when qp mode is enabled. Nodes are only selectable with qpIn or selectById branch-selected #  @-branch-selected → selected field\nFired when leaf-selected #  @-leaf-selected → selected field\nFired when node-opened #  @-node-opened → ``\nFired when a node is opened node-closed #  @-node-closed → ``\nFired when a node is closed nodes-expanded #  @-nodes-expanded → ``\nFired when nodes are expanded recursive nodes-collapsed #  @-nodes-collapsed → ``\nFired when nodes are collapsed recursive. Methods #  collapseFocused #  collapseFocused() ⟹ void\n* → ƒ-collapse-focused\ncollapses the focused element. If it is closed the parent will be focused.\n\nexpandFocused #  expandFocused() ⟹ void\n* → ƒ-expand-focused\nexpands the focused node, if it is opened the first child will be focused\n\nexpandFocusedRecursive #  expandFocusedRecursive() ⟹ void\n* → ƒ-expand-focused-recursive\nexpands the focused node recursive\n\ncollapseFocusedRecursive #  collapseFocusedRecursive() ⟹ void\n* → ƒ-collapse-focused-recursive\ncollapses the focused node recursive\n\nselectFocused #  selectFocused() ⟹ void\n* → ƒ-select-focused\nselects the focused element.\n\nsearch #  search(term `` ) ⟹ []\n``  → ƒ-search\nSearch in the visible nodes\n term    searchOpenTree #  searchOpenTree() ⟹ void\n* → ƒ-search-open-tree\n\n_resetSearch #  _resetSearch() ⟹ void\n* → ƒ\u0026ndash;reset-search\n\n_updateSearchmatchAttributesOnItems #  _updateSearchmatchAttributesOnItems() ⟹ void\n* → ƒ\u0026ndash;update-searchmatch-attributes-on-items\n\nfocusParent #  focusParent() ⟹ void\n* → ƒ-focus-parent\nFocuses the parent tree node without selecting it.\nThe tree item will also scrollIntoViewIfNeeded() (on all platforms which support this method).\n\nfocusPrevious #  focusPrevious() ⟹ void\n* → ƒ-focus-previous\nfocus the previous visible node.\nThe tree item will also scrollIntoViewIfNeeded() (on all platforms which support this method).\n\nqpIn #  qpIn(qpObject `` ) ⟹ void\n``  → ƒ-qp-in\n qpObject    locationIn #  locationIn(locationObject `` ) ⟹ *|boolean\n``  → ƒ-location-in\nInject a location object, which contains a query param property to select the current node.\n locationObject    selectById #  selectById(nodeID `` ) ⟹ void\n``  → ƒ-select-by-id\n nodeID    selectPrev #  selectPrev() ⟹ void\n* → ƒ-select-prev\nselect the previous visible item\n\nexpandNodeRecursive #  expandNodeRecursive() ⟹ void\n* → ƒ-expand-node-recursive\nexpands the currently selected node recursive\n\nexpandAll #  expandAll() ⟹ void\n* → ƒ-expand-all\n\ncollapseAll #  collapseAll() ⟹ void\n* → ƒ-collapse-all\n\ncollapseNodeRecursive #  collapseNodeRecursive() ⟹ void\n* → ƒ-collapse-node-recursive\nexpands the currently selected node recursive\n\ntoggle #  toggle() ⟹ void\n* → ƒ-toggle\ntoggles the currently selected node\n\naddSubNode #  addSubNode(rawNode `` ) ⟹ void\n``  → ƒ-add-sub-node\n rawNode    deleteNode #  deleteNode() ⟹ void\n* → ƒ-delete-node\n\nselectNext #  selectNext() ⟹ void\n* → ƒ-select-next\nselect the next visible item\n\ntriggerNavigation #  triggerNavigation(key `` ) ⟹ void\n``  → ƒ-trigger-navigation\n key    focusFirst #  focusFirst() ⟹ void\n* → ƒ-focus-first\nFocuses the first node in the tree without selecting it.\nUse selectFocused to select the focused node.\nThe tree item will also scrollIntoViewIfNeeded() (on all platforms which support this method).\n\nfocusLast #  focusLast() ⟹ void\n* → ƒ-focus-last\nFocuses the last node in the tree without selecting it.\nUse selectFocused to select the focused node.\nThe tree item will also scrollIntoViewIfNeeded() (on all platforms which support this method).\n\nfocusNext #  focusNext() ⟹ void\n* → ƒ-focus-next\nfocuses the next visible tree node.\nThe tree item will also scrollIntoViewIfNeeded() (on all platforms which support this method).\n\nfocus #  focus() ⟹ void\n* → ƒ-focus\nfocuses the tree itself. You can use this in combination with keyboard navigation (furo-navigation-pad)\n\nbindData #  bindData(treeNode `` ) ⟹ void\n``  → ƒ-bind-data\nBinds a FieldNode with a tree signature.\nA sample and usable signature can be found in ./specs/\n treeNode    _setTitle #  _setTitle(treeNode `` ) ⟹ void\n``  → ƒ\u0026ndash;set-title\n treeNode    focusSelected #  focusSelected() ⟹ void\n* → ƒ-focus-selected\nFocuses the currently selected tree item.\nThe tree item will also scrollIntoViewIfNeeded() (on all platforms which support this method).\n\n_init #  _init() ⟹ void\n* → ƒ\u0026ndash;init\n\n_initFocusAndSelectEvents #  _initFocusAndSelectEvents() ⟹ void\n* → ƒ\u0026ndash;init-focus-and-select-events\n\n_buildFlatTree #  _buildFlatTree(tree `` ) ⟹ void\n``  → ƒ\u0026ndash;build-flat-tree\n tree    _parseTreeRecursive #  _parseTreeRecursive(tree *level* maxdepth `` ) ⟹ void\n  ``  → ƒ\u0026ndash;parse-tree-recursive\n tree  level  maxdepth    Styling #  The following custom properties available for styling:\n   Custom property Description     --surface background color  default: white fallback: N/A   --on-surface foreground color  default: #333333 fallback: N/A    "});index.add({'id':169,'href':'/docs/components/furo-tree-item/','title':"furo-tree-item",'section':"components",'content':"furo-tree-item #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-tree-item.js'; exports FuroTreeItem js exports \u0026lt;furo-tree-item\u0026gt; custom-element-definition superclass LitElement mixes FBP\ntodo shortdescription\nfuro-tree-item todo Describe your element\nAttributes and Properties #  hidden #  hidden reflects boolean default: true\nDescription isGroupLabel #  is-group-label reflects boolean default: false\n\nindentation #  default: 0\n\nfocused #  focused reflects \n\nsearchmatch #  searchmatch reflects \n\ninedit #  inedit reflects \n\nhaserror #  haserror reflects \n\nselected #  selected reflects \n\nnoicon #  noicon \n\nMethods #  search #  search(event `` ) ⟹ void\n``  → ƒ-search\n event    _updateItem #  _updateItem() ⟹ void\n* → ƒ\u0026ndash;update-item\n\nbindData #  bindData(fieldNode `` ) ⟹ void\n``  → ƒ-bind-data\n fieldNode    __addNodeSelectedListener #  __addNodeSelectedListener() ⟹ void\n* → ƒ\u0026mdash;add-node-selected-listener\n\nStyling #  The following custom properties available for styling:\n   Custom property Description     --tree-indentation-1 tree indention level 1  default: 16px fallback: N/A   --tree-indentation-2 tree indention level 2  default: 32px fallback: N/A   --tree-indentation-3 tree indention level 3  default: 48px fallback: N/A   --tree-indentation-4 tree indention level 4  default: 56px fallback: N/A   --tree-indentation-5 tree indention level 5  default: 64px fallback: N/A   --tree-indentation-6 tree indention level 6  default: 72px fallback: N/A   --tree-indentation-7 tree indention level 7  default: 80px fallback: N/A   --tree-indentation-8 tree indention level 8  default: 88px fallback: N/A   --tree-indentation-9 tree indention level 9  default: 92px fallback: N/A   --tree-indentation-10 tree indention level 10  default: 96px fallback: N/A   --tree-indentation-11 tree indention level 11  default: 100px fallback: N/A   --tree-indentation-12 tree indention level 12  default: 104px fallback: N/A    "});index.add({'id':170,'href':'/docs/components/furo-ui5-busyindicator/','title':"furo-ui5-busyindicator",'section':"components",'content':"furo-ui5-busyindicator #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-busyindicator.js'; exports FuroUiBusyindicator js exports \u0026lt;furo-ui5-busyindicator\u0026gt; custom-element-definition extends src/furo-ui5-busyindicator.js\nui5 busy indicator\nfuro-ui5-busyindicator The furo-ui5-busyindicator signals that some operation is going on and that the user must wait. It does not block the current UI screen so other operations could be triggered in parallel. Usage For the furo-ui5-busyindicator you can define the size of the indicator, as well as whether it is shown or hidden. In order to hide it, use the html attribute hidden or display: none;\nIn order to show busy state for an HTML element, simply nest the HTML element in a furo-ui5-busyindicator instance. Note: Since furo-ui5-busyindicator has display: inline-block; by default and no width of its own, whenever you need to wrap a block-level element, you should set display: block to the busy indicator as well.\nWhat is different from ui5-busyindicator? With flow based programming it\u0026rsquo;s usual to address functions. So we added two convenience functions for\n activate =\u0026gt; ƒ-activate deactivate =\u0026gt; ƒ-deactivate  https://sap.github.io/ui5-webcomponents/playground/components/BusyIndicator/\nAttributes and Properties #  Methods #  activate #  activate() ⟹ void\n* → ƒ-activate\nSets the busy indicator state to active\n\ndeactivate #  deactivate() ⟹ void\n* → ƒ-deactivate\nSets the busy indicator state to inactive\n\n"});index.add({'id':171,'href':'/docs/components/furo-ui5-button/','title':"furo-ui5-button",'section':"components",'content':"furo-ui5-button #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-button.js'; exports FuroUi5Button js exports \u0026lt;furo-ui5-button\u0026gt; custom-element-definition extends src/furo-ui5-button.js\nui5 button\nfuro-ui5-button The furo-ui5-button component represents a simple push button. It enables users to trigger actions by clicking or tapping the furo-ui5-button, or by pressing certain keyboard keys, such as Enter. Usage For the furo-ui5-button UI, you can define text, icon, or both. You can also specify whether the text or the icon is displayed first.\nYou can choose from a set of predefined types that offer different styling to correspond to the triggered action.\nYou can set the furo-ui5-button as enabled or disabled. An enabled ui5-button can be pressed by clicking or tapping it. The button changes its style to provide visual feedback to the user that it is pressed or hovered over with the mouse cursor. A disabled furo-ui5-button appears inactive and cannot be pressed.\nWhat is different from ui5-button? With flow based programming it\u0026rsquo;s usual to address functions. So we added two convenience functions for\n disabling =\u0026gt; ƒ-disable enabling =\u0026gt; ƒ-enable  https://sap.github.io/ui5-webcomponents/playground/components/Button/\nAttributes and Properties #  Methods #  disable #  disable() ⟹ void\n* → ƒ-disable\nSets the button state to disabled\n\nenable #  enable() ⟹ void\n* → ƒ-enable\nSets the button state to enabled\n\nshow #  show() ⟹ void\n* → ƒ-show\nshows the button, when it was hidden before\n\nhide #  hide() ⟹ void\n* → ƒ-hide\nhides the button\n\n"});index.add({'id':172,'href':'/docs/components/furo-ui5-card/','title':"furo-ui5-card",'section':"components",'content':"furo-ui5-card #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-card.js'; exports FuroUi5Card js exports \u0026lt;furo-ui5-card\u0026gt; custom-element-definition superclass LitElement mixes FBP\n furo-ui5-card is a bindable card that represents information in the form of a tile with separate header and content areas.\n1 2 3 4 5 6 7 8  \u0026lt;furo-ui5-card heading=\u0026#34;Title\u0026#34; subheading=\u0026#34;Secondary text\u0026#34; icon=\u0026#34;card\u0026#34; \u0026gt; \u0026lt;div slot=\u0026#34;action\u0026#34;\u0026gt;\u0026lt;furo-ui5-button\u0026gt;Action\u0026lt;/furo-ui5-button\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div slot=\u0026#34;content\u0026#34;\u0026gt;content goes here\u0026lt;/div\u0026gt; \u0026lt;/furo-ui5-card\u0026gt;   How To Use Semantic Colors #  You can use semantic colors to visualize the status or state. Set the attribute design=\u0026quot;\u0026quot; with the following values:\n Positive (\u0026ndash;sapPositiveColor) Negative (\u0026ndash;sapNegativeColor) Critical (\u0026ndash;sapCriticalColor) Neutral (\u0026ndash;sapCriticalColor)         \u0026lt;furo-ui5-card design=\u0026ldquo;Positive\u0026rdquo; icon=\u0026ldquo;card\u0026rdquo;\n   \u0026lt;div slot=\u0026quot;content\u0026quot;\u0026gt;content goes here\u0026lt;/div\u0026gt;   ``` Attributes and Properties #  icon #  icon reflects string default: ''\nDefines the visual representation in the header of the card. Supports images and icons. https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html heading #  heading string default: ''\nDefines the title displayed in the ui5-card header. subheading #  subheading string default: ''\nDefines the subheading displayed in the ui5-card header. status #  status string default: ''\nDefines the status text displayed in the card header (upper right).\nBy enabling the status, actions are not visible. headerInteractive #  header-interactive reflects boolean default: false\nDefines if the ui5-card header would be interactive, e.g gets hover effect, gets focused and header-click event is fired, when it is pressed. noContentPadding #  no-content-padding reflects boolean default: false\nShows the content slot area with no padding Events #  header-clicked #  @-header-clicked → ``\nFired when the card head is clicked. The header-interactive attribute must be set. header-click #  @-header-click → ``\nFired when interactive header was clicked. Methods #  bindHeading #  bindHeading(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-heading\nBind any scalar field to set the title of the panel.\n fieldNode    bindIcon #  bindIcon(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-icon\nBind any scalar field to set the title of the panel. Do not forget to import the icon you will use in your component.\n fieldNode    bindSubheading #  bindSubheading(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-subheading\nBind any scalar field to set the subtitle of the panel.\n fieldNode    bindNavNode #  bindNavNode(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-nav-node\nbind a field with the signature of furo.navigation.Navigationnode\nUsed fields are:\n  display_name\n  secondary_text\n  icon\n  fieldNode    Slots #  action #  Type: HTMLElement [0..n]\ndefines an action, displayed in the right most part of the header. Note: If status is set, the status text will be displayed, you can either have action, or status. content #  Type: HTMLElement [0..n]\ndefines the content of the card "});index.add({'id':173,'href':'/docs/components/furo-ui5-checkbox-input/','title':"furo-ui5-checkbox-input",'section':"components",'content':"furo-ui5-checkbox-input #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-checkbox-input.js'; exports FuroUi5CheckboxInput js exports \u0026lt;furo-ui5-checkbox-input\u0026gt; custom-element-definition extends src/furo-ui5-checkbox-input.js mixes FieldNodeAdapter\ndata checkbox input field\nThe \u0026lsquo;furo-ui5-checkbox-input\u0026rsquo; component allows the user to switch true and false for Bool with data binding.\nIt supports all features from the SAP ui5 checkbox element.\nYou can bind bool type, furo.fat.Bool type or the google.wrapper.BoolValue type.\n       \u0026lt;furo-ui5-checkbox-input ƒ-bind-data=\u0026quot;\u0026ndash;daoCountry(*.data.classified_as_risk_area)\u0026quot;\n    ### Specificity 1. Attributes which are set in the html source will have the highest specificity and will never get overwritten by metas or fat. 2. Attributes set in meta will have the lowest specificity and will be overwritten by attributes from fat. | meta | fat | html | |------\t|-----\t|------\t| | 1 | 10 | 100 | ## supported FAT attributes - **\u0026quot;readonly\u0026quot;:\u0026quot;true\u0026quot;** set the element to readonly - **\u0026quot;disabled\u0026quot;:\u0026quot;true\u0026quot;** set the element to disabled ## supported meta and constraints - **readonly: true** , set the element to readonly The constraint **required** will mark the element as required Attributes and Properties #  Methods #  readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom.\n\n"});index.add({'id':174,'href':'/docs/components/furo-ui5-checkbox-input-labeled/','title':"furo-ui5-checkbox-input-labeled",'section':"components",'content':"furo-ui5-checkbox-input-labeled #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-checkbox-input-labeled.js'; exports FuroUi5CheckboxInputLabeled js exports \u0026lt;furo-ui5-checkbox-input-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\nlabeled input field\nfuro-ui5-checkbox-input-labeled\nThe furo-ui5-checkbox-input-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\nAttributes and Properties #  label #  label string default: ''\nthe label for the data-checkbox-input placeholder #  placeholder \nthe placeholder is the additional information beside the label. it will be showed on the right side of the checkbox. required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    "});index.add({'id':175,'href':'/docs/components/furo-ui5-collection-dropdown/','title':"furo-ui5-collection-dropdown",'section':"components",'content':"furo-ui5-collection-dropdown #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-collection-dropdown.js'; exports FuroUi5CollectionDropdown js exports \u0026lt;furo-ui5-collection-dropdown\u0026gt; custom-element-definition extends src/furo-ui5-collection-dropdown.js\ndata collection dropdown\nDEPRECATED switch to furo-ui5-select #  The furo-ui5-collection-dropdown component represents a drop-down list. The items inside define the available options by using the furo-ui5-collection-dropdown component.\nKeyboard Handling The furo-ui5-collection-dropdown provides advanced keyboard handling. If the furo-ui5-collection-dropdown is focused, you can open or close the drop-down by pressing F4, ALT+UP or ALT+DOWN keys. Once the drop-down is opened, you can use the UP and DOWN arrow keys to navigate through the available options and select one by pressing the Space or Enter keys.\nauto-select-first #  set this attribute to auto select the first item in the list, if no item is set in the bounded fieldNode.\nAttributes and Properties #  subField #  default: 'data'\nIf you inject an array with complex objects, declare here the path where display_name and value_field are located.\nThis is only needed if display_name and value_field are not located in the root of the object. displayField #  default: 'display_name'\nThe name of the field from the injected collection that contains the label for the dropdown array. valueField #  default: 'id'\ndeclare here the name of the field from the injected collection. by selecting an item from dropdown the defined valueSubField of bounded complex type or the value by scalar type will be updated according to the value of this field. valueSubField #  default: undefined\nif you bind a complex type, you must declare here the field which gets updated of value by selecting an item. e.g. value-sub-field = \u0026ldquo;id\u0026rdquo;\nIf you bind a scalar, you dont need this attribute. displaySubField #  default: 'display_name'\nif you bind a complex type, declare here the field which gets updated of display_name by selecting an item.\nIf you bind a scalar, you dont need this attribute. autoSelectFirst #  default: false\nset this attribute to autoSelectFirst the first item in the list, if no item is set in the bounded fieldNode Events #  item-selected #  @-item-selected → {*} the original injected data (e.g. entity with link) of the selected item\nFired when the item of dropdown list is selected. bubbles Methods #  addItems #  addItems(options `` ) ⟹ void\n``  → ƒ-add-items\nAdds the option components to the default slot\n options    bindData #  bindData(fieldNode Object|FieldNode ) ⟹ void\nObject|FieldNode  → ƒ-bind-data\nBind a entity field to the range-input. You can use the entity even when no data was received. When you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with --entity(*.fields.fieldname)\n fieldNode a Field object   setValue #  setValue(val `` ) ⟹ void\n``  → ƒ-set-value\nSets the value for the field. This will update the fieldNode.\n val    injectEntities #  injectEntities(entities FieldNode ) ⟹ void\nFieldNode  → ƒ-inject-entities\nInject the array of a collection\n entities of type *Entities   "});index.add({'id':176,'href':'/docs/components/furo-ui5-collection-dropdown-labeled/','title':"furo-ui5-collection-dropdown-labeled",'section':"components",'content':"furo-ui5-collection-dropdown-labeled #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-collection-dropdown-labeled.js'; exports FuroUi5CollectionDropdownLabeled js exports \u0026lt;furo-ui5-collection-dropdown-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\nlabeled input field\nfuro-ui5-collection-dropdown-labeled The furo-ui5-collection-dropdown-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\nAttributes and Properties #  label #  label string default: ''\nthe label for the data-collection-dropdown subField #  sub-field reflects string default: 'data'\nIf you inject an array with complex objects, declare here the path where display_name and value_field are located.\nThis is only needed if display_name and value_field are not located in the root of the object. displayField #  display-field reflects string default: 'display_name'\nThe name of the field from the injected collection that contains the label for the dropdown array. valueField #  value-field reflects string default: 'id'\nif you bind a complex type, declare here the field which gets updated of display_name by selecting an item. If you bind a scalar, you dont need this attribute. valueSubField #  value-sub-field reflects null default: null\nif you bind a complex type, declare here the field which gets updated of value by selecting an item.\nIf you bind a scalar, you dont need this attribute. displaySubField #  display-sub-field reflects string default: 'display_name'\nif you bind a complex type, declare here the field which gets updated of display_name by selecting an item.\nIf you bind a scalar, you dont need this attribute. autoSelectFirst #  auto-select-first reflects boolean default: false\nset this attribute to autoSelectFirst the first item in the list, if no item is set in the bounded fieldNode disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user. required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. Events #  value-changed #  @-value-changed → {*} the value from the value-field. By default the value field is \u0026amp;#34;id\u0026amp;#34;\nFired when value has changed from the component inside. bubbles Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    injectEntities #  injectEntities(entities `` ) ⟹ void\n``  → ƒ-inject-entities\nInject the array of a collection\n entities    "});index.add({'id':177,'href':'/docs/components/furo-ui5-date-picker/','title':"furo-ui5-date-picker",'section':"components",'content':"furo-ui5-date-picker #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-date-picker.js'; exports FuroUi5DatePicker js exports \u0026lt;furo-ui5-date-picker\u0026gt; custom-element-definition extends src/furo-ui5-date-picker.js mixes FieldNodeAdapter\nfuro data datepicker field\nThe furo-ui5-date-picker component allows the user to bind an date object like google.type.Date or a date string with ISO 8061 format like \u0026ldquo;2020-12-31\u0026rdquo; to the ui5 datepicker and edit it.\nIt supports all features from the SAP ui5 DatePicker element.\nyou can define the formatPattern (e.g. \u0026lsquo;dd.MM.yyyy\u0026rsquo; ) to show the date according to format pattern.\nYou can bind a string, furo.type.Date or google.type.Date.\n1 2 3  \u0026lt;furo-ui5-date-picker ƒ-bind-data=\u0026#34;--data(*.validity_to)\u0026#34;\u0026gt; \u0026lt;/furo-ui5-date-picker\u0026gt;   The text field can be editable or read-only (readonly property), and it can be enabled or disabled (enabled property). To visualize semantic states, such as \u0026ldquo;error\u0026rdquo; or \u0026ldquo;warning\u0026rdquo;, the valueState property is provided. When the user makes changes to the date, the change event is fired, which enables you to react on any date change.\nsupported meta and constraints #   readonly: true , set the element to readonly placeholder:\u0026ldquo;some string\u0026rdquo; set the placeholder for the element min:\u0026ldquo;1999-12-31\u0026rdquo; set the minDate for the element (use iso date in the constraint) max:\u0026ldquo;1999-12-31\u0026rdquo; set the maxDate for the element (use iso date in the constraint) pattern:\u0026ldquo;1999-12-31\u0026rdquo; set the pattern for the element  The constraint required will mark the element as required\nMethods #  bind-data(fieldNode) Bind a entity field. You can use the entity even when no data was received.\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with \u0026ndash;entity(*.fields.fieldname)\nAttributes and Properties #  formatPattern #  default: ''\nThe format pattern for the date. Events #  value-changed #  @-value-changed → Date\nFired when the input operation has finished by pressing Enter or on focusout. change #  @-change → Date\n-Fired when the input operation has finished by pressing Enter or on focusout. Methods #  readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. Attributes that can be se are value-state, placeholder, required,readonly,disabled max-date, min-date, format-pattern, Use this after manual or scripted update of the attributes.\n\n"});index.add({'id':178,'href':'/docs/components/furo-ui5-date-picker-labeled/','title':"furo-ui5-date-picker-labeled",'section':"components",'content':"furo-ui5-date-picker-labeled #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-date-picker-labeled.js'; exports FuroUi5DatePickerLabeled js exports \u0026lt;furo-ui5-date-picker-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\nlabeled input field\nfuro-ui5-date-picker-labeled The furo-ui5-date-picker-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\nAttributes and Properties #  label #  label string default: ''\nthe label for the data-date-picker required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled reflects \nA Boolean attribute which, if present, means this field cannot be edited by the user. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → String\nFires the field value when it changes in ISO 8601 format. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    "});index.add({'id':179,'href':'/docs/components/furo-ui5-date-time-picker/','title':"furo-ui5-date-time-picker",'section':"components",'content':"furo-ui5-date-time-picker #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-date-time-picker.js'; exports FuroUi5DateTimePicker js exports \u0026lt;furo-ui5-date-time-picker\u0026gt; custom-element-definition extends src/furo-ui5-date-time-picker.js mixes FieldNodeAdapter\nfuro data datetime picker field\nThe furo-ui5-date-time-picker component allows the user to bind a date string with IOS 8061 standard in RFC 3339 format likes \u0026ldquo;2017-01-15T01:30:15.01Z\u0026rdquo; to the ui5 date time picker and edit it.\nyou can define the formatPattern (e.g. \u0026lsquo;dd.MM.yyyy hh:mm aa\u0026rsquo; ) to show the date according to format pattern. but the data in the payload will still be in format RFC 3339 (2017-01-15T01:30:15.01Z)\nThe text field can be editable or read-only (readonly property), and it can be enabled or disabled (enabled property). To visualize semantic states, such as \u0026ldquo;error\u0026rdquo; or \u0026ldquo;warning\u0026rdquo;, the valueState property is provided. When the user makes changes to the datetime, the change event is fired, which enables you to react on any date change.\nYou can bind a string, google.protobuf.Timestamp, int32, int64.\nint32, int64 will be handled as unix timestamps (seconds since epoc) and can not be empty.\n1 2 3  \u0026lt;furo-ui5-date-time-picker ƒ-bind-data=\u0026#34;--data(*.validity_to)\u0026#34;\u0026gt; \u0026lt;/furo-ui5-date-time-picker\u0026gt;   The field can be editable or read-only (readonly property), and it can be enabled or disabled (enabled property). To visualize semantic states, such as \u0026ldquo;error\u0026rdquo; or \u0026ldquo;warning\u0026rdquo;, the valueState property is provided. When the user makes changes to the date, the change event is fired, which enables you to react on any date change.\nsupported meta and constraints #   readonly: true , set the element to readonly placeholder:\u0026ldquo;some string\u0026rdquo; set the placeholder for the element min:\u0026ldquo;1999-12-31\u0026rdquo; set the minDate for the element (use iso date in the constraint) max:\u0026ldquo;1999-12-31\u0026rdquo; set the maxDate for the element (use iso date in the constraint) pattern:\u0026ldquo;1999-12-31\u0026rdquo; set the pattern for the element  The constraint required will mark the element as required\nMethods #  bind-data(fieldNode) Bind a entity field. You can use the entity even when no data was received.\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with \u0026ndash;entity(*.fields.fieldname)\nAttributes and Properties #  formatPattern #  default: ''\n\n_previousValueState #  default: { state: 'None', message: '' }\n\n_attributesFromFNA #  default: { readonly: undefined, placeholder: undefined, min: undefined, max: undefined, pattern: undefined, }\n\n_constraintsFromFNA #  default: { required: undefined, }\n\n_privilegedAttributes #  default: { readonly: null, placeholder: null, required: null, disabled: null, maxDate: null, minDate: null, formatPattern: null, }\n\nEvents #  value-changed #  @-value-changed → String\nFires the field value when it changes in ISO 8601 format. change #  @-change → ``\nFired when the input operation has finished by pressing Enter or on focusout. Methods #  onFnaFieldValueChanged #  onFnaFieldValueChanged(value `` ) ⟹ void\n``  → ƒ-on-fna-field-value-changed\n value    readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\n\nonFnaFieldNodeBecameInvalid #  onFnaFieldNodeBecameInvalid(validity `` ) ⟹ void\n``  → ƒ-on-fna-field-node-became-invalid\noverwrite onFnaFieldNodeBecameInvalid function\n validity    "});index.add({'id':180,'href':'/docs/components/furo-ui5-date-time-picker-labeled/','title':"furo-ui5-date-time-picker-labeled",'section':"components",'content':"furo-ui5-date-time-picker-labeled #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-date-time-picker-labeled.js'; exports FuroUi5DateTimePickerLabeled js exports \u0026lt;furo-ui5-date-time-picker-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\nlabeled input field\nfuro-ui5-date-time-picker-labeled The furo-ui5-date-time-picker-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\nAttributes and Properties #  label #  label string default: ''\nthe label for the data-date-picker required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → String\nFires the field value when it changes in ISO 8601 format. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    "});index.add({'id':181,'href':'/docs/components/furo-ui5-dialog/','title':"furo-ui5-dialog",'section':"components",'content':"furo-ui5-dialog #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-dialog.js'; exports \u0026lt;furo-ui5-dialog\u0026gt; custom-element-definition superclass Dialog\nDialog element\nfuro-ui5-dialog is a extended ui5-dialog which can attach itself to a parent dom element.\nThis is helpful, when you have used z-indexes in one of the parents, which put the original ui5-dialog behind the backdrop.\nUse this component like a regular ui5-dialog and do not forget to place the furo-ui5-dialog-display in one of the parent elements.\nAttributes and Properties #  Methods #  show #  show() ⟹ void\n* → ƒ-show\n\n"});index.add({'id':182,'href':'/docs/components/furo-ui5-dialog-display/','title':"furo-ui5-dialog-display",'section':"components",'content':"furo-ui5-dialog-display #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-dialog-display.js'; exports \u0026lt;furo-ui5-dialog-display\u0026gt; custom-element-definition superclass LitElement\nDisplay position for a dialog\nfuro-ui5-dialog-display will catch furo-ui5-dialog elements, to display it in the dom of the parent element.\nThe first furo-ui5-dialog-display will catch the furo-ui5-dialog register request from a underlying furo-ui5-dialog.\nAttributes and Properties #  Methods #  "});index.add({'id':183,'href':'/docs/components/furo-ui5-form-field-container/','title':"furo-ui5-form-field-container",'section':"components",'content':"furo-ui5-form-field-container #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-form-field-container.js'; exports FuroUi5FormFieldContainer js exports \u0026lt;furo-ui5-form-field-container\u0026gt; custom-element-definition superclass LitElement mixes FBP\nform field container\nfuro-ui5-form-field-container The furo-ui5-form-field-container gives the user a layout to manage input field and labels according to the design specification of SAP Fiori.\nAttributes and Properties #  Methods #  Slots #  label #  Type: HTMLElement\ndefines the label to be displayed. default #  Type: HTMLElement\ndefines the form field to be displayed in the container element. Example html \u0026lt;furo-ui5-form-field-container\u0026gt; \u0026lt;ui5-label label slot=\u0026quot;label\u0026quot; for=\u0026quot;Custom\u0026quot; show-colon\u0026gt;Currency / Units (custom)\u0026lt;/ui5-label\u0026gt; \u0026lt;furo-horizontal-flex id=\u0026quot;Custom\u0026quot; content space\u0026gt; \u0026lt;furo-ui5-text-input flex ƒ-bind-data=\u0026quot;--entity(*.data.furo_data_money_input.currency_code)\u0026quot;\u0026gt;\u0026lt;/furo-ui5-text-input\u0026gt; \u0026lt;furo-ui5-number-input flex ƒ-bind-data=\u0026quot;--entity(*.data.furo_data_money_input.units)\u0026quot;\u0026gt;\u0026lt;/furo-ui5-number-input\u0026gt; \u0026lt;/furo-horizontal-flex\u0026gt; \u0026lt;/furo-ui5-form-field-container\u0026gt;  The form and simple form in size L use a two-column layout within the responsive grid layout by default. That means that the form groups are placed next to each other to have all the information on one screen and to avoid scrolling. In these columns, the labels are positioned in the same row as the corresponding input field or value. So the form groups adopt the Z layout (reading direction in rows, not in columns). The label-field ratio is 4:8:0 by default: 4 grid columns of the responsive grid layout are used by the labels. 8 grid columns of the responsive grid layout are used by fields. 0 grid columns of the responsive grid layout are used by empty columns. Size M of the form and simple form also has a single-column layout within the responsive grid layout by default. However, in size M the labels are positioned in the same row as the corresponding input field or value, and form groups are positioned below each other. The label-field ratio is 3:9:0 by default: 2 grid columns of the responsive grid layout are used by the labels. 10 grid columns of the responsive grid layout are used by the fields. 0 columns of the responsive grid layout are used by empty columns. Size S (Smartphones and Dialogs) The form and simple form use a single-column layout within the responsive grid layout in size S by default. This means that the form groups are positioned below each other in a single column and the labels are positioned above the fields to avoid truncation of the labels. The label-field ratio is 12:12:0 by default: 12 grid columns of the responsive grid layout are used by the labels. (A label handles the space of a whole row.) 12 grid columns of the responsive grid layout are used by the fields. (A field handles the space of a whole row.) 0 grid columns of the responsive grid layout are used by empty columns. (There is no empty space on the right of the field.) Styling #  The following custom properties available for styling:\n   Custom property Description     --furo-ui5-form-field-container-grid-row-gap grid row gap  default: 0 fallback: N/A   --furo-ui5-form-field-container-grid-column-gap grid column gap  default: 1em fallback: N/A   --furo-ui5-form-field-container-label-justify-gap label alignment (start, end)  default: end fallback: N/A    "});index.add({'id':184,'href':'/docs/components/furo-ui5-header-panel/','title':"furo-ui5-header-panel",'section':"components",'content':"furo-ui5-header-panel #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-header-panel.js'; exports FuroUi5HeaderPanel js exports \u0026lt;furo-ui5-header-panel\u0026gt; custom-element-definition superclass LitElement mixes FBP\nA bindable header panel\nfuro-ui5-header-panel A bindable header panel.\nInfo: This component is intended to use as a header panel, if you need panels in your view, consider to use a ui5-panel directly. That is also the reason that the api does not match with ui5-panel.\nThis component is a container which has a header and a content area and is used for grouping and displaying information. It can be collapsed to save space on the screen.\nAttributes and Properties #  icon #  icon string default: ''\nicon iconSize #  icon-size string default: 'S'\nsize of the icon. Available options are: XS S M L XL. Default is S. headerText #  header-text string default: ''\nHeader Text secondaryText #  secondary-text string default: ''\nsub title collapsed #  collapsed reflects boolean default: false\n\nMethods #  bindHeaderText #  bindHeaderText(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-header-text\nBind any scalar field to set the title of the panel.\n fieldNode    bindSecondaryText #  bindSecondaryText(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-secondary-text\nBind any scalar field to set the secondaryText of the panel.\n fieldNode    bindNavNode #  bindNavNode(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-nav-node\nbind a furo.navigation.Navigationnode field\n fieldNode    bindIcon #  bindIcon(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-icon\nBind any scalar field to set the title of the panel. Do not forget to import the icon you will use in your component.\n fieldNode    toggleCollapse #  toggleCollapse() ⟹ void\n* → ƒ-toggle-collapse\ntoggles the collapse state\n\nSlots #  action #  Type: HTMLElement [0..n]\ndefines an action, displayed in the right most part of the header panel. default #  Type: HTMLElement [0..n]\ndefines the content of the panel ### Styling The following custom properties and mixins are available for styling: Styling #  The following custom properties available for styling:\n   Custom property Description     --furo-ui5-header-panel-icon-color Color of the icon  default: --ui5-avatar-initials-color fallback: #ffffff   --furo-ui5-header-panel-icon-background-color background Color of the icon  default: --ui5-avatar-accent6 fallback: #354a5f   --furo-ui5-header-panel-splitter-start-color the gradient-start hex-Color of the splitter  default: --primary-dark fallback: #354a5f   --furo-ui5-header-panel-splitter-end-rgba-color the gradient-end rgba-Color of the splitter  default: --primary-rgb fallback: rgba(8, 84, 16, 0)    "});index.add({'id':185,'href':'/docs/components/furo-ui5-message-strip/','title':"furo-ui5-message-strip",'section':"components",'content':"furo-ui5-message-strip #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-message-strip.js'; exports FuroUi5MessageStrip js exports \u0026lt;furo-ui5-message-strip\u0026gt; custom-element-definition superclass LitElement mixes FBP\nfuro ui5 message strip\nfuro-ui5-message-strip\nThe furo-ui5-message-strip component enables the embedding of app-related messages. It displays 4 types of messages, each with corresponding semantic color and icon: Information, Positive, Warning and Negative. Each message can have a Close button, so that it can be removed from the UI, if needed.\nIt should be used together witch furo-ui5-message-strip-display. You can place those two components into different places. Best place the furo-ui5-message-strip-display on the main site. then you only need one furo-ui5-message-strip-display. It can work with n furo-ui5-message-strip. https://experience.sap.com/fiori-design-web/message-strip/\n\u0026lt;furo-ui5-message-strip-display\u0026gt;\u0026lt;/furo-ui5-message-strip-display\u0026gt; \u0026lt;furo-ui5-message-strip ƒ-show-information=\u0026quot;--wire\u0026quot;\u0026gt;\u0026lt;/furo-ui5-message-strip\u0026gt; Attributes and Properties #  noCloseButton #  no-close-button boolean default: false\nDefines whether the MessageStrip renders close icon. noIcon #  no-icon boolean default: false\nDefines whether the MessageStrip will show an icon in the beginning. You can directly provide an icon with the icon slot. Otherwise, the default icon for the type will be used. displayMessage #  default: ''\n\n_md #   \nsize #  size \ndefine the width of ui5-messagestrip. e.g. 200px message #  message \nthe text message of the message strip Events #  open-furo-ui5-message-strip-requested #  @-open-furo-ui5-message-strip-requested → {Object} this\nFired when open message strip is requested message-strip-closed #  @-message-strip-closed → {Object} payload\nFired when the MessageStrip is closed Methods #  _close #  _close() ⟹ void\n* → ƒ\u0026ndash;close\nthe event message-strip-closed will be sent with payload when the MessageStrip is closed\n\nshowInformation #  showInformation(msg `` ) ⟹ void\n``  → ƒ-show-information\nshows an information message if the param msg is empty, the attribute message is used.\n msg    showSuccess #  showSuccess(msg `` ) ⟹ void\n``  → ƒ-show-success\nshows a success message if the param msg is empty, the attribute message is used.\n msg    showWarning #  showWarning(msg `` ) ⟹ void\n``  → ƒ-show-warning\nshows a warning message if the param msg is empty, the attribute message is used.\n msg    showError #  showError(msg `` ) ⟹ void\n``  → ƒ-show-error\nshows an error message if the param msg is empty, the attribute message is used.\n msg    showGrpcLocalizedMessage #  showGrpcLocalizedMessage(rpcStatus `` ) ⟹ void\n``  → ƒ-show-grpc-localized-message\nshows a google rpc status message (message LocalizedMessage) Provides a localized error message that is safe to return to the user which can be attached to an RPC error.\nRendering rules:\n Every @type LocalizedMessage inside of details[] is displayed with a line break in the message strip. One message strip element is created per RPC status.  Example rpc status:\n1 2 3 4 5 6 7 8 9 10 11 12  { \u0026#34;code\u0026#34;:3, \u0026#34;message\u0026#34;:\u0026#34;Missing mandatory values\u0026#34;, \u0026#34;details\u0026#34;:[ {\u0026#34;@type\u0026#34;:\u0026#34;type.googleapis.com/google.rpc.LocalizedMessage\u0026#34;,\u0026#34;locale\u0026#34;:\u0026#34;en-GB\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;Please register all the mandatory values.\u0026#34;}, {\u0026#34;@type\u0026#34;:\u0026#34;type.googleapis.com/google.rpc.LocalizedMessage\u0026#34;,\u0026#34;locale\u0026#34;:\u0026#34;en-GB\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;If you need help completing the data, call 0800-HELP-FURO.\u0026#34;}, {\u0026#34;@type\u0026#34;:\u0026#34;type.googleapis.com/google.rpc.BadRequest\u0026#34;,\u0026#34;field_violations\u0026#34;:[ {\u0026#34;field\u0026#34;:\u0026#34;short_form\u0026#34;,\u0026#34;description\u0026#34;:\u0026#34;The country designation (short form) should be set.\u0026#34;}, {\u0026#34;field\u0026#34;:\u0026#34;id\u0026#34;,\u0026#34;description\u0026#34;:\u0026#34;The id should be ISO Alpha-2 code as described in the ISO 3166 international standard\u0026#34;}, {\u0026#34;field\u0026#34;:\u0026#34;area\u0026#34;,\u0026#34;description\u0026#34;:\u0026#34;Please set a value for the field area.\u0026#34;}] } ]}   Example message strip display:\n| X Please register all the mandatory values. | If you need help completing the data, call 0800-HELP-FURO. https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto\n rpcStatus    parseGrpcStatus #  parseGrpcStatus(rpcStatus `` ) ⟹ void\n``  → ƒ-parse-grpc-status\nDeprecated function! Use showGrpcLocalizedMessage parse grpc status object. the message in grpc status will be used as the content massage\n rpcStatus    "});index.add({'id':186,'href':'/docs/components/furo-ui5-message-strip-display/','title':"furo-ui5-message-strip-display",'section':"components",'content':"furo-ui5-message-strip-display #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-message-strip-display.js'; exports FuroUi5MessageStripDisplay js exports \u0026lt;furo-ui5-message-strip-display\u0026gt; custom-element-definition superclass LitElement mixes FBP\nfuro ui5 message strip\nfuro-ui5-message-strip-display\nThe furo-ui5-message-strip-display is the render component for the furo-ui5-message-strip component. The display component can be controlled by several furo-ui5-message-strip components.\n \u0026lt;furo-ui5-message-strip-display\u0026gt;\u0026lt;/furo-ui5-message-strip-display\u0026gt; \u0026lt;furo-ui5-message-strip ƒ-show-information=\u0026quot;--wire\u0026quot;\u0026gt;\u0026lt;/furo-ui5-message-strip\u0026gt; \u0026lt;furo-ui5-message-strip ƒ-show-warning=\u0026quot;--wire\u0026quot; message=\u0026quot;Static warning message\u0026quot;\u0026gt;\u0026lt;/furo-ui5-message-strip\u0026gt; Attributes and Properties #  headerText #  default: ''\n\n_messageStrips #  default: []\n\nMethods #  clearAll #  clearAll() ⟹ void\n* → ƒ-clear-all\nRemoves all strips\n\nshow #  show(source *text* ) ⟹ void\n   → ƒ-show\nshow notification list item.\n source  text    "});index.add({'id':187,'href':'/docs/components/furo-ui5-money-input/','title':"furo-ui5-money-input",'section':"components",'content':"furo-ui5-money-input #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-money-input.js'; exports FuroUi5MoneyInput js exports \u0026lt;furo-ui5-money-input\u0026gt; custom-element-definition superclass LitElement mixes FBP mixes FieldNodeAdapter\nBinds a entityObject field google.type.Money to a number-input and currency dropdown fields\nfuro-data-money-input Binds a entityObject field google.type.Money to a furo-number-input and currency dropdown fields \nyou can set currencies dropdown with options in meta or set options attribute as json in element or set currencies as string in element. the three ways have priority : currencies \u0026gt; options as attribute \u0026gt; options in meta. When no currencies is setted. Default currency will be CHF\n\u0026lt;furo-ui5-money-input autofocus ƒ-bind-data=\u0026quot;\u0026ndash;entity(.furo_data_money_input)\u0026quot; options='{\u0026ldquo;list\u0026rdquo;: [ \u0026ldquo;CHF\u0026rdquo;,\u0026ldquo;EUR\u0026rdquo;,\u0026ldquo;USD\u0026rdquo; ]}'\u0026gt; \u0026lt;furo-ui5-money-input autofocus ƒ-bind-data=\u0026quot;\u0026ndash;entity(.furo_data_money_input)\u0026quot; options='{\u0026ldquo;list\u0026rdquo;: [ {\u0026ldquo;id\u0026rdquo;:\u0026ldquo;CHF\u0026rdquo;,\u0026ldquo;label\u0026rdquo;:\u0026ldquo;Schweiz\u0026rdquo;},{\u0026ldquo;id\u0026rdquo;:\u0026ldquo;EUR\u0026rdquo;,\u0026ldquo;label\u0026rdquo;:\u0026ldquo;Europa\u0026rdquo;, \u0026ldquo;selected\u0026rdquo;: true}'\u0026gt; \u0026lt;furo-ui5-money-input autofocus ƒ-bind-data=\u0026quot;\u0026ndash;entity(*.furo_data_money_input)\u0026quot; currencies=\u0026ldquo;CHF,EUR,USD\u0026rdquo;\u0026gt;\nsupported meta and constraints #   readonly: true , set the element to readonly required: true , set the element to required  Tags: money input\nAttributes and Properties #  options #  options \nthe option object defines the currencies dropdown \u0026lsquo;{\u0026ldquo;list\u0026rdquo;: [ \u0026ldquo;chf\u0026rdquo;,\u0026ldquo;eur\u0026rdquo;,\u0026ldquo;usd\u0026rdquo; ]}\u0026rsquo; \u0026lsquo;{\u0026ldquo;list\u0026rdquo;: [ {\u0026ldquo;id\u0026rdquo;:\u0026ldquo;CHF\u0026rdquo;,\u0026ldquo;label\u0026rdquo;:\u0026ldquo;Schweiz\u0026rdquo;},{\u0026ldquo;id\u0026rdquo;:\u0026ldquo;EUR\u0026rdquo;,\u0026ldquo;label\u0026rdquo;:\u0026ldquo;Europa\u0026rdquo;, \u0026ldquo;selected\u0026rdquo;: true}\u0026rsquo; currencies #  currencies \nthe string list of currencies for the dropdown. e.g. \u0026ldquo;CHF,EUR,USD\u0026rdquo; _previousValueState #  default: { state: 'None', message: '' }\n\n_attributesFromFNA #  default: { readonly: undefined, }\n\n_constraintsFromFNA #  default: { required: undefined, }\n\n_privilegedAttributes #  default: { readonly: null, required: null, disabled: null, }\n\ndisabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → Money\nFired when the input operation has finished by pressing Enter or on focusout. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds a fieldNode. Make sure the type of your field is accepted by the implemented component.\n fieldNode    readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. Attributes that can be se are required,readonly,disabled , Use this after manual or scripted update of the attributes.\n\n_convertDataToMoneyObj #  _convertDataToMoneyObj(currency *amount* obj `` ) ⟹ void\n  ``  → ƒ\u0026ndash;convert-data-to-money-obj\n currency  amount  obj    _getElements #  _getElements() ⟹ void\n* → ƒ\u0026ndash;get-elements\n\nsetOptions #  setOptions(options `` ) ⟹ void\n``  → ƒ-set-options\nset options for currencies dropdown\n options    injectEntities #  injectEntities(entities `` ) ⟹ void\n``  → ƒ-inject-entities\ninject the currency entities for dropdown\n entities    updateSuggestions #  updateSuggestions() ⟹ void\n* → ƒ-update-suggestions\n\n"});index.add({'id':188,'href':'/docs/components/furo-ui5-money-input-labeled/','title':"furo-ui5-money-input-labeled",'section':"components",'content':"furo-ui5-money-input-labeled #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-money-input-labeled.js'; exports FuroUi5MoneyInputLabeled js exports \u0026lt;furo-ui5-money-input-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\nlabeled input field\nfuro-ui5-money-input-labeled The furo-ui5-money-input-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\nAttributes and Properties #  label #  label string default: ''\nthe label for the data-money-input required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → google.type.Money\nFires the field value when it changes. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    "});index.add({'id':189,'href':'/docs/components/furo-ui5-multi-input/','title':"furo-ui5-multi-input",'section':"components",'content':"furo-ui5-multi-input #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-multi-input.js'; exports FuroUi5MultiInput js exports \u0026lt;furo-ui5-multi-input\u0026gt; custom-element-definition extends src/furo-ui5-multi-input.js mixes FieldNodeAdapter\ndata ui5 data multi input\nfuro-ui5-multi-input\nThe furo-ui5-multi-input component represents the repeated strings. e.g. [\u0026ldquo;aaa\u0026rdquo;,\u0026ldquo;bbb\u0026rdquo;,\u0026ldquo;ccc\u0026rdquo;]\nAttributes and Properties #  tmpValue #  default: []\n\n_previousValueState #  default: { state: 'None', message: '' }\n\n_attributesFromFNA #  default: { readonly: undefined, placeholder: undefined, }\n\n_constraintsFromFNA #  default: { required: undefined, max: undefined, // maps to maxlength }\n\n_labelsFromFAT #  default: { readonly: undefined, disabled: undefined, required: undefined, }\n\n_attributesFromFAT #  default: { placeholder: undefined, max: undefined, // maps to maxlength }\n\n_privilegedAttributes #  default: { readonly: null, placeholder: null, required: null, disabled: null, }\n\nMethods #  readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. those attributes can be set. value-state, value-state-message, placeholder, required,readonly,disabled Use this after manual or scripted update of the attributes.\n\n_updateItems #  _updateItems(val `` ) ⟹ void\n``  → ƒ\u0026ndash;update-items\n val    _createUi5Token #  _createUi5Token(text `` ) ⟹ void\n``  → ƒ\u0026ndash;create-ui-5token\n text    _triggerValueChangedEvent #  _triggerValueChangedEvent(val `` ) ⟹ void\n``  → ƒ\u0026ndash;trigger-value-changed-event\n val    _removeAllItems #  _removeAllItems() ⟹ void\n* → ƒ\u0026ndash;remove-all-items\n\n"});index.add({'id':190,'href':'/docs/components/furo-ui5-multi-input-labeled/','title':"furo-ui5-multi-input-labeled",'section':"components",'content':"furo-ui5-multi-input-labeled #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-multi-input-labeled.js'; exports FuroUi5MultiInputLabeled js exports \u0026lt;furo-ui5-multi-input-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\nlabeled textarea field\nfuro-ui5-multi-input-labeled The furo-ui5-multi-input-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\nAttributes and Properties #  label #  label string default: ''\nthe label for the data-multi-input required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. showValueHelpIcon #  show-value-help-icon \nDetermines whether a value help icon will be should in the end of the input. Pressing the icon will fire value-help-trigger event. Events #  value-changed #  @-value-changed → ``\nFires the field value when it changes. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    "});index.add({'id':191,'href':'/docs/components/furo-ui5-notification/','title':"furo-ui5-notification",'section':"components",'content':"furo-ui5-notification #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-notification.js'; exports FuroUi5Notification js exports \u0026lt;furo-ui5-notification\u0026gt; custom-element-definition superclass LitElement\na banner\nfuro-ui5-notification Lit element\nfuro-ui5-notification should be used together witch furo-ui5-notification-list-display or furo-ui5-notification-group-display. you can place those two components into different places. best place the furo-ui5-notification-list(or group)-display on the main site. then you only need one furo-ui5-notification-list(or group)-display. it can work with n furo-ui5-notification.\nAttributes and Properties #  dismissButtonText #  default: 'dismiss'\n\ntext #  text \nbanner text content. Use word to mark as strong. Use \\n to insert a line break.\nHTML tags will be stripped out. payload #  payload \npayload. can be a GRPC error or a notification message collection. _type #  _type \ntype of the notification. grpc or notification Events #  open-furo-ui5-notification-requested #  @-open-furo-ui5-notification-requested → {Object} this\nFired when value open banner is requested open-furo-ui5-notification-group-requested #  @-open-furo-ui5-notification-group-requested → {Object} this\nFired when value open banner is requested notification-closed. #  @-notification-closed. → {Object} payload\nFired when notification is closed. notification-custom-action #  @-notification-custom-action → {Object} payload\nFired when notification custom action is triggered. this is a general action event. notification-custom-action-commandName #  @-notification-custom-action-commandName → {Object} payload\nFired when notification custom action is triggered. Methods #  _requestListDisplay #  _requestListDisplay(p Object ) ⟹ void\nObject  → ƒ\u0026ndash;request-list-display\nrequest to display the notifications\n p payload   _requestGroupDisplay #  _requestGroupDisplay(p Object ) ⟹ void\nObject  → ƒ\u0026ndash;request-group-display\nrequest to display the notifications in group\n p payload   parseGrpcStatus #  parseGrpcStatus(status *s* ) ⟹ void\n   → ƒ-parse-grpc-status\ninject a grpc status object parse grpc status object and set the label according to the LocalizedMessage in status. https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto .\n status  s    injectNotificationCollection #  injectNotificationCollection(c `` ) ⟹ void\n``  → ƒ-inject-notification-collection\ninject an array of notification messages. the notification message should be an array of the following object signature: { \u0026ldquo;id\u0026rdquo;: 1, \u0026ldquo;display_name\u0026rdquo;: \u0026ldquo;\u0026rdquo;, \u0026ldquo;heading\u0026rdquo;: \u0026ldquo;heading 1\u0026rdquo;, \u0026ldquo;message_priority\u0026rdquo;: \u0026ldquo;High\u0026rdquo;, \u0026ldquo;category\u0026rdquo;: \u0026ldquo;warning\u0026rdquo;, \u0026ldquo;category_priority\u0026rdquo;: \u0026ldquo;High\u0026rdquo;, \u0026ldquo;actions\u0026rdquo;: [ { \u0026ldquo;icon\u0026rdquo;:\u0026ldquo;accept\u0026rdquo;, \u0026ldquo;command\u0026rdquo;:\u0026ldquo;accept\u0026rdquo;, \u0026ldquo;text\u0026rdquo;: \u0026ldquo;accept\u0026rdquo; }, { \u0026ldquo;icon\u0026rdquo;:\u0026ldquo;message-error\u0026rdquo;, \u0026ldquo;command\u0026rdquo;:\u0026ldquo;reject\u0026rdquo;, \u0026ldquo;text\u0026rdquo;: \u0026ldquo;Reject\u0026rdquo; } ], \u0026ldquo;message\u0026rdquo;: \u0026ldquo;Markdown | Less | Pretty\\n\u0026mdash; | \u0026mdash; | \u0026mdash;\\nStill | renders | nicely\\n1 | 2 | 3\u0026rdquo; }\n c    "});index.add({'id':192,'href':'/docs/components/furo-ui5-notification-group-display/','title':"furo-ui5-notification-group-display",'section':"components",'content':"furo-ui5-notification-group-display #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-notification-group-display.js'; exports FuroUi5NotificationGroupDisplay js exports \u0026lt;furo-ui5-notification-group-display\u0026gt; custom-element-definition superclass LitElement mixes FBP\nui5 notification group display\nfuro-ui5-notification-group Lit element\nbest place the furo-ui5-notification-group on the main site. then you only need one furo-ui5-notification-group. you can also use more furo-ui5-notification-group for special needs. but You have to be sure the furo-ui5-notification-group can receive the notification events.\nAttributes and Properties #  headerText #  header-text string default: ''\nthe header text of the notification target #  target \nthe target dom object, which sends the notification event collapsed #  collapsed \nDefines if the group is collapsed or expanded. showCounter #  show-counter \nDefines if the items counter would be displayed. showClose #  show-close \nDefines if the close button would be displayed. Methods #  clearAll #  clearAll() ⟹ void\n* → ƒ-clear-all\nclear all notifications\n\n"});index.add({'id':193,'href':'/docs/components/furo-ui5-notification-list-display/','title':"furo-ui5-notification-list-display",'section':"components",'content':"furo-ui5-notification-list-display #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-notification-list-display.js'; exports FuroUi5NotificationListDisplay js exports \u0026lt;furo-ui5-notification-list-display\u0026gt; custom-element-definition superclass LitElement mixes FBP\nui5 notification list\nfuro-ui5-notification-list Displays google.rpc.Status messages in a grouped list. https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto.\nBest place the furo-ui5-notification-list on the main site. then you only need one furo-ui5-notification-list. you can also use more than one furo-ui5-notification-list for special needs. But you have to be sure the furo-ui5-notification-list can receive the notification events from furo-ui5-notification.\nAttributes and Properties #  headerText #  header-text string default: ''\nthe header text of the notification noDataText #  no-data-text string default: 'No messages'\nDefines the text that is displayed when the list contains no items. _notificationCount #  default: 0\n\ngroupTitleHelp #  group-title-help string default: 'Help'\nDefines the notification group element title for notifications of type \u0026ldquo;type.googleapis.com/google.rpc.Help\u0026rdquo; groupTitleBadRequest #  group-title-bad-request string default: 'Bad Request'\nDefines the notification group element title for notifications of type \u0026ldquo;type.googleapis.com/google.rpc.BadRequest\u0026rdquo; groupTitleMessage #  group-title-message string default: 'Information'\nDefines the notification group element title for notifications of type \u0026ldquo;type.googleapis.com/google.rpc.LocalizedMessage\u0026rdquo; _md #   \nshowClose #  show-close \nDefines if the close button would be displayed. Events #  notification-counter-update #  @-notification-counter-update → CustomEvent\n\nvalue-changed #  @-value-changed → Number\nFires a notification counter changed. Use this event to show the amount of notifications to the user. Methods #  parseGrpcStatus #  parseGrpcStatus(d `` ) ⟹ void\n``  → ƒ-parse-grpc-status\nparse grpc status object and set the notification text according to the LocalizedMessage in status. https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto.\n d    parseNotificationMessage #  parseNotificationMessage(message `` ) ⟹ void\n``  → ƒ-parse-notification-message\nparse notification message and set the ui5 notification properties like priority, actions, heading.. the notification message should be a furo.notification type: { \u0026ldquo;id\u0026rdquo;: 1, \u0026ldquo;display_name\u0026rdquo;: \u0026ldquo;\u0026rdquo;, \u0026ldquo;heading\u0026rdquo;: \u0026ldquo;heading 1\u0026rdquo;, \u0026ldquo;message_priority\u0026rdquo;: \u0026ldquo;High\u0026rdquo;, \u0026ldquo;category\u0026rdquo;: \u0026ldquo;warning\u0026rdquo;, \u0026ldquo;category_priority\u0026rdquo;: \u0026ldquo;High\u0026rdquo;, \u0026ldquo;actions\u0026rdquo;: [ { \u0026ldquo;icon\u0026rdquo;:\u0026ldquo;accept\u0026rdquo;, \u0026ldquo;command\u0026rdquo;:\u0026ldquo;accept\u0026rdquo;, \u0026ldquo;text\u0026rdquo;: \u0026ldquo;accept\u0026rdquo; }, { \u0026ldquo;icon\u0026rdquo;:\u0026ldquo;message-error\u0026rdquo;, \u0026ldquo;command\u0026rdquo;:\u0026ldquo;reject\u0026rdquo;, \u0026ldquo;text\u0026rdquo;: \u0026ldquo;Reject\u0026rdquo; } ], \u0026ldquo;message\u0026rdquo;: \u0026ldquo;Markdown | Less | Pretty\\n\u0026mdash; | \u0026mdash; | \u0026mdash;\\nStill | renders | nicely\\n1 | 2 | 3\u0026rdquo; }\n message    _show #  _show() ⟹ void\n* → ƒ\u0026ndash;show\nshows grpc status notifications implemented types are:\n Bad Request with Field Violations   \n_dispatchNotificationCounterUpdates #  _dispatchNotificationCounterUpdates(count `` ) ⟹ void\n``  → ƒ\u0026ndash;dispatch-notification-counter-updates\n count    clearAll #  clearAll() ⟹ void\n* → ƒ-clear-all\nclear all notifications\n\n"});index.add({'id':194,'href':'/docs/components/furo-ui5-number-input/','title':"furo-ui5-number-input",'section':"components",'content':"furo-ui5-number-input #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-number-input.js'; exports FuroUi5NumberInput js exports \u0026lt;furo-ui5-number-input\u0026gt; custom-element-definition extends src/furo-ui5-number-input.js mixes FieldNodeAdapter\ndata number input field\nThe \u0026lsquo;furo-ui5-number-input\u0026rsquo; component allows the user to enter and edit numbers with data binding.\nIt supports all features from the SAP ui5 Input element.\nYou can bind any number type, any furo.fat.xxx number type or the google.wrapper.xxx number types.\n1 2 3  \u0026lt;furo-ui5-number-input ƒ-bind-data=\u0026#34;--daoCountry(*.data.population)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-number-input\u0026gt;   Specificity #   Attributes which are set in the html source will have the highest specificity and will never get overwritten by metas or fat. Attributes set in meta will have the lowest specificity and will be overwritten by attributes from fat.     meta fat html     1 10 100    supported FAT attributes #   \u0026ldquo;readonly\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to readonly \u0026ldquo;required\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to required \u0026ldquo;disabled\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to disabled \u0026ldquo;placeholder\u0026rdquo;:\u0026ldquo;string\u0026rdquo; set the placeholder for the element  supported meta and constraints #   readonly: true , set the element to readonly placeholder:\u0026ldquo;some string\u0026rdquo; set the placeholder for the element  The constraint required will mark the element as required\nMethods #  bind-data(fieldNode) Bind a entity field. You can use the entity even when no data was received.\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with \u0026ndash;entity(*.fields.fieldname)\nAttributes and Properties #  nativeInputAttributes #   \n_previousValueState #  default: { state: 'None', message: '' }\n\n_attributesFromFNA #  default: { readonly: undefined, placeholder: undefined, }\n\n_constraintsFromFNA #  default: { required: undefined, }\n\n_labelsFromFAT #  default: { readonly: undefined, disabled: undefined, required: undefined, }\n\n_attributesFromFAT #  default: { placeholder: undefined, }\n\n_privilegedAttributes #  default: { readonly: null, placeholder: null, required: null, disabled: null, icon: null, }\n\nEvents #  change #  @-change → number\nFired when the input operation has finished by pressing Enter or on focusout. input #  @-input → ``\nFired when the value of the ui5-input changes at each keystroke, and when a suggestion item has been selected. xxxx #  @-xxxx → ``\nAll events from the ui5 Input element. value-changed #  @-value-changed → String\nFires the field value when it changes. Methods #  readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. those attributes can be set. value-state, value-state-message, icon, placeholder, required,readonly,disabled Use this after manual or scripted update of the attributes.\n\n"});index.add({'id':195,'href':'/docs/components/furo-ui5-number-input-labeled/','title':"furo-ui5-number-input-labeled",'section':"components",'content':"furo-ui5-number-input-labeled #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-number-input-labeled.js'; exports FuroUi5NumberInputLabeled js exports \u0026lt;furo-ui5-number-input-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\nlabeled input field\nfuro-ui5-number-input-labeled The furo-ui5-number-input-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\nAttributes and Properties #  label #  label string default: ''\nthe label for the data-number-input icon #  icon string default: ''\n\nrequired #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user and appears in disabled state. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → Number\nFires the field value when it changes. Methods #  focus #  focus(options Object ) ⟹ void\nObject  → ƒ-focus\nFocuses the underlying ui5 input element\n options https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus   bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    "});index.add({'id':196,'href':'/docs/components/furo-ui5-pagination-bar/','title':"furo-ui5-pagination-bar",'section':"components",'content':"furo-ui5-pagination-bar #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-pagination-bar.js'; exports FuroUi5PaginationBar js exports \u0026lt;furo-ui5-pagination-bar\u0026gt; custom-element-definition superclass LitElement mixes FBP\nPagination Bar\nfuro-ui5-pagination-bar this pagination element loops the hts array and find out the pagination information like prev, next, first and last\nAttributes and Properties #  currentPage #  currentPage number default: 0\n\nfirst #  first \n\nprev #  prev \n\nnext #  next \n\nlast #  last \n\nEvents #  hts-injected #  @-hts-injected → CustomEvent\n\npagination-first #  @-pagination-first → ``\nIs fired if the pagination button \u0026lsquo;sys_first_page\u0026rsquo; was clicked pagination-last #  @-pagination-last → ``\nIs fired if the pagination button \u0026lsquo;sys_last_page\u0026rsquo; was clicked pagination-prev #  @-pagination-prev → ``\nIs fired if the pagination button \u0026lsquo;sys_prev_page\u0026rsquo; was clicked pagination-next #  @-pagination-next → ``\nIs fired if the pagination button \u0026lsquo;sys_next_page\u0026rsquo; was clicked Tags: pagination Methods #  inject #  inject(hts `` ) ⟹ void\n``  → ƒ-inject\ninit pagination attributes\n hts    _disableAll #  _disableAll() ⟹ void\n* → ƒ\u0026ndash;disable-all\n\n_FBPReady #  _FBPReady() ⟹ void\n* → ƒ\u0026ndash;fbp-ready\n\nStyling #  The following custom properties available for styling:\n   Custom property Description     --furo-ui5-pagination-bar-padding-right Right padding definition  default: --spacing fallback: 24px   --furo-ui5-pagination-bar-background-color Background color  default: --surface-light fallback: #ffffff    "});index.add({'id':197,'href':'/docs/components/furo-ui5-password-input/','title':"furo-ui5-password-input",'section':"components",'content':"furo-ui5-password-input #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-password-input.js'; exports FuroUi5PasswordInput js exports \u0026lt;furo-ui5-password-input\u0026gt; custom-element-definition extends src/furo-ui5-password-input.js mixes FieldNodeAdapter\ndata password input field\nThe \u0026lsquo;furo-ui5-password-input\u0026rsquo; component allows the user to enter and edit password with data binding.\nIt supports all features from the SAP ui5 Input element.\nYou can bind any string type, like furo.fat.String type or the google.protobuf.StringValue type.\n1 2 3  \u0026lt;furo-ui5-password-input ƒ-bind-data=\u0026#34;--daoCountry(*.data.name)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-password-input\u0026gt;   Specificity #   Attributes which are set in the html source will have the highest specificity and will never get overwritten by metas or fat. Attributes set in meta will have the lowest specificity and will be overwritten by attributes from fat.  ** meta \u0026lt; fat \u0026lt; html **\nsupported FAT attributes #   \u0026ldquo;readonly\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to readonly \u0026ldquo;required\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to required \u0026ldquo;disabled\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to disabled \u0026ldquo;icon\u0026rdquo;:\u0026ldquo;home\u0026rdquo; set the icon \u0026ldquo;placeholder\u0026rdquo;:\u0026ldquo;string\u0026rdquo; set the placeholder for the element \u0026ldquo;max\u0026rdquo;:\u0026ldquo;number\u0026rdquo; set the maximum number of characters available in the input field.  supported meta and constraints #   readonly: true , set the element to readonly placeholder:\u0026ldquo;some string\u0026rdquo; set the placeholder for the element max:\u0026ldquo;number\u0026rdquo; set the maximum number of characters available in the input field.  The constraint required will mark the element as required\nMethods #  bind-data(fieldNode) Bind a entity field. You can use the entity even when no data was received.\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with \u0026ndash;entity(*.fields.fieldname)\nAttributes and Properties #  nativeInputAttributes #   \ntype #  default: 'Password'\n\n_previousValueState #  default: { state: 'None', message: '' }\n\n_attributesFromFNA #  default: { readonly: undefined, placeholder: undefined, }\n\n_constraintsFromFNA #  default: { required: undefined, max: undefined, // maps to maxlength }\n\n_labelsFromFAT #  default: { readonly: undefined, disabled: undefined, required: undefined, }\n\n_attributesFromFAT #  default: { placeholder: undefined, max: undefined, // maps to maxlength icon: undefined, // updates the icon }\n\n_privilegedAttributes #  default: { readonly: null, placeholder: null, required: null, disabled: null, icon: null, maxlength: null, }\n\nEvents #  change #  @-change → text\nFired when the input operation has finished by pressing Enter or on focusout. input #  @-input → ``\nFired when the value of the ui5-input changes at each keystroke, and when a suggestion item has been selected. xxxx #  @-xxxx → ``\nAll events from the ui5 Input element. value-changed #  @-value-changed → String\nFires the field value when it changes. icon-clicked #  @-icon-clicked → MouseEvent\nFired when icon is clicked password-showed #  @-password-showed → void\nFired when the password is showed, after calling the show method. password-hidden #  @-password-hidden → void\nFired when the password is hidden, after calling the hide() method. Methods #  readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. those attributes can be set. value-state, value-state-message, icon, placeholder, required,readonly,disabled Use this after manual or scripted update of the attributes.\n\nshow #  show() ⟹ void\n* → ƒ-show\nshow password\n\nhide #  hide() ⟹ void\n* → ƒ-hide\nhide password\n\ntoggleVisibility #  toggleVisibility() ⟹ void\n* → ƒ-toggle-visibility\ntoggle visibility of the password. (show/hide) password\n\n"});index.add({'id':198,'href':'/docs/components/furo-ui5-password-input-labeled/','title':"furo-ui5-password-input-labeled",'section':"components",'content':"furo-ui5-password-input-labeled #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-password-input-labeled.js'; exports FuroUi5PasswordInputLabeled js exports \u0026lt;furo-ui5-password-input-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\nlabeled input field\nfuro-ui5-password-input-labeled The furo-ui5-password-input-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\nAttributes and Properties #  label #  label string default: ''\nthe label for the data-password-input required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user and appears in disabled state. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → String\nFires the field value when it changes. Methods #  focus #  focus(options Object ) ⟹ void\nObject  → ƒ-focus\nFocuses the underlying ui5 input element\n options https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus   bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    Slots #  icon #  Type: HTMLElement\ndefines the icon to be displayed in the input element. "});index.add({'id':199,'href':'/docs/components/furo-ui5-property/','title':"furo-ui5-property",'section':"components",'content':"furo-ui5-property #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-property.js'; exports FuroUi5Property js exports \u0026lt;furo-ui5-property\u0026gt; custom-element-definition superclass LitElement mixes FBP\ndisplay and bind types of type any\nfuro-ui5-property Field for type furo.Property. This can be used to display \u0026ldquo;dynamic\u0026rdquo; fields aka properties. It works with repeated types and non repeating property types.\n1  \u0026lt;furo-ui5-property ƒ-bind-data=\u0026#34;--entity(*.single_type_property)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-property\u0026gt;   Example data for the data-object looks like this #  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  \u0026#34;single_type_property\u0026#34;: { \u0026#34;data\u0026#34;: { \u0026#34;@type\u0026#34;: \u0026#34;google.type.Date\u0026#34;, \u0026#34;day\u0026#34;: 8, \u0026#34;month\u0026#34;: 11, \u0026#34;year\u0026#34;: 2022 }, \u0026#34;display_name\u0026#34;: \u0026#34;a date\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;date\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;date\u0026#34;, \u0026#34;meta\u0026#34;: { \u0026#34;fields\u0026#34;: { \u0026#34;data\u0026#34;: { \u0026#34;meta\u0026#34;: { \u0026#34;label\u0026#34;: \u0026#34;Additional fields\u0026#34;, \u0026#34;hint\u0026#34;: \u0026#34;this is data\u0026#34; }, \u0026#34;constraints\u0026#34;: { \u0026#34;min\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;2019-09-09\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;to small\u0026#34; } } } } } }   Example StringOptions Field #  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  { \u0026#34;data\u0026#34;: { \u0026#34;@type\u0026#34;: \u0026#34;furo.StringOptionProperty\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;bb\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Display\u0026#34; }, \u0026#34;display_name\u0026#34;: \u0026#34;Display\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;opt\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;option\u0026#34;, \u0026#34;meta\u0026#34;: { \u0026#34;fields\u0026#34;: { \u0026#34;data\u0026#34;: { \u0026#34;meta\u0026#34;: { \u0026#34;label\u0026#34;: \u0026#34;Please select\u0026#34;, \u0026#34;hint\u0026#34;: \u0026#34;datehint is data\u0026#34;, \u0026#34;repeated\u0026#34;: false, \u0026#34;options\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;aa\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;The display a\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;bb\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;The display b\u0026#34; } ] } } } } }   The current type mappings are:\n \u0026ldquo;google.type.Date\u0026rdquo;: \u0026ldquo;furo-data-date-input\u0026rdquo; \u0026ldquo;furo.StringProperty\u0026rdquo;: \u0026ldquo;furo-data-text-input\u0026rdquo; \u0026ldquo;furo.IntegerProperty\u0026rdquo;: \u0026ldquo;furo-data-number-input\u0026rdquo; \u0026ldquo;furo.NumberProperty\u0026rdquo;: \u0026ldquo;furo-data-number-input\u0026rdquo; \u0026ldquo;furo.StringOptionProperty\u0026rdquo;: \u0026ldquo;furo-data-collection-dropdown\u0026rdquo;  Attributes and Properties #  context #  default: 'form'\n\nMethods #  bindData #  bindData(propertyField `` ) ⟹ void\n``  → ƒ-bind-data\n propertyField    _createPropComponent #  _createPropComponent(propertyField `` ) ⟹ void\n``  → ƒ\u0026ndash;create-prop-component\n propertyField    "});index.add({'id':200,'href':'/docs/components/furo-ui5-propertylist-display/','title':"furo-ui5-propertylist-display",'section':"components",'content':"furo-ui5-propertylist-display #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-propertylist-display.js'; exports FuroUi5PropertylistDisplay js exports \u0026lt;furo-ui5-propertylist-display\u0026gt; custom-element-definition superclass LitElement\n furo-ui5-propertylist-display allows the user to show repeated properties (furo.Property) in a readonly mode. For all other types you can use furo-ui5-typerenderer-labeled.\nThe type information of the property is used for the display of the individual attributes. E.g.\n[ { \u0026quot;code\u0026quot;: \u0026quot;c0a7f550-0fbe-4046-8fa9-60c86327b6b1\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;type.googleapis.com/furo.StringProperty\u0026quot;, \u0026quot;data\u0026quot;: \u0026quot;01032020\u0026quot; }, \u0026quot;flags\u0026quot;: [], \u0026quot;display_name\u0026quot;: \u0026quot;Vertragsbeginn\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;246d79a0-0a15-43c5-b18f-ac8a4a449df1\u0026quot;, \u0026quot;meta\u0026quot;: {} } ] You can bind the furo.Property type (single and repeated).\n1 2 3  \u0026lt;furo-ui5-propertylist-display ƒ-bind-data=\u0026#34;--daoCountry(*.data.additional_data)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-propertylist-display\u0026gt;   Attributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ boolean\nFieldNode  → ƒ-bind-data\nBinds a RepeaterNode of type furo.Property.\n fieldNode    "});index.add({'id':201,'href':'/docs/components/furo-ui5-radio-button/','title':"furo-ui5-radio-button",'section':"components",'content':"furo-ui5-radio-button #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-radio-button.js'; exports FuroUi5RadioButton js exports \u0026lt;furo-ui5-radio-button\u0026gt; custom-element-definition extends src/furo-ui5-radio-button.js mixes FieldNodeAdapter\nboolean toggle button\nThe \u0026lsquo;furo-ui5-radio-button\u0026rsquo; component allows the user to switch true and false for Bool with data binding.\nIt supports all features from the SAP ui5 toggleButton element.\nYou can bind bool type, furo.fat.Bool type or the google.wrapper.BoolValue type.\n1 2 3  \u0026lt;furo-ui5-radio-button ƒ-bind-data=\u0026#34;--daoCountry(*.data.classified_as_risk_area)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-radio-button\u0026gt;   1 2 3 4 5 6 7 8  \u0026lt;furo-ui5-radio-group\u0026gt; \u0026lt;furo-ui5-radio-button name=\u0026#34;group\u0026#34; ƒ-bind-data=\u0026#34;--daoCountry(*.data.classified_as_risk_area)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-radio-button\u0026gt; \u0026lt;furo-ui5-radio-button name=\u0026#34;group\u0026#34; ƒ-bind-data=\u0026#34;--daoCountry(*.data.classified_as_high_risk_area)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-radio-button\u0026gt; \u0026lt;/furo-ui5-radio-group\u0026gt;   Specificity #   Attributes which are set in the html source will have the highest specificity and will never get overwritten by metas or fat. Attributes set in meta will have the lowest specificity and will be overwritten by attributes from fat.     meta fat html     1 10 100    supported FAT attributes #   \u0026ldquo;readonly\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to readonly \u0026ldquo;disabled\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to disabled \u0026ldquo;icon\u0026rdquo;:\u0026quot;\u0026quot; set the icon \u0026ldquo;design\u0026rdquo;:\u0026quot;\u0026quot; set the design  supported meta and constraints #   readonly: true , set the element to readonly  The constraint required will mark the element as required\nMethods #  bind-data(fieldNode) Bind a entity field. You can use the entity even when no data was received.\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with \u0026ndash;entity(*.fields.fieldname)\nAttributes and Properties #  _previousDesign #  default: 'Default'\n\n_attributesFromFNA #  default: { readonly: undefined, disabled: undefined, label: undefined, }\n\n_constraintsFromFNA #  default: {}\n\n_attributesFromFAT #  default: { label: undefined, icon: undefined, design: undefined, }\n\n_labelsFromFAT #  default: { readonly: undefined, disabled: undefined, }\n\n_privilegedAttributes #  default: { readonly: null, disabled: null, text: null, icon: null, design: null, }\n\nEvents #  select #  @-select → ``\nFired when the input operation has finished by pressing Enter or on focusout. xxxx #  @-xxxx → ``\nAll events from the ui5 Input element. value-changed #  @-value-changed → Boolean\nFired when value changed Methods #  readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom.\n\nonFnaFieldValueChanged #  onFnaFieldValueChanged(val `` ) ⟹ void\n``  → ƒ-on-fna-field-value-changed\noverwrite onFnaFieldValueChanged\n val    onFnaFieldNodeBecameInvalid #  onFnaFieldNodeBecameInvalid() ⟹ void\n* → ƒ-on-fna-field-node-became-invalid\noverwrite onFnaFieldNodeBecameInvalid function\n\nonFnaLabelChanged #  onFnaLabelChanged(text *placeholder* ) ⟹ void\n   → ƒ-on-fna-label-changed\noverwrite onFnaLabelChanged function label is mapped to text\n text  placeholder    "});index.add({'id':202,'href':'/docs/components/furo-ui5-radio-button-group/','title':"furo-ui5-radio-button-group",'section':"components",'content':"furo-ui5-radio-button-group #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-radio-button-group.js'; exports FuroUi5RadioButtonGroup js exports \u0026lt;furo-ui5-radio-button-group\u0026gt; custom-element-definition superclass HTMLElement mixes FieldNodeAdapter\n furo-ui5-radio-button-group The furo-ui5-radio-button-group component enables users to select a single option from a set of options. When a furo-ui5-radio-button-group is selected by the user, the select event is fired. When a furo-ui5-radio-button-group that is within a group is selected, the one that was previously selected gets automatically deselected. You can group radio buttons by using the group-name property.\n\u0026lt;furo-ui5-radio-button-group group-name=\u0026quot;Option\u0026quot; ƒ-bind-data=\u0026quot;--daoPerson(*.field_with_meta_options)\u0026quot;\u0026gt; \u0026lt;/furo-ui5-radio-button-group\u0026gt; \u0026lt;furo-ui5-radio-button-group group-name=\u0026quot;Option\u0026quot; ƒ-bind-data=\u0026quot;--daoPerson(*.field)\u0026quot;\u0026gt; \u0026lt;ui5-radio-button text=\u0026quot;Option A\u0026quot; selected name=\u0026quot;Owner\u0026quot;\u0026gt;\u0026lt;/ui5-radio-button\u0026gt; \u0026lt;ui5-radio-button text=\u0026quot;Option B with a very long text\u0026quot; name=\u0026quot;Owner\u0026quot;\u0026gt;\u0026lt;/ui5-radio-button\u0026gt; \u0026lt;/furo-ui5-radio-button-group\u0026gt; Attributes and Properties #  groupName #  default: ''\nDefines the name of the inner radio button. Radio buttons with the same name will form a radio button group. activeFieldBinding #  default: false\nFlag to indicate if a field is attached Default: false idFieldPath #  default: 'id'\nDefines the field path that is used from the injected RepeaterNode to identify the option items. Point-separated path to the field E.g. data.partner.ulid default: id displayFieldPath #  default: 'display_name'\nDefines the field path that is used from the injected RepeaterNode to display the option items. Point-separated path to the field E.g. data.partner.display_name default: display_name valueFieldPath #  default: 'id'\nDefines the field path that is used to update the bound component if the user has selected an option. Point-separated path to the field Must be set if a data binding is specified. default: id _attributesFromFNA #  default: { readonly: undefined, }\n\n_constraintsFromFNA #  default: { required: undefined, }\n\n_labelsFromFAT #  default: { readonly: undefined, disabled: undefined, required: undefined, }\n\n_attributesFromFAT #  default: {}\n\n_privilegedAttributes #  default: { readonly: null, required: null, disabled: null, 'id-field-path': 'id', 'value-field-path': 'id', 'display-field-path': 'display_name', 'group-name': null, }\na list of privileged attributes. when those attributes are set in furo-ui5-select components initially. they can not be modified later via response or spec null is used because getAttribute returns null or value Events #  options-updated #  @-options-updated → CustomEvent\nFires event options-updated after rebuilding option list. value-changed #  @-value-changed → {*} the value from the value-field. By default the value field is \u0026amp;#34;id\u0026amp;#34;\nFired when value has changed from the component inside. bubbles item-selected #  @-item-selected → selectedOption\nFired when the radio button is selected. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ boolean\nFieldNode  → ƒ-bind-data\noverwrite bindData of FieldNodeAdapter\n fieldNode    bindOptions #  bindOptions(repeaterNode `` ) ⟹ void\n``  → ƒ-bind-options\nHere a RepeaterNode can be connected to the component as an option list.\n repeaterNode    readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. those attributes can be set. readonly,disabled, value-field-path, display-field-path Use this after manual or scripted update of the attributes.\n\nselectOptionById #  selectOptionById(val *id* ) ⟹ void\n   → ƒ-select-option-by-id\nSelects an option by id\n val  id    "});index.add({'id':203,'href':'/docs/components/furo-ui5-radiogroup/','title':"furo-ui5-radiogroup",'section':"components",'content':"furo-ui5-radiogroup #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-radiogroup.js'; exports FuroUi5Radiogroup js exports \u0026lt;furo-ui5-radiogroup\u0026gt; custom-element-definition superclass LitElement mixes FBP\nradio group\nfuro-ui5-radiogroup The furo-ui5-radiogroup enables users to create a radio group with n size of furo-ui5-radio-buttons inside. Use the components if you want to combine several bool fields into one radiogroup. Only one value can be true.\nAttributes and Properties #  Methods #  "});index.add({'id':204,'href':'/docs/components/furo-ui5-reference-search/','title':"furo-ui5-reference-search",'section':"components",'content':"furo-ui5-reference-search #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-reference-search.js'; exports FuroUi5ReferenceSearch js exports \u0026lt;furo-ui5-reference-search\u0026gt; custom-element-definition superclass LitElement mixes FBP mixes FieldNodeAdapter\nfuro ui5 data reference search\nThe furo-ui5-reference-search search a reference\nBounded data must fullfill the furo.reference signature. The service, deeplink,\u0026hellip; is taken from the spec of your field. Do not forget to specify.\ndefault usage\n1 2 3  \u0026lt;furo-ui5-reference-search ƒ-bind-data=\u0026#34;--data(*.is_person)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-reference-search\u0026gt;   usage with a extended searcher\n1 2 3 4  \u0026lt;furo-ui5-reference-search extended-searcher=\u0026#34;country-filter\u0026#34; ƒ-bind-data=\u0026#34;--data(*.is_person)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-reference-search\u0026gt;   usage example for a non default response\n1 2 3 4 5 6 7  \u0026lt;furo-ui5-reference-search extended-searcher=\u0026#34;contact-filter\u0026#34; search-response-path=\u0026#34;xx_entities\u0026#34; value-field-path=\u0026#34;data.xx_id\u0026#34; display-field-path=\u0026#34;data.xx_display_name\u0026#34; ƒ-bind-data=\u0026#34;--data(*.is_person)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-reference-search-labeled\u0026gt;   supported meta and constraints #   readonly: true , set the element to readonly placeholder:\u0026ldquo;some string\u0026rdquo; set the placeholder for the element max:\u0026ldquo;number\u0026rdquo; set the maximum number of characters available in the input field.  The constraint required will mark the element as required\nMethods #  bind-data(fieldNode) Bind a entity field. This can be a scalar type or any complex type with \u0026lsquo;id\u0026rsquo;,\u0026lsquo;display_name\u0026rsquo; signature.\nIf your type has a reference type signature (\u0026lsquo;id\u0026rsquo;,\u0026lsquo;display_name\u0026rsquo;, \u0026lsquo;link\u0026rsquo;), the service, and initial deep link is extracted from the link part of your type.\nIf you bind a skalar field, the value which is set in \u0026lsquo;valueFieldPath\u0026rsquo; will be set.\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with \u0026ndash;entity(*.fields.fieldname)\nSpecs #  Define a propper default value on the reference type.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  link:type:furo.Linkdescription:HTS for the initial search (the default works on root resources only)__proto:number:3__ui:nullmeta:default:|{ \u0026#34;rel\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;/contacts\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;contact.Contact\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;Contacts\u0026#34; }placeholder:\u0026#34;\u0026#34;hint:\u0026#34;\u0026#34;label:contact.Reference.link.labeloptions:flags:[]list:[]readonly:falserepeated:falsetypespecific:null  API of a extended searcher #  Searcher Mehtods #  The only method you have to implement is htsIn. The reference-search will pass its own hts to the extended searcher. A call on qpIn on the searcher will also pass the resulting hts to the extended searcher.\nSearcher Events #  Fire a @-record-selected to set the item on the reference-search. Fire a @-close-requested to close the extended search.\nAttributes and Properties #  service #  service string default: ''\nSet the service. This is only needed when you do not use a bind or bind a scalar value. searchResponsePath #  search-response-path string default: 'entities'\nPath to the node in the response value which contains the array with the selection items. By default this goes to entitites valueFieldPath #  value-field-path string default: 'data.id'\nPath to response value item which is used for the id. By default this goes to data.id displayFieldPath #  display-field-path string default: 'data.display_name'\nPath to selection value node which is used for the display. By default this goes to data.display_name extendedValueFieldPath #  extended-value-field-path string default: 'data.id'\nPath to response value item of the exteded search which is used for the id. By default this goes to data.id. Only needed when your extended searcher does not have the id, display_name signature in the response. extendedDisplayFieldPath #  extended-display-field-path string default: 'data.display_name'\nPath to response value item of the exteded search which is used for the display. By default this goes to data.display_name. Only needed when your extended searcher does not have the id, display_name signature in the response. maxItemsToDisplay #  max-items-to-display number default: 8\nThe maximal number of items to display.\nThis value will be set as page-size query-param for the backend.\nIf the response contains hts information with rel next a \u0026ldquo;load more\u0026rdquo; button will be displayed at the end of the list. value #  default: { id: '', display_name: '' }\n\nminTermLength #  min-term-length number default: 2\nThe minimal length of search term to trigger a search. debounceTimeout #  debounce-timeout number default: 250\nwait for this time between keystrokes to trigger a search to the service placeholder #  placeholder string default: ''\nOverrides the hint text from the specs.\nUse with caution, normally the specs defines this value. label #  label string default: ''\nOverrides the label text from the specs.\nUse with caution, normally the specs defines this value. noDataText #  no-data-text string default: 'no result found'\nhint text when result not found by search _hasmore #  default: 'None'\n\n_hasExtendedSearcher #  default: false\n\ndisableSearchList #  disable-search-list boolean default: false\nA Boolean attribute which, if present, means this field can not be searched.\nThis is very useful when you want enforce the usage of the extended search icon #  icon string default: 'search'\nUse this attribute to set a custom icon for your searcher _previousValueState #  default: { state: 'None', message: '' }\n\nvalueState #  default: 'None'\n\n_attributesFromFNA #  default: { readonly: undefined, placeholder: undefined, label: undefined, }\n\n_constraintsFromFNA #  default: { required: undefined, }\n\n_privilegedAttributes #  default: { readonly: null, placeholder: null, label: null, required: null, disabled: null, icon: null, }\n\nrequired #  required reflects \nOverrides the required value from the specs.\nUse with caution, normally the specs defines this value. searchOnEnterOnly #  search-on-enter-only \nEnable this, to avoid the automatic triggering of \u0026ldquo;search\u0026rdquo;.\nThe user have to press enter to trigger the search. Min-term-length is respected. readonly #  readonly \nOverrides the readonly value from the specs.\nUse with caution, normally the specs defines this value. disabled #  disabled \nDisable busy #  busy \nThis is used to activate the loading indicator. extendedSearcher #  extended-searcher \nDefine the extended searcher. Do not forget to import the searcher you want to use. Events #  item-selected #  @-item-selected → ``Object the complete item\nFired when a item was selected from the list. change #  @-change → text\nFired when the input operation has finished by pressing Enter or on focusout. input #  @-input → ``\nFired when the value of the ui5-input changes at each keystroke, and when a suggestion item has been selected. xxxx #  @-xxxx → ``\nAll events from the ui5 Input element. Methods #  onFnaFieldValueChanged #  onFnaFieldValueChanged(val `` ) ⟹ void\n``  → ƒ-on-fna-field-value-changed\nThis is triggered from the FieldNodeAdapter when the data has changed\n val    _FBPReady #  _FBPReady() ⟹ void\n* → ƒ\u0026ndash;fbp-ready\n\nreadAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom.\nFollowing attributes can be set:\n value-state value-state-message icon placeholder label required readonly disabled  Use this after manual or scripted update of the attributes.\n\nhtsIn #  htsIn(hts `` ) ⟹ void\n``  → ƒ-hts-in\nhtsIn sets the HTS for the collection-agent.\nThis is only needed if you want to have fine grained control over the hts\n hts    qpIn #  qpIn(qp `` ) ⟹ void\n``  → ƒ-qp-in\nqpIn Use this to set query params manualy\n qp    setFilter #  setFilter(filter `` ) ⟹ void\n``  → ƒ-set-filter\nSets the filter. Hint: use the FieldNode._base64 property to send complex objects as a filter and decode it on the server side or do btoa(JSON.stringify(FILTER))\n filter    Styling #  The following custom properties available for styling:\n   Custom property Description     --furo-data-reference-search-list-background background color of the result list  default: --surface fallback: #ffffff    "});index.add({'id':205,'href':'/docs/components/furo-ui5-reference-search-labeled/','title':"furo-ui5-reference-search-labeled",'section':"components",'content':"furo-ui5-reference-search-labeled #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-reference-search-labeled.js'; exports FuroUi5ReferenceSearchLabeled js exports \u0026lt;furo-ui5-reference-search-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\nlabeled input field\nfuro-ui5-reference-search-labeled The furo-ui5-reference-search-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\nAttributes and Properties #  service #  service string default: ''\nthe service name label #  label string default: ''\nthe label for the data-reference-search extendedSearcher #  extended-searcher string default: ''\nDefine the extended searcher. Do not forget to import the searcher you want to use. disableSearchList #  disable-search-list boolean default: false\nA Boolean attribute which, if present, means this field can not be searched.\nThis is very useful when you want enforce the usage of the extended search icon #  icon string default: 'search'\nUse this attribute to set a custom icon for your searcher searchResponsePath #  search-response-path string default: 'entities'\nPath to the node in the response value which contains the array with the selection items. By default this goes to entitites valueFieldPath #  value-field-path string default: 'data.id'\nPath to response value item which is used for the id. By default this goes to data.id displayFieldPath #  display-field-path string default: 'data.display_name'\nPath to selection value node which is used for the display. By default this goes to data.display_name extendedValueFieldPath #  extended-value-field-path string default: 'data.id'\nPath to response value item of the exteded search which is used for the id. By default this goes to data.id. Only needed when your extended searcher does not have the id, display_name signature in the response. extendedDisplayFieldPath #  extended-display-field-path string default: 'data.display_name'\nPath to response value item of the exteded search which is used for the display. By default this goes to data.display_name. Only needed when your extended searcher does not have the id, display_name signature in the response. placeholder #  placeholder \nOverrides the hint text from the specs. Use with caution, normally the specs defines this value. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user. readonly #  readonly \n\nrequired #  required \nA Boolean attribute which, if present, means this field is required and marked with *. Methods #  focus #  focus(options Object ) ⟹ void\nObject  → ƒ-focus\nFocuses the underlying ui5 input element\n options https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus   bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    setFilter #  setFilter(filter `` ) ⟹ void\n``  → ƒ-set-filter\nsets the filter to the inner furo-ui5-reference-search\n filter    "});index.add({'id':206,'href':'/docs/components/furo-ui5-segmented-button/','title':"furo-ui5-segmented-button",'section':"components",'content':"furo-ui5-segmented-button #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-segmented-button.js'; exports FuroUi5SegmentedButton js exports \u0026lt;furo-ui5-segmented-button\u0026gt; custom-element-definition extends src/furo-ui5-segmented-button.js mixes FieldNodeAdapter\nsegmented button\nfuro-ui5-segmented-button The furo-ui5-segmented-button component represents a drop-down list. The items inside define the available options by using the furo-ui5-segmented-button component.\n\u0026lt;furo-ui5-segmented-button ƒ-bind-data=\u0026quot;--daoPerson(*.field_with_meta_options)\u0026quot;\u0026gt; \u0026lt;/furo-ui5-segmented-button\u0026gt; \u0026lt;furo-ui5-segmented-button ƒ-bind-data=\u0026quot;--daoPerson(*.field)\u0026quot;\u0026gt; \u0026lt;ui5-segmented-button-item pressed\u0026gt;Option A\u0026lt;/ui5-segmented-button-item\u0026gt; \u0026lt;ui5-segmented-button-item\u0026gt;Option B\u0026lt;/ui5-segmented-button-item\u0026gt; \u0026lt;/furo-ui5-segmented-button\u0026gt; Attributes and Properties #  activeFieldBinding #  default: false\nFlag to indicate if a field is attached Default: false idFieldPath #  default: 'id'\nDefines the field path that is used from the injected RepeaterNode to identify the option items. Point-separated path to the field E.g. data.partner.ulid default: id displayFieldPath #  default: 'display_name'\nDefines the field path that is used from the injected RepeaterNode to display the option items. Point-separated path to the field E.g. data.partner.display_name default: display_name valueFieldPath #  default: 'id'\nDefines the field path that is used to update the bound component if the user has selected an option. Point-separated path to the field Must be set if a data binding is specified. default: id _attributesFromFNA #  default: { readonly: undefined, }\n\n_constraintsFromFNA #  default: { required: undefined, }\n\n_labelsFromFAT #  default: { readonly: undefined, disabled: undefined, required: undefined, }\n\n_attributesFromFAT #  default: {}\n\n_privilegedAttributes #  default: { readonly: null, required: null, disabled: null, 'id-field-path': 'id', 'value-field-path': 'id', 'display-field-path': 'display_name', }\na list of privileged attributes. when those attributes are set in furo-ui5-select components initially. they can not be modified later via response or spec null is used because getAttribute returns null or value Events #  options-updated #  @-options-updated → optionNodeList\nFired after the option list was rebuilt value-changed #  @-value-changed → {*} the value from the value-field. By default the value field is \u0026amp;#34;id\u0026amp;#34;\nFired when value has changed from the component inside. bubbles item-selected #  @-item-selected → selectedOption\nFired when the toggle button was clicked. Payload: - if no option binding is active: ui5-segmented-button-item - if a RepeaterNode is bound: FieldNode Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ boolean\nFieldNode  → ƒ-bind-data\noverwrite bindData of FieldNodeAdapter\n fieldNode    bindOptions #  bindOptions(repeaterNode `` ) ⟹ void\n``  → ƒ-bind-options\nHere a RepeaterNode can be connected to the component as an option list.\n repeaterNode    readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. those attributes can be set. readonly,disabled, value-field-path, display-field-path Use this after manual or scripted update of the attributes.\n\nselectOptionById #  selectOptionById(val *id* ) ⟹ void\n   → ƒ-select-option-by-id\nSelects an option by id\n val  id    "});index.add({'id':207,'href':'/docs/components/furo-ui5-select/','title':"furo-ui5-select",'section':"components",'content':"furo-ui5-select #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-select.js'; exports FuroUi5Select js exports \u0026lt;furo-ui5-select\u0026gt; custom-element-definition extends src/furo-ui5-select.js mixes FieldNodeAdapter\ndata select field\nThe furo-ui5-select component is used to create a drop-down list. The items inside the furo-ui5-select define the available options by using the ui5-option component. Use the function bindOptions to bind a RepeaterNode as a option list.\n\u0026lt;furo-ui5-select ƒ-bind-data=\u0026quot;--entity(*.data.description)\u0026quot; ƒ-bind-options=\u0026quot;--collection(*.entities)\u0026quot;\u0026gt; \u0026lt;/furo-ui5-select\u0026gt; Attributes and Properties #  activeFieldBinding #  default: false\nFlag to indicate if a field is attached Default: false idFieldPath #  default: 'id'\nDefines the field path that is used from the injected RepeaterNode to identify the option items. Point-separated path to the field E.g. data.partner.ulid default: id displayFieldPath #  default: 'display_name'\nDefines the field path that is used from the injected RepeaterNode to display the option items. Point-separated path to the field E.g. data.partner.display_name default: display_name valueFieldPath #  default: 'id'\nDefines the field path that is used to update the bound component if the user has selected an option. Point-separated path to the field Must be set if a data binding is specified. default: id _previousValueState #  default: { state: 'None', message: '' }\n\n_attributesFromFNA #  default: { readonly: undefined, }\n\n_constraintsFromFNA #  default: { required: undefined, }\n\n_labelsFromFAT #  default: { readonly: undefined, disabled: undefined, required: undefined, }\n\n_attributesFromFAT #  default: {}\n\n_privilegedAttributes #  default: { readonly: null, required: null, disabled: null, 'id-field-path': 'id', 'value-field-path': 'id', 'display-field-path': 'display_name', }\na list of privileged attributes. when those attributes are set in furo-ui5-select components initially. they can not be modified later via response or spec null is used because getAttribute returns null or value Events #  options-updated #  @-options-updated → optionNodeList\nFired after the option list was rebuilt. item-selected #  @-item-selected → selectedOption\nFired when the item of the dropdown list is selected. value-changed #  @-value-changed → selectedOption\nFires the field value when it changes. Methods #  readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. those attributes can be set. value-state, required,readonly,disabled, value-field-path, display-field-path Use this after manual or scripted update of the attributes.\n\nbindOptions #  bindOptions(repeaterNode `` ) ⟹ void\n``  → ƒ-bind-options\nHere a RepeaterNode can be connected to the component as an option list.\n repeaterNode    bindData #  bindData(fieldNode FieldNode ) ⟹ boolean\nFieldNode  → ƒ-bind-data\noverwrite bindData of FieldNodeAdapter\n fieldNode    selectOptionById #  selectOptionById(id `` ) ⟹ void\n``  → ƒ-select-option-by-id\nSelects an option by id\n id    "});index.add({'id':208,'href':'/docs/components/furo-ui5-select-labeled/','title':"furo-ui5-select-labeled",'section':"components",'content':"furo-ui5-select-labeled #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-select-labeled.js'; exports FuroUi5SelectLabeled js exports \u0026lt;furo-ui5-select-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\nlabeled select\nfuro-ui5-select-labeled The furo-ui5-select-labeled is a composition to easily use a complete data select with label according to the design specification of SAP Fiori Design System.\nAttributes and Properties #  label #  label string default: ''\nthe label for the data-number-input idFieldPath #  id-field-path string default: 'id'\nDefines the field path that is used from the injected RepeaterNode to identify the option items. Point-separated path to the field E.g. data.partner.ulid valueFieldPath #  value-field-path string default: 'id'\nDefines the field path that is used to update the bound component if the user has selected an option. Point-separated path to the field Must be set if a data binding is specified. displayFieldPath #  display-field-path string default: 'display_name'\nDefines the field path that is used from the injected RepeaterNode to display the option items. Point-separated path to the field E.g. data.partner.display_name required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user and appears in disabled state. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → String\nFires the field value when it changes. Methods #  focus #  focus(options Object ) ⟹ void\nObject  → ƒ-focus\nFocuses the underlying ui5 input element\n options https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus   bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    bindOptions #  bindOptions(repeaterNode `` ) ⟹ void\n``  → ƒ-bind-options\nBinds a repeaterNode to the furo-ui5-select component\n repeaterNode    Slots #  valueStateMessage #  Type: HTMLElement\ndefines the value state message that will be displayed as pop up under the input element. "});index.add({'id':209,'href':'/docs/components/furo-ui5-table/','title':"furo-ui5-table",'section':"components",'content':"furo-ui5-table #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-table.js'; exports FuroUi5Table js exports \u0026lt;furo-ui5-table\u0026gt; custom-element-definition superclass LitElement mixes FBP\n furo-ui5-table display entities in a ui5-table\n\u0026lt;furo-ui5-table no-data-text=\u0026ldquo;No data available.\u0026rdquo; ƒ-bind-data=\u0026quot;\u0026ndash;dao(*.entities)\u0026quot;\n   Attributes and Properties #  cols #  default: []\n\n_specs #   \ndata #  default: []\n\nmode #  mode string default: 'None'\nDefines the mode of the component.\nAvailable options are:\n MultiSelect SingleSelect None   noDataText #  no-data-text \nthe text which can be showed when there is no data in table. string stickyColumnHeader #  sticky-column-header \ndefine the header is sticky or not busy #  busy \nBusy state Events #  data-loaded #  @-data-loaded → HTMLElement\nFired when the data is loaded into data table. The event detail contains the data table self. arrow-down-on-last-row #  @-arrow-down-on-last-row → entity\nFired when the ArrowDown is pressed on the last row. The event detail is the original entity of the row tablerow-selected #  @-tablerow-selected → entity\nFired when the row is selected. The event detail is the original entity of the row. arrow-up-on-first-row #  @-arrow-up-on-first-row → entity\nFired when the ArrowUp is pressed on the first row. The event detail is the original entity of the row rows-selected #  @-rows-selected → Array with the selected items\nFired when the row selection in MultiSelect mode was changed Methods #  _FBPReady #  _FBPReady() ⟹ void\n* → ƒ\u0026ndash;fbp-ready\n\nbindData #  bindData(data `` ) ⟹ void\n``  → ƒ-bind-data\nbind a repeated data\n data    focus #  focus() ⟹ void\n* → ƒ-focus\nfocus on the header of the table\n\nfocusLast #  focusLast() ⟹ void\n* → ƒ-focus-last\nfocus the first row\n\nfocusFirst #  focusFirst() ⟹ void\n* → ƒ-focus-first\nfocus the first row\n\nsetBusy #  setBusy() ⟹ void\n* → ƒ-set-busy\nsetBusy Sets the busy state\n\nunsetBusy #  unsetBusy() ⟹ void\n* → ƒ-unset-busy\nunsetBusy Unsets the busy state\n\n"});index.add({'id':210,'href':'/docs/components/furo-ui5-table-row/','title':"furo-ui5-table-row",'section':"components",'content':"furo-ui5-table-row #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-table-row.js'; exports FuroUi5TableRow js exports \u0026lt;furo-ui5-table-row\u0026gt; custom-element-definition extends src/lib/furo-ui5-table-row.js\n this is a helper component to send tablerow-selected event by clicking the row or pressing the enter on the row.\nAttributes and Properties #  _data #  default: {}\n\nEvents #  ui5-selection-requested #  @-ui5-selection-requested → Event\n\ntablerow-selected #  @-tablerow-selected → CustomEvent\n\narrow-down-on-last-row #  @-arrow-down-on-last-row → CustomEvent\n\narrow-up-on-first-row #  @-arrow-up-on-first-row → CustomEvent\n\nMethods #  focus #  focus() ⟹ void\n* → ƒ-focus\nfocus this row\n\nsetData #  setData(d `` ) ⟹ void\n``  → ƒ-set-data\n d    _select #  _select() ⟹ void\n* → ƒ\u0026ndash;select\n\n_arrowDownPressed #  _arrowDownPressed(event `` ) ⟹ void\n``  → ƒ\u0026ndash;arrow-down-pressed\n event    _arrowUpPressed #  _arrowUpPressed() ⟹ void\n* → ƒ\u0026ndash;arrow-up-pressed\n\n"});index.add({'id':211,'href':'/docs/components/furo-ui5-text-input/','title':"furo-ui5-text-input",'section':"components",'content':"furo-ui5-text-input #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-text-input.js'; exports FuroUi5TextInput js exports \u0026lt;furo-ui5-text-input\u0026gt; custom-element-definition extends src/furo-ui5-text-input.js mixes FieldNodeAdapter\ndata text input field\nThe \u0026lsquo;furo-ui5-text-input\u0026rsquo; component allows the user to enter and edit texts with data binding.\nIt supports all features from the SAP ui5 Input element.\nYou can bind any string type, like furo.fat.String type or the google.protobuf.StringValue type.\n1 2 3  \u0026lt;furo-ui5-text-input ƒ-bind-data=\u0026#34;--daoCountry(*.data.name)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-text-input\u0026gt;   Specificity #   Attributes which are set in the html source will have the highest specificity and will never get overwritten by metas or fat. Attributes set in meta will have the lowest specificity and will be overwritten by attributes from fat.  ** meta \u0026lt; fat \u0026lt; html **\nsupported FAT attributes #   \u0026ldquo;readonly\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to readonly \u0026ldquo;required\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to required \u0026ldquo;disabled\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to disabled \u0026ldquo;icon\u0026rdquo;:\u0026ldquo;home\u0026rdquo; set the icon \u0026ldquo;placeholder\u0026rdquo;:\u0026ldquo;string\u0026rdquo; set the placeholder for the element \u0026ldquo;max\u0026rdquo;:\u0026ldquo;number\u0026rdquo; set the maximum number of characters available in the input field.  supported meta and constraints #   readonly: true , set the element to readonly placeholder:\u0026ldquo;some string\u0026rdquo; set the placeholder for the element max:\u0026ldquo;number\u0026rdquo; set the maximum number of characters available in the input field.  The constraint required will mark the element as required\nMethods #  bind-data(fieldNode) Bind a entity field. You can use the entity even when no data was received.\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with \u0026ndash;entity(*.fields.fieldname)\nAttributes and Properties #  nativeInputAttributes #   \ntype #  default: 'Text'\n\n_previousValueState #  default: { state: 'None', message: '' }\n\n_attributesFromFNA #  default: { readonly: undefined, placeholder: undefined, }\n\n_constraintsFromFNA #  default: { required: undefined, max: undefined, // maps to maxlength }\n\n_labelsFromFAT #  default: { readonly: undefined, disabled: undefined, required: undefined, }\n\n_attributesFromFAT #  default: { placeholder: undefined, max: undefined, // maps to maxlength icon: undefined, // updates the icon }\n\n_privilegedAttributes #  default: { readonly: null, placeholder: null, required: null, disabled: null, icon: null, maxlength: null, }\n\nEvents #  change #  @-change → text\nFired when the input operation has finished by pressing Enter or on focusout. input #  @-input → ``\nFired when the value of the ui5-input changes at each keystroke, and when a suggestion item has been selected. xxxx #  @-xxxx → ``\nAll events from the ui5 Input element. value-changed #  @-value-changed → String\nFires the field value when it changes. Methods #  readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. those attributes can be set. value-state, value-state-message, icon, placeholder, required,readonly,disabled Use this after manual or scripted update of the attributes.\n\n"});index.add({'id':212,'href':'/docs/components/furo-ui5-text-input-labeled/','title':"furo-ui5-text-input-labeled",'section':"components",'content':"furo-ui5-text-input-labeled #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-text-input-labeled.js'; exports FuroUi5TextInputLabeled js exports \u0026lt;furo-ui5-text-input-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\nlabeled input field\nfuro-ui5-text-input-labeled The furo-ui5-text-input-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\nAttributes and Properties #  label #  label string default: ''\nthe label for the data-text-input required #  required Boolean \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled Boolean \nA Boolean attribute which, if present, means this field cannot be edited by the user and appears in disabled state. readonly #  readonly Boolean \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → String\nFires the field value when it changes. Methods #  focus #  focus(options Object ) ⟹ void\nObject  → ƒ-focus\nFocuses the underlying ui5 input element\n options https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus   bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    Slots #  icon #  Type: HTMLElement\ndefines the icon to be displayed in the input element. icon #  Type: HTMLElement\nDefines the icon to be displayed in the input. "});index.add({'id':213,'href':'/docs/components/furo-ui5-textarea-input/','title':"furo-ui5-textarea-input",'section':"components",'content':"furo-ui5-textarea-input #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-textarea-input.js'; exports FuroUi5TextareaInput js exports \u0026lt;furo-ui5-textarea-input\u0026gt; custom-element-definition extends src/furo-ui5-textarea-input.js mixes FieldNodeAdapter\ndata textarea input field\nThe \u0026lsquo;furo-ui5-textarea-input\u0026rsquo; component allows the user to enter and edit texts with data binding.\nIt supports all features from the SAP ui5 Input element.\nYou can bind any string type, like furo.fat.String type or the google.protobuf.StringValue type.\n1 2 3  \u0026lt;furo-ui5-textarea-input ƒ-bind-data=\u0026#34;--daoCountry(*.data.name)\u0026#34; \u0026gt;\u0026lt;/furo-ui5-textarea-input\u0026gt;   Specificity #   Attributes which are set in the html source will have the highest specificity and will never get overwritten by metas or fat. Attributes set in meta will have the lowest specificity and will be overwritten by attributes from fat.  ** meta \u0026lt; fat \u0026lt; html **\nsupported FAT attributes #   \u0026ldquo;readonly\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to readonly \u0026ldquo;required\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to required \u0026ldquo;disabled\u0026rdquo;:\u0026ldquo;true\u0026rdquo; set the element to disabled \u0026ldquo;placeholder\u0026rdquo;:\u0026ldquo;string\u0026rdquo; set the placeholder for the element \u0026ldquo;rows\u0026rdquo;:\u0026ldquo;number\u0026rdquo; set the number of rows. \u0026ldquo;growing\u0026rdquo;:\u0026ldquo;true\u0026rdquo; Enables the ui5-textarea to automatically grow and shrink dynamically with its content. \u0026ldquo;show-exceeded-text\u0026rdquo;:\u0026ldquo;true\u0026rdquo; if set to true. the characters exceeding the maxlength value are selected on paste and the counter below the ui5-textarea displays their number. If set to false, the user is not allowed to enter more characters than what is set in the maxlength property. \u0026ldquo;growing-max-lines\u0026rdquo;:\u0026ldquo;number\u0026rdquo; Defines the maximum number of lines that the Web Component can grow. \u0026ldquo;max\u0026rdquo;:\u0026ldquo;number\u0026rdquo; set the maximum number of characters available in the input field.  supported meta and constraints #   readonly: true , set the element to readonly placeholder:\u0026ldquo;some string\u0026rdquo; set the placeholder for the element max:\u0026ldquo;number\u0026rdquo; set the maximum number of characters available in the input field.  The constraint required will mark the element as required\nMethods #  bind-data(fieldNode) Bind a entity field. You can use the entity even when no data was received.\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with \u0026ndash;entity(*.fields.fieldname)\nAttributes and Properties #  nativeInputAttributes #   \nvalue #  default: ''\n\n_previousValueState #  default: { state: 'None', message: '' }\n\n_attributesFromFNA #  default: { readonly: undefined, placeholder: undefined, }\n\n_constraintsFromFNA #  default: { required: undefined, max: undefined, // maps to maxlength }\n\n_labelsFromFAT #  default: { readonly: undefined, disabled: undefined, required: undefined, }\n\n_attributesFromFAT #  default: { placeholder: undefined, max: undefined, // maps to maxlength rows: undefined, growing: undefined, growingMaxLines: undefined, showExceededText: undefined, }\n\n_privilegedAttributes #  default: { readonly: null, placeholder: null, required: null, disabled: null, maxlength: null, rows: null, growing: null, growingMaxLines: null, showExceededText: null, }\n\nEvents #  change #  @-change → text\nFired when the input operation has finished by pressing Enter or on focusout. input #  @-input → ``\nFired when the value of the ui5-input changes at each keystroke. xxxx #  @-xxxx → ``\nAll events from the ui5 Input element. value-changed #  @-value-changed → String\nFires the field value when it changes. Methods #  readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\nReads the attributes which are set on the component dom. those attributes can be set. value-state, value-state-message, placeholder, required,readonly,disabled Use this after manual or scripted update of the attributes.\n\n"});index.add({'id':214,'href':'/docs/components/furo-ui5-textarea-input-labeled/','title':"furo-ui5-textarea-input-labeled",'section':"components",'content':"furo-ui5-textarea-input-labeled #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-textarea-input-labeled.js'; exports FuroUi5TextareaInputLabeled js exports \u0026lt;furo-ui5-textarea-input-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\nlabeled textarea field\nfuro-ui5-textarea-input-labeled The furo-ui5-textarea-input-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\nAttributes and Properties #  label #  label string default: ''\nthe label for the data-textarea-input rows #  rows number default: 0\nDefines the number of visible text lines for the component. growingMaxLines #  growing-max-lines number default: 0\nDefines the maximum number of lines that the Web Component can grow. required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled \nA Boolean attribute which, if present, means this field cannot be edited by the user. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. showExceededText #  show-exceeded-text \nDetermines whether the characters exceeding the maximum allowed character count are visible in the furo-ui5-textarea-input.\nIf set to false, the user is not allowed to enter more characters than what is set in the maxlength property. If set to true the characters exceeding the maxlength value are selected on paste and the counter below the furo-ui5-textarea-input displays their number. growing #  growing \nEnables the furo-ui5-textarea to automatically grow and shrink dynamically with its content. Methods #  focus #  focus(options Object ) ⟹ void\nObject  → ƒ-focus\nFocuses the underlying ui5 input element\n options https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus   bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    "});index.add({'id':215,'href':'/docs/components/furo-ui5-time-picker/','title':"furo-ui5-time-picker",'section':"components",'content':"furo-ui5-time-picker #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-time-picker.js'; exports FuroUi5TimePicker js exports \u0026lt;furo-ui5-time-picker\u0026gt; custom-element-definition extends src/furo-ui5-time-picker.js mixes FieldNodeAdapter\nfuro data time picker field\nThe furo-ui5-time-picker component allows the user to bind a field of type google.type.TimeOfDay. Represents a time of day. The date and time zone are either not significant or are specified elsewhere.\nhttps://sap.github.io/ui5-webcomponents/playground/components/TimePicker/\nSupported format options are pattern-based on Unicode LDML Date Format notation. For more information, see UTS #35: Unicode Locale Data Markup Language.\nFor example, if the format-pattern is \u0026ldquo;hh:mm:ss\u0026rdquo;, a valid value string is \u0026ldquo;11:42:35\u0026rdquo; and the same is displayed in the input.\nThe text field can be editable or read-only (readonly property), and it can be enabled or disabled (enabled property). To visualize semantic states, such as \u0026ldquo;error\u0026rdquo; or \u0026ldquo;warning\u0026rdquo;, the valueState property is provided. When the user makes changes to the time, the change event is fired, which enables you to react on any time change.\nYou can bind a string or google.type.TimeOfDay (https://github.com/googleapis/googleapis/blob/master/google/type/timeofday.proto).\n1 2 3  \u0026lt;furo-ui5-time-picker ƒ-bind-data=\u0026#34;--data(*.start_time)\u0026#34;\u0026gt; \u0026lt;/furo-ui5-time-picker\u0026gt;   supported meta and constraints #   readonly: true , set the element to readonly placeholder:\u0026ldquo;some string\u0026rdquo; set the placeholder for the element min:\u0026ldquo;11:42:35\u0026rdquo; set the minDate for the element (use iso date in the constraint) max:\u0026ldquo;23:59:59\u0026rdquo; set the maxDate for the element (use iso date in the constraint) pattern:\u0026ldquo;HH:mm:ss\u0026rdquo; set the pattern for the element  The constraint required will mark the element as required\nMethods #  bind-data(fieldNode) Bind a entity field. You can use the entity even when no data was received.\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with \u0026ndash;entity(*.fields.fieldname)\nAttributes and Properties #  formatPattern #  default: ''\n\n_previousValueState #  default: { state: 'None', message: '' }\n\n_attributesFromFNA #  default: { readonly: undefined, placeholder: undefined, min: undefined, max: undefined, pattern: undefined, }\n\n_constraintsFromFNA #  default: { required: undefined, }\n\n_privilegedAttributes #  default: { readonly: null, placeholder: null, required: null, disabled: null, maxDate: null, minDate: null, formatPattern: null, }\n\nEvents #  value-changed #  @-value-changed → String\nFires the field value when it changes in ISO 8601 format. change #  @-change → ``\nFired when the input operation has finished by pressing Enter or on focusout. Methods #  onFnaFieldValueChanged #  onFnaFieldValueChanged(value `` ) ⟹ void\n``  → ƒ-on-fna-field-value-changed\nFieldNodeAdapter callback function to handle changes on the model.\n value    readAttributes #  readAttributes() ⟹ void\n* → ƒ-read-attributes\n\nonFnaFieldNodeBecameInvalid #  onFnaFieldNodeBecameInvalid(validity `` ) ⟹ void\n``  → ƒ-on-fna-field-node-became-invalid\noverwrite onFnaFieldNodeBecameInvalid function\n validity    "});index.add({'id':216,'href':'/docs/components/furo-ui5-time-picker-labeled/','title':"furo-ui5-time-picker-labeled",'section':"components",'content':"furo-ui5-time-picker-labeled #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-time-picker-labeled.js'; exports FuroUi5TimePickerLabeled js exports \u0026lt;furo-ui5-time-picker-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\nlabeled input field\nfuro-ui5-time-picker-labeled The furo-ui5-time-picker-labeled is a composition to easily use a complete input field with label according to the design specification of SAP Fiori Design System.\nAttributes and Properties #  label #  label string default: ''\nthe label for the data-date-picker required #  required \nA Boolean attribute which, if present, means this field is required and marked with *. disabled #  disabled reflects \nA Boolean attribute which, if present, means this field cannot be edited by the user. readonly #  readonly \nA Boolean attribute which, if present, means this field is readonly. Events #  value-changed #  @-value-changed → String\nFires the field value when it changes in ISO 8601 format. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nOrchestrates the data field connection to the inside\n fieldNode    "});index.add({'id':217,'href':'/docs/components/furo-ui5-toggle-button/','title':"furo-ui5-toggle-button",'section':"components",'content':"furo-ui5-toggle-button #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-toggle-button.js'; exports FuroUi5ToggleButton js exports \u0026lt;furo-ui5-toggle-button\u0026gt; custom-element-definition extends src/furo-ui5-toggle-button.js mixes FieldNodeAdapter\nboolean toggle button\nThe \u0026lsquo;furo-ui5-toggle-button\u0026rsquo; component allows the user to switch true and false for Bool with data binding.\nIt supports all features from the SAP ui5 toggleButton element.\nYou can bind bool type, furo.fat.Bool type or the google.wrapper.BoolValue type.\n       \u0026lt;furo-ui5-toggle-button ƒ-bind-data=\u0026quot;\u0026ndash;daoCountry(*.data.classified_as_risk_area)\u0026quot;\n    ### Specificity 1. Attributes which are set in the html source will have the highest specificity and will never get overwritten by metas or fat. 2. Attributes set in meta will have the lowest specificity and will be overwritten by attributes from fat. | meta | fat | html | |------\t|-----\t|------\t| | 1 | 10 | 100 | ## supported FAT attributes - **\u0026quot;readonly\u0026quot;:\u0026quot;true\u0026quot;** set the element to readonly - **\u0026quot;disabled\u0026quot;:\u0026quot;true\u0026quot;** set the element to disabled - **\u0026quot;icon\u0026quot;:\u0026quot;\u0026quot;** set the icon - **\u0026quot;design\u0026quot;:\u0026quot;\u0026quot;** set the design ## supported meta and constraints - **readonly: true** , set the element to readonly The constraint **required** will mark the element as required ## Methods **bind-data(fieldNode)** Bind a entity field. You can use the entity even when no data was received. ## Attributes and Properties ### **_previousDesign** default: **\u0026amp;#39;Default\u0026amp;#39;**\u0026lt;/small\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; ### **_attributesFromFNA** default: **{ readonly: undefined, disabled: undefined, label: undefined, }**\u0026lt;/small\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; ### **_constraintsFromFNA** default: **{}**\u0026lt;/small\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; ### **_attributesFromFAT** default: **{ label: undefined, icon: undefined, design: undefined, }**\u0026lt;/small\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; ### **_labelsFromFAT** default: **{ readonly: undefined, disabled: undefined, }**\u0026lt;/small\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; ### **_privilegedAttributes** default: **{ readonly: null, disabled: null, text: null, icon: null, design: null, }**\u0026lt;/small\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; ## Events ### **click** \u0026lt;span style=\u0026quot;border-width:2px 10px 2px 2px; border-style: solid;border-color: rgb(2, 168, 244);font-family:monospace; padding:2px 4px;\u0026quot;\u0026gt;@-click\u0026lt;/span\u0026gt; → \u0026lt;small\u0026gt;``\u0026lt;/small\u0026gt; Fired when the input operation has finished by pressing Enter or on focusout. \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; ### **xxxx** \u0026lt;span style=\u0026quot;border-width:2px 10px 2px 2px; border-style: solid;border-color: rgb(2, 168, 244);font-family:monospace; padding:2px 4px;\u0026quot;\u0026gt;@-xxxx\u0026lt;/span\u0026gt; → \u0026lt;small\u0026gt;``\u0026lt;/small\u0026gt; All events from the [ui5 Input element](https://sap.github.io/ui5-webcomponents/playground/components/ToggleButton/). When you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with --entity(*.fields.fieldname) \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; ### **value-changed** \u0026lt;span style=\u0026quot;border-width:2px 10px 2px 2px; border-style: solid;border-color: rgb(2, 168, 244);font-family:monospace; padding:2px 4px;\u0026quot;\u0026gt;@-value-changed\u0026lt;/span\u0026gt; → \u0026lt;small\u0026gt;`Boolean`\u0026lt;/small\u0026gt; Fires the value of pressed when value changed. \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; ## Methods ### **readAttributes** \u0026lt;small\u0026gt;**readAttributes**() ⟹ `void`\u0026lt;/small\u0026gt; \u0026lt;small\u0026gt;`*`\u0026lt;/small\u0026gt; → \u0026lt;span style=\u0026quot;border-width:2px 2px 2px 10px; border-style: solid;border-color: rgb(76, 175, 80);font-family:monospace; padding:2px 4px;\u0026quot;\u0026gt;ƒ-read-attributes\u0026lt;/span\u0026gt; Reads the attributes which are set on the component dom. \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; ### **onFnaFieldValueChanged** \u0026lt;small\u0026gt;**onFnaFieldValueChanged**(*val* `` ) ⟹ `void`\u0026lt;/small\u0026gt; \u0026lt;small\u0026gt;`` \u0026lt;/small\u0026gt; → \u0026lt;span style=\u0026quot;border-width:2px 2px 2px 10px; border-style: solid;border-color: rgb(76, 175, 80);font-family:monospace; padding:2px 4px;\u0026quot;\u0026gt;ƒ-on-fna-field-value-changed\u0026lt;/span\u0026gt; overwrite onFnaFieldValueChanged - \u0026lt;small\u0026gt;val \u0026lt;/small\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; ### **onFnaFieldNodeBecameInvalid** \u0026lt;small\u0026gt;**onFnaFieldNodeBecameInvalid**() ⟹ `void`\u0026lt;/small\u0026gt; \u0026lt;small\u0026gt;`*`\u0026lt;/small\u0026gt; → \u0026lt;span style=\u0026quot;border-width:2px 2px 2px 10px; border-style: solid;border-color: rgb(76, 175, 80);font-family:monospace; padding:2px 4px;\u0026quot;\u0026gt;ƒ-on-fna-field-node-became-invalid\u0026lt;/span\u0026gt; overwrite onFnaFieldNodeBecameInvalid function \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; ### **onFnaLabelChanged** \u0026lt;small\u0026gt;**onFnaLabelChanged**(*text* `` *placeholder* `` ) ⟹ `void`\u0026lt;/small\u0026gt; \u0026lt;small\u0026gt;`` `` \u0026lt;/small\u0026gt; → \u0026lt;span style=\u0026quot;border-width:2px 2px 2px 10px; border-style: solid;border-color: rgb(76, 175, 80);font-family:monospace; padding:2px 4px;\u0026quot;\u0026gt;ƒ-on-fna-label-changed\u0026lt;/span\u0026gt; overwrite onFnaLabelChanged function label is mapped to text - \u0026lt;small\u0026gt;text \u0026lt;/small\u0026gt; - \u0026lt;small\u0026gt;placeholder \u0026lt;/small\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; "});index.add({'id':218,'href':'/docs/components/furo-ui5-typerenderer-labeled/','title':"furo-ui5-typerenderer-labeled",'section':"components",'content':"furo-ui5-typerenderer-labeled #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/furo-ui5-typerenderer-labeled.js'; exports FuroUi5TyperendererLabeled js exports \u0026lt;furo-ui5-typerenderer-labeled\u0026gt; custom-element-definition superclass LitElement mixes FBP\nlabeled input field\nfuro-ui5-typerenderer-labeled The furo-ui5-typerenderer-labeled is a composition to easily use a display field with label according to the design specification of SAP Fiori Design System.\nAttributes and Properties #  label #  label string default: ''\nthe label for the data-text-input valueState #  value-state reflects string default: ''\nValue State context #  context string default: 'display'\n\ndisabled #  disabled reflects \nDisabled State Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → ƒ-bind-data\nBinds the fieldNode to the component binding set can be customised here otherwise the standard bindData in the ui5-data-input will be used\n fieldNode    "});index.add({'id':219,'href':'/docs/components/ui5-reference-search-item/','title':"ui5-reference-search-item",'section':"components",'content':"ui5-reference-search-item #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/ui5-reference-search-item.js'; exports Ui5ReferenceSearchItem js exports \u0026lt;ui5-reference-search-item\u0026gt; custom-element-definition extends src/ui5-reference-search-item.js\nrepresentation of a result item\nreference-search-item Repeated item to display the search result set\nAttributes and Properties #  _item #  default: {}\n\ndisplayField #  default: 'display_name'\n\nEvents #  item-selected #  @-item-selected → item\nFired when item is selected Methods #  injectItem #  injectItem(item `` ) ⟹ void\n``  → ƒ-inject-item\nInject of the item data of inner text of the element is defined with the attribute display-field (default value: display_name)\n item    deselect #  deselect() ⟹ void\n* → ƒ-deselect\n\npreselect #  preselect() ⟹ void\n* → ƒ-preselect\n\nselect #  select() ⟹ void\n* → ƒ-select\n\n"});index.add({'id':220,'href':'/docs/components/CollectionDropdownHelper/','title':"CollectionDropdownHelper",'section':"components",'content':"CollectionDropdownHelper #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/src/lib/DELETEMECollectionDropdownHelper.js'; exports CollectionDropdownHelper js\n Helper class for furo-data-collection-dropdown and furo-ui5-collection-dropdown\nAttributes and Properties #  Methods #  triggerSetOptionItem #  triggerSetOptionItem(caller `` ) ⟹ void\n caller    notifiySelectedItem #  notifiySelectedItem(caller *obj* ) ⟹ void\nTriggers the item selected event\n caller  obj    findDisplayNameByValue #  findDisplayNameByValue(caller *val* ) ⟹ void\n caller  val    listHasDataObjectValue #  listHasDataObjectValue(caller `` ) ⟹ void\n caller    initDropdownItemWithoutCollectionInjection #  initDropdownItemWithoutCollectionInjection(caller `` ) ⟹ void\n caller    updateField #  updateField(caller `` ) ⟹ void\n caller    mapDataToList #  mapDataToList(caller *list* ) ⟹ void\n caller  list    setItemSelectedViaSelectedMark #  setItemSelectedViaSelectedMark(caller *list* ) ⟹ void\n caller  list    injectList #  injectList(caller *list* ) ⟹ void\n caller  list    mapInputToInnerStruct #  mapInputToInnerStruct(caller *collection* ) ⟹ void\n caller  collection    "});index.add({'id':221,'href':'/docs/components/','title':"components",'section':"Docs",'content':"@furo/ui5 #  @furo/ui5 v1.0.0-alpha.2 SAP UI5 Web Components data bindings for furo\nInstallation #  npm:\n1  npm i -S @furo/ui5`   cdn:\n1 2 3  \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/@furo/precompiled@1.0.0-alpha.2/dist/components.js\u0026#34;\u0026gt; \u0026lt;/script\u0026gt;   What is inside #  Components #    furo-chart-display Display charts with data objects  furo-data-bool-icon Displays a icon/symbol for a boolean value  furo-data-chart-binder connect data to a chart  furo-data-context-menu-display  furo-data-context-menu a context menu  furo-data-sign-pad Bind a entityObject.field to a sign-pad input  furo-sign-pad draw or sign  furo-ui5-busyindicator ui5 busy indicator  furo-ui5-button ui5 button  furo-ui5-card  furo-ui5-checkbox-input-labeled labeled input field  furo-ui5-checkbox-input data checkbox input field  furo-ui5-collection-dropdown-labeled labeled input field  furo-ui5-collection-dropdown data collection dropdown  furo-ui5-date-picker-labeled labeled input field  furo-ui5-date-picker furo data datepicker field  furo-ui5-date-time-picker-labeled labeled input field  furo-ui5-date-time-picker furo data datetime picker field  furo-ui5-dialog-display Display position for a dialog  furo-ui5-dialog Dialog element  furo-ui5-form-field-container form field container  furo-ui5-header-panel A bindable header panel  furo-ui5-message-strip-display furo ui5 message strip  furo-ui5-message-strip furo ui5 message strip  furo-ui5-money-input-labeled labeled input field  furo-ui5-money-input Binds a entityObject field google.type.Money to a number-input and currency dropdown fields  furo-ui5-multi-input-labeled labeled textarea field  furo-ui5-multi-input data ui5 data multi input  furo-ui5-notification-group-display ui5 notification group display  furo-ui5-notification-list-display ui5 notification list  furo-ui5-notification a banner  furo-ui5-number-input-labeled labeled input field  furo-ui5-number-input data number input field  furo-ui5-pagination-bar Pagination Bar  furo-ui5-password-input-labeled labeled input field  furo-ui5-password-input data password input field  furo-ui5-property display and bind types of type any  furo-ui5-propertylist-display  furo-ui5-radio-button-group  furo-ui5-radio-button boolean toggle button  furo-ui5-radiogroup radio group  furo-ui5-reference-search-labeled labeled input field  furo-ui5-reference-search furo ui5 data reference search  furo-ui5-segmented-button segmented button  furo-ui5-select-labeled labeled select  furo-ui5-select data select field  furo-ui5-table  furo-ui5-text-input-labeled labeled input field  furo-ui5-text-input data text input field  furo-ui5-textarea-input-labeled labeled textarea field  furo-ui5-textarea-input data textarea input field  furo-ui5-time-picker-labeled labeled input field  furo-ui5-time-picker furo data time picker field  furo-ui5-toggle-button boolean toggle button  furo-ui5-typerenderer-labeled labeled input field  ui5-reference-search-item representation of a result item  furo-data-context-menu-item helper  furo-data-context-submenu helper  furo-ui5-table-row  furo-mini-tabs todo shortdescription  furo-panel-coordinator-tab-item todo shortdescription  furo-panel-coordinator-tabs tab navigation for panel-coordinator  furo-panel-head dislay a navigationNode as title  furo-tree-item todo shortdescription  furo-tree tree navigation menu  "});index.add({'id':222,'href':'/docs/components/Events/','title':"Events",'section':"components",'content':"Events #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/src/lib/Events.js'; exports Events js\n Attributes and Properties #  Methods #  buildChangeEvent #  buildChangeEvent(detail `` ) ⟹ Event\nCreates an universal value-changed event All extended ui5 components should use this builder function to create the change event\n detail    "});index.add({'id':223,'href':'/docs/typerenderer/','title':"typerenderer",'section':"Docs",'content':"@furo/ui5 #  @furo/ui5 v1.0.0-alpha.2 SAP UI5 Web Components data bindings for furo\nInstallation #  npm:\n1  npm i -S @furo/ui5`   cdn:\n1 2 3  \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/@furo/precompiled@1.0.0-alpha.2/dist/typerenderer.js\u0026#34;\u0026gt; \u0026lt;/script\u0026gt;   What is inside #  Components #    cell-bool  cell-double  cell-float  cell-furo-fat-bool  cell-furo-fat-double  cell-furo-fat-float  cell-furo-fat-int32  cell-furo-fat-int64  cell-furo-fat-string  cell-furo-fat-uint32  cell-furo-fat-uint64  cell-furo-integerproperty  cell-furo-link  cell-furo-numberproperty  cell-furo-property-repeated  cell-furo-property  cell-furo-reference  cell-furo-stringoptionproperty  cell-furo-stringproperty  cell-furo-type-date  cell-furo-type-money  cell-google-protobuf-any  cell-google-protobuf-boolvalue  cell-google-protobuf-doublevalue  cell-google-protobuf-floatvalue  cell-google-protobuf-int32value  cell-google-protobuf-int64value  cell-google-protobuf-stringvalue  cell-google-protobuf-timestamp  cell-google-protobuf-uint32value  cell-google-protobuf-uint64value  cell-google-type-color  cell-google-type-date  cell-google-type-money  cell-google-type-timeofday  cell-int32  cell-int64  cell-string  cell-uint32  cell-uint64  celledit-bool celledit renderer for bool  celledit-double celledit renderer for double  celledit-float celledit renderer for float  celledit-furo-fat-bool celledit renderer for bool  celledit-furo-fat-double celledit renderer for furo.fat.Double  celledit-furo-fat-float celledit renderer for furo.fat.Float  celledit-furo-fat-int32 celledit renderer for furo.fat.Int32  celledit-furo-fat-int64 celledit renderer for furo.fat.Int64  celledit-furo-fat-string  celledit-furo-fat-uint32 celledit renderer for furo.fat.Uint32  celledit-furo-fat-uint64 celledit renderer for furo.fat.Uint64  celledit-furo-integerproperty celledit renderer for furo.Integerproperty  celledit-furo-link  celledit-furo-numberproperty celledit renderer for furo.INumberproperty  celledit-furo-property-repeated  celledit-furo-property  celledit-furo-reference  celledit-furo-stringoptionproperty  celledit-furo-stringproperty  celledit-furo-type-date  celledit-furo-type-money  celledit-google-protobuf-any  celledit-google-protobuf-boolvalue celledit renderer for bool  celledit-google-protobuf-doublevalue celledit renderer for google.protobuf.Double  celledit-google-protobuf-floatvalue celledit renderer for google.protobuf.Float  celledit-google-protobuf-int32value celledit renderer for google.protobuf.Int32value  celledit-google-protobuf-int64value celledit renderer for google.protobuf.Int64  celledit-google-protobuf-stringvalue  celledit-google-protobuf-timestamp  celledit-google-protobuf-uint32value celledit renderer for google.protobuf.Uint32value  celledit-google-protobuf-uint64value celledit renderer for google.protobuf.Uint64value  celledit-google-type-date celledit renderer for google.type.Date  celledit-google-type-money celledit renderer for google.type.Money  celledit-google-type-timeofday celledit renderer for google.type.TimeOfDay  celledit-int32  celledit-int64  celledit-string  celledit-uint32  celledit-uint64  display-bool  display-double  display-float  display-furo-fat-bool  display-furo-fat-double  display-furo-fat-float  display-furo-fat-int32  display-furo-fat-int64  display-furo-fat-string  display-furo-fat-uint32  display-furo-fat-uint64  display-furo-integerproperty  display-furo-link  display-furo-numberproperty  display-furo-property-repeated  display-furo-property-repeats-labeled  display-furo-property  display-furo-reference  display-furo-stringoptionproperty  display-furo-stringproperty  display-furo-type-date  display-furo-type-money  display-google-protobuf-any  display-google-protobuf-boolvalue  display-google-protobuf-doublevalue  display-google-protobuf-floatvalue  display-google-protobuf-int32value  display-google-protobuf-int64value  display-google-protobuf-stringvalue  display-google-protobuf-timestamp  display-google-protobuf-uint32value  display-google-protobuf-uint64value  display-google-type-color  display-google-type-date  display-google-type-money  display-google-type-timeofday  display-int32  display-int64  display-string  display-uint32  display-uint64  form-bool form renderer for bool  form-double  form-float  form-furo-fat-bool form renderer for bool  form-furo-fat-double form renderer for furo.fat.Double  form-furo-fat-float form renderer for furo.fat.Float  form-furo-fat-int32 form renderer for furo.fat.Int32  form-furo-fat-int64 form renderer for furo.fat.Int64  form-furo-fat-string  form-furo-fat-uint32 form renderer for furo.fat.Uint32  form-furo-fat-uint64 form renderer for furo.fat.Uint64  form-furo-integerproperty form renderer for furo.Integerproperty  form-furo-numberproperty form renderer for furo.Integerproperty  form-furo-reference  form-furo-stringoptionproperty  form-furo-stringproperty  form-furo-type-date  form-furo-type-money  form-google-protobuf-boolvalue form renderer for bool  form-google-protobuf-doublevalue form renderer for google.protobuf.Double  form-google-protobuf-floatvalue form renderer for google.protobuf.Float  form-google-protobuf-int32value form renderer for google.protobuf.Int32value  form-google-protobuf-int64value form renderer for google.protobuf.Int64  form-google-protobuf-stringvalue  form-google-protobuf-timestamp  form-google-type-date form renderer for google.type.Date  form-google-type-money form renderer for google.type.Money  form-google-type-timeofday form renderer for google.type.TimeOfDay  form-int32  form-int64  form-string  form-uint32  form-uint64  "});index.add({'id':224,'href':'/docs/components/Ui5LabelDataBinding/','title':"Ui5LabelDataBinding",'section':"components",'content':"Ui5LabelDataBinding #  @furo/components v1.0.0-alpha.2 import '@furo/components/src/src/lib/Ui5LabelDataBinding.js'; exports Ui5LabelDataBinding js\n Helper class for binding ui5 labeled elements\nAttributes and Properties #  Methods #  bindData #  bindData(element `` fieldNode FieldNode ) ⟹ void\nbind data for labeled element\n element  fieldNode    isFatType #  isFatType(field `` ) ⟹ boolean\ncheck whether it is a fat type\n field    "});index.add({'id':225,'href':'/docs/guides/init/','title':"Init",'section':"Guides",'content':"Environment #  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  // -- initialize application env, theme, api and icons  import {Init, i18n, Env, Iconset} from \u0026#34;@furo/framework/src/furo.js\u0026#34; import {Theme} from \u0026#34;@furo/framework/src/theme.js\u0026#34; import {Services, Types} from \u0026#34;@furo/spec-restapi/api/src/api_spec.js //Attention: Styling is defined in main-stage import {Themeset} from \u0026#34;./my_fancy_theme\u0026#34; import {Translations} from \u0026#34;./translations\u0026#34;; // import custom demo svg icons which are defined in demo-icons.js import {DemoIcons} from \u0026#34;./demo-icons\u0026#34;; Theme.registerThemeset(Themeset); Init.registerApiServices(Services); Init.registerApiTypes(Types); i18n.registerResBundle(Translations); Iconset.registerIconset(\u0026#34;demo\u0026#34;, DemoIcons);   "});index.add({'id':226,'href':'/docs/guides/styling/','title':"Work with style vars",'section':"Guides",'content':"Styling #  We differ theming and styling. Themes are in regular a rewrite of the components css and can contain style vars. We do not use mixins as long they are not \u0026lsquo;standard\u0026rsquo;. Styling is used to set style vars like \u0026ndash;primary. They give you the possibility to configure your themes in a simple way. Components which are using theming, give you full control over the css.\n The color system supports 12 categories of color that can be applied to components, text, icons, and surfaces.\n https://material.io/design/material-theming/implementing-your-theme.html#color\nSurface, background, and error colors #  Surface, background, and error colors typically don’t represent brand. In general, they occupy the following areas of the UI:\n Surface colors map to components such as cards, sheets, and menus Background color is found behind scrollable content Error color indicates errors in components, such as text fields  “On” colors #  The elements in an app use colors from specific categories in your color palette, such as a primary color. Whenever other screen elements, such as text or icons, appear in front of surfaces using those colors, those elements should use colors specifically designed to appear clearly and legibly against the colors behind them.\nThis category of colors is called “on” colors, referring to the fact that they color elements that are sometimes placed “on” top of key surfaces that use a primary color, secondary color, surface color, background color, or error color. These are labelled using the original category name (such as primary color) with the prefix “on”.\n“On” colors are primarily applied to text, iconography, and strokes. Sometimes, they are also applied to surfaces.\n\nHow to #  import import {Styling} from \u0026quot;./custom/styling\u0026quot;; in your main-stage.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72  import {css} from \u0026#39;lit-element\u0026#39;; export class Styling { static get theme() { // language=CSS  return css` :host { /* Inspired by https://material.io/design/color/the-color-system.html#color-theme-creation */ /* https://material.io/design/material-theming/implementing-your-theme.html#color */ --primary-light: #4ccd50; --primary: #4caf50; --primary-dark: #4b9b4f; --primary-variant: #f4f4f4; --on-primary: #212121; --secondary-light: #ffe525; --secondary: #ffeb3b; --secondary-dark: #efdb3b; --secondary-variant: #edeeed; --on-secondary: #000000; --accent-light: #419bff; --accent: #3f83e3; --accent-dark: #3f6ece; --on-accent: #e5e5e5; --background: #ffffff; --on-background: #212121; --surface-light: #f2f2f2; --surface: #eeeeee; --surface-dark: #DEDEDE; --on-surface: #212121; --separator: #c3c4c3; /* Input, Forms, Toast*/ --error: #C51162; --on-error: #ffffff; --danger-light: #FA0202; --danger: #e20202; --danger-dark: #b50202; --on-danger: #FAFAFA; --success: #129991; --on-success: #202124; --disabled: #c3c4c3; --on-disabled: #585858; /* Spacing */ --spacing-xxs: 4px; --spacing-xs: 8px; --spacing-s: 16px; --spacing: 24px; --spacing-m: 24px; --spacing-l: 32px; --spacing-xl: 48px; --spacing-xxl: 96px; /* project specific */ --blockquote: #ffc247; } `; } }   "});index.add({'id':227,'href':'/docs/about/','title':"About",'section':"Docs",'content':"About #  "});})();
