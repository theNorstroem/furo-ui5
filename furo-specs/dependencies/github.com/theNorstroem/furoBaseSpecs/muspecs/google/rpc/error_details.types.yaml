- type: |-
    google.rpc.RetryInfo #Describes when the clients can retry a failed request. Clients could ignore
     the recommendation here or retry when this information is missing from error
     responses.

     It's always recommended that clients should use exponential backoff when
     retrying.

     Clients should wait until `retry_delay` amount of time has passed since
     receiving the error response before retrying.  If retrying requests also
     fail, clients should use an exponential backoff scheme to gradually increase
     the delay between retries based on `retry_delay`, until either a maximum
     number of retries have been reached or a maximum retry delay cap has been
     reached.
  fields:
    retry_delay: 'google.protobuf.Duration:1 #Clients should wait at least this long between retrying the same request.'
  target: error_details.proto
- type: 'google.rpc.DebugInfo #Describes additional debugging info.'
  fields:
    stack_entries: '[] string:1 #The stack trace entries indicating where the error occurred.'
    detail: 'string:2 #Additional debugging information provided by the server.'
  target: error_details.proto
- type: |-
    google.rpc.QuotaFailure #Describes how a quota check failed.

     For example if a daily limit was exceeded for the calling project,
     a service could respond with a QuotaFailure detail containing the project
     id and the description of the quota limit that was exceeded.  If the
     calling project hasn't enabled the service in the developer console, then
     a service could respond with the project id and set `service_disabled`
     to true.

     Also see RetryInfo and Help types for other details about handling a
     quota failure.
  fields:
    violations: '[] google.rpc.QuotaFailure.Violation:1 #Describes all quota violations.'
  target: error_details.proto
- type: 'google.rpc.QuotaFailure.Violation # '
  fields:
    subject: 'string:1 #'
    description: 'string:2 #'
  target: error_details.proto
- type: |-
    google.rpc.ErrorInfo #Describes the cause of the error with structured details.

     Example of an error when contacting the "pubsub.googleapis.com" API when it
     is not enabled:

         { "reason": "API_DISABLED"
           "domain": "googleapis.com"
           "metadata": {
             "resource": "projects/123",
             "service": "pubsub.googleapis.com"
           }
         }

     This response indicates that the pubsub.googleapis.com API is not enabled.

     Example of an error that is returned when attempting to create a Spanner
     instance in a region that is out of stock:

         { "reason": "STOCKOUT"
           "domain": "spanner.googleapis.com",
           "metadata": {
             "availableRegions": "us-central1,us-east2"
           }
         }
  fields:
    reason: |-
        string:1 #The reason of the error. This is a constant value that identifies the
         proximate cause of the error. Error reasons are unique within a particular
         domain of errors. This should be at most 63 characters and match
         /[A-Z0-9_]+/.
    domain: |-
        string:2 #The logical grouping to which the "reason" belongs. The error domain
         is typically the registered service name of the tool or product that
         generates the error. Example: "pubsub.googleapis.com". If the error is
         generated by some common infrastructure, the error domain must be a
         globally unique value that identifies the infrastructure. For Google API
         infrastructure, the error domain is "googleapis.com".
    metadata: |-
        map<string,string>:3 #Additional structured details about this error.

         Keys should match /[a-zA-Z0-9-_]/ and be limited to 64 characters in
         length. When identifying the current value of an exceeded limit, the units
         should be contained in the key, not the value.  For example, rather than
         {"instanceLimit": "100/request"}, should be returned as,
         {"instanceLimitPerRequest": "100"}, if the client exceeds the number of
         instances that can be created in a single (batch) request.
  target: error_details.proto
- type: 'google.rpc.ErrorInfo.MetadataEntry # '
  fields:
    key: 'string:1 #'
    value: 'string:2 #'
  target: error_details.proto
- type: |-
    google.rpc.PreconditionFailure #Describes what preconditions have failed.

     For example, if an RPC failed because it required the Terms of Service to be
     acknowledged, it could list the terms of service violation in the
     PreconditionFailure message.
  fields:
    violations: '[] google.rpc.PreconditionFailure.Violation:1 #Describes all precondition violations.'
  target: error_details.proto
- type: 'google.rpc.PreconditionFailure.Violation # '
  fields:
    type: 'string:1 #'
    subject: 'string:2 #'
    description: 'string:3 #'
  target: error_details.proto
- type: |-
    google.rpc.BadRequest #Describes violations in a client request. This error type focuses on the
     syntactic aspects of the request.
  fields:
    field_violations: '[] google.rpc.BadRequest.FieldViolation:1 #Describes all violations in a client request.'
  target: error_details.proto
- type: 'google.rpc.BadRequest.FieldViolation # '
  fields:
    field: 'string:1 #'
    description: 'string:2 #'
  target: error_details.proto
- type: |-
    google.rpc.RequestInfo #Contains metadata about the request that clients can attach when filing a bug
     or providing other forms of feedback.
  fields:
    request_id: |-
        string:1 #An opaque string that should only be interpreted by the service generating
         it. For example, it can be used to identify requests in the service's logs.
    serving_data: |-
        string:2 #Any data that was used to serve this request. For example, an encrypted
         stack trace that can be sent back to the service provider for debugging.
  target: error_details.proto
- type: 'google.rpc.ResourceInfo #Describes the resource that is being accessed.'
  fields:
    resource_type: |-
        string:1 #A name for the type of resource being accessed, e.g. "sql table",
         "cloud storage bucket", "file", "Google calendar"; or the type URL
         of the resource: e.g. "type.googleapis.com/google.pubsub.v1.Topic".
    resource_name: |-
        string:2 #The name of the resource being accessed.  For example, a shared calendar
         name: "example.com_4fghdhgsrgh@group.calendar.google.com", if the current
         error is [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED].
    owner: |-
        string:3 #The owner of the resource (optional).
         For example, "user:<owner email>" or "project:<Google developer project
         id>".
    description: |-
        string:4 #Describes what error is encountered when accessing this resource.
         For example, updating a cloud project may require the `writer` permission
         on the developer console project.
  target: error_details.proto
- type: |-
    google.rpc.Help #Provides links to documentation or for performing an out of band action.

     For example, if a quota check failed with an error indicating the calling
     project hasn't enabled the accessed service, this can contain a URL pointing
     directly to the right place in the developer console to flip the bit.
  fields:
    links: '[] google.rpc.Help.Link:1 #URL(s) pointing to additional information on handling the current error.'
  target: error_details.proto
- type: 'google.rpc.Help.Link # '
  fields:
    description: 'string:1 #'
    url: 'string:2 #'
  target: error_details.proto
- type: |-
    google.rpc.LocalizedMessage #Provides a localized error message that is safe to return to the user
     which can be attached to an RPC error.
  fields:
    locale: |-
        string:1 #The locale used following the specification defined at
         http://www.rfc-editor.org/rfc/bcp/bcp47.txt.
         Examples are: "en-US", "fr-CH", "es-MX"
    message: 'string:2 #The localized error message in the above locale.'
  target: error_details.proto
