// Code generated by @furo/ui-builder. DO NOT EDIT.
import { LitElement, html, css } from 'lit';
import { FBP } from '@furo/fbp/src/fbp.js';

// eslint-disable-next-line no-unused-vars



import '@furo/data/src/furo-deep-link.js';
import '@furo/data/src/furo-collection-agent.js';

import '@furo/data/src/furo-data-object.js';


/**
 * `activity-listreport-filter-results`
 * This file will fetch the data and displays the reults table
 *
 * @fires escape-pressed Fired when the ESCAPE key was pressed while the table has the focus.
 * @fires search-hts-updated {HTS} Fired when the agent receives new HTS data from the server.
 * @summary Displays the search results
 * @customElement activity-listreport-filter-results
 * @appliesMixin FBP
 */
export class ListreportFilterResults extends FBP(LitElement) {
  /**
   * flow is ready lifecycle method
   */
  _FBPReady() {
    super._FBPReady();
     this._FBPTraceWires();
    /**
     * Register hook on wire --nextPageLoaded to delay the focus
     *
     */
    this._FBPAddWireHook('--nextPageLoaded', () => {
      setTimeout(() => {
        this._FBPTriggerWire('|--nextPageLoaded', null);
      }, 1);
    });

    /**
     * Register hook on wire --lastPageLoaded to delay the focus
     *
     */
    this._FBPAddWireHook('--lastPageLoaded', () => {
      setTimeout(() => {
        this._FBPTriggerWire('|--lastPageLoaded', null);
      }, 1);
    });

    /**
     * Register hook on wire --nextPageLoaded to delay the focus
     *
     */
    this._FBPAddWireHook('--prevPageLoaded', () => {
      setTimeout(() => {
        // long wires are not supported by fbp yet, so we do the same
        this._FBPTriggerWire('|--prevPageLoaded', null);
      }, 1);
    });
    /**
     * Register hook on wire --nextPageLoaded to delay the focus
     *
     */
    this._FBPAddWireHook('--firstPageLoaded', () => {
      setTimeout(() => {
        // long wires are not supported by fbp yet, so we do the same
        this._FBPTriggerWire('|--firstPageLoaded', null);
      }, 1);
    });

    /**
     * Register hook on wire --collectionResponse to
     * set the _noresult value based on the number of entities
     */
    this._FBPAddWireHook('--collectionResponse', e => {
      const noresult = !(e.entities && e.entities.length > 0);
      if (noresult) {
        /**
         * @event no-results
         * Fired when a collection does not have any entity
         *
         * Contains a string no-results .
         */
        const customEvent = new Event('no-results', { composed: true, bubbles: true });
        customEvent.detail = 'NoFilterResults';
        this.dispatchEvent(customEvent);
      } else {
        const customEvent = new Event('results', { composed: true, bubbles: true });
        customEvent.detail = 'results';
        this.dispatchEvent(customEvent);
      }
    });
  }

  /**
   * searchterm sets the qp q with ?q=searchterm
   *
   * On the agent we set the qp q, because we do not want autosearch
   * @public
   * @param searchterm
   */
  searchterm(searchterm) {
    this._FBPTriggerWire('|--searchQp', { q: searchterm });
  }

  /**
   * clear the search
   */
  clearSearch(e) {
    this._FBPTriggerWire('|--clearSearch', e);
  }

  list(e) {
    this._FBPTriggerWire('|--list', e);
  }

  first(e) {
    this._FBPTriggerWire('|--first', e);
  }

  next(e) {
    this._FBPTriggerWire('|--next', e);
  }

  prev(e) {
    this._FBPTriggerWire('|--prev', e);
  }

  last(e) {
    this._FBPTriggerWire('|--last', e);
  }

  /**
   *  Triggers a reload of the collection agent via furo-deep-link
   * @public
   * @param query
   */
  updateQueryParam(query) {
    this._FBPTriggerWire('|--updateQueryParam', query);
  }

  /**
   * htsIn Set hts as alternative to the QP
   * @public
   * @param hts
   */
  htsIn(hts) {
    this._FBPTriggerWire('|--htsIn', hts);
  }

  /**
   * Focuses the heading of the card, so you can navigate with the keyboard (up,down,enter)
   */
  focus() {
    setTimeout(() => {
      this._FBPTriggerWire('|--focus', null);
    }, 16);
  }

  /**
   * bindFilterObject
   * @public
   * @param FieldNode filter object
   */
  bindFilterObject(FieldNode) {
    this._FBPTriggerWire('|--bindFilterObject', FieldNode);
  }

  /**
   * setFields coma separated list with fields
   * @public
   * @param fieldsString
   */
  setFields(fieldsString) {
    this._FBPTriggerWire('|--setFields', fieldsString);
  }

  /**
   * setColumns set the col order
   * @public
   * @param sortedlist
   */
  setColumns(sortedlist) {
    this._FBPTriggerWire('|--setColumns', sortedlist);
  }

  /**
   * setOrderBy to set the sorting
   * @public
   * @param sortorder
   */
  setOrderBy(sortorder) {
    this._FBPTriggerWire('|--setOrderBy', sortorder);
  }

  /**
   * Themable Styles
   * @private
   * @return {CSSResult}
   */
  static get styles() {
    // language=CSS
    return css`
      :host {
        display: block;
      }

      :host([hidden]) {
        display: none;
      }
    `;
  }

  /**
   * @private
   * @returns {TemplateResult}
   * @private
   */
  render() {
    // language=HTML
    return html`
      <furo-keydown key="Escape" at-key="^^escape-pressed"></furo-keydown>

      <furo-ui5-section noborder>
        <furo-ui5-subsection>
          <furo-horizontal-flex slot="action">
            <ui5-button
              design="Transparent"
              at-click="^^show-table-settings-clicked, --settingsClicked"
              icon="action-settings"
            ></ui5-button>
          </furo-horizontal-flex>

          <!-- Table cards are a type of object group card, and display a set of items in a table format. -->
          <furo-ui5-filtered-table
            at-arrow-down-on-last-row="--nextPageRequested"
            at-arrow-up-on-first-row="--prevPageRequested"
            fn-focus="|--focus"
            fn-focus-first="|--nextPageLoaded, |--firstPageLoaded, |--lastPageLoaded"
            fn-focus-last="|--prevPageLoaded"
            no-data-text="No data available"
            fn-bind-data="--collectionDao(*.entities)"
            sticky-column-header
            fn-set-columns="|--setColumns"
            mode="SingleSelect"
          >
            <ui5-table-column
              slot="columns"
              field="*.data.id"
              id="id"
              min-width="650"
              demand-popin
              popin-text="id"
              ><span>id</span></ui5-table-column
            >
            <ui5-table-column
              slot="columns"
              field="*.data.display_name"
              id="display_name"
              min-width="400"
              demand-popin
              popin-text="display_name"
              ><span>display_name</span></ui5-table-column
            >
            <ui5-table-column
              slot="columns"
              field="*.data.description"
              id="description"
              min-width="960"
              demand-popin
              popin-text="description"
              ><span>description</span></ui5-table-column
            >

            <ui5-table-column
              slot="columns"
              field="*.data.start"
              id="start"
              min-width="1200"
              demand-popin
              popin-text="start"
              ><span>start</span></ui5-table-column
            >

            <ui5-table-column
              slot="columns"
              field="*.data.end"
              id="end"
              min-width="650"
              demand-popin
              popin-text="end"
              ><span>end</span></ui5-table-column
            >

            <ui5-table-column
              slot="columns"
              field="*.data.members"
              id="members"
              min-width="960"
              demand-popin
              popin-text="members"
              ><span
                >members</span
              ></ui5-table-column
            >


          </furo-ui5-filtered-table>
        </furo-ui5-subsection>
      </furo-ui5-section>

      <!-- Creates HATEOAS links according the set specification. Required for DeepLinking. -->
      <furo-deep-link
        service="projectservice.ProjectService"
        at-hts-out="--htsOut"
        fn-qp-in="|--updateQueryParam"
      ></furo-deep-link>

      <!-- API communication component. Required to handle collections.
      The search-hts-updated event will be catched in the view and passed down to the pagination bar
      -->
      <furo-collection-agent
        service="projectservice.ProjectService"
        at-hts-updated="^^search-hts-updated"
        at-request-started="--reqStarted"
        at-response="--collectionResponse"
        Æ’-set-qp="|--searchQp"
        fn-list="|--list"
        fn-first="|--first"
        fn-hts-in="--htsOut,|--htsIn"
        fn-last="|--last"
        fn-bind-request-data="|--bindFilterObject"
        set-fields="|--setFields"
        at-next-success="--nextPageLoaded"
        at-prev-success="--prevPageLoaded"
        at-first-success="--firstPageLoaded"
        at-last-success="--lastPageLoaded"
        fn-next="|--next, --nextPageRequested"
        fn-prev="|--prev, --prevPageRequested"
        fn-set-order-by="|--setOrderBy"
      ></furo-collection-agent>
      <!-- Client data model based on the set data type. -->
      <furo-data-object
        type="project.ProjectCollection"
        at-object-ready="--collectionDao"
        fn-inject-raw="--collectionResponse"
        fn-init="|--setColumns, |--clearSearch, --settingsClicked"
      ></furo-data-object>
    `;
  }
}

window.customElements.define('activity-listreport-filter-results', ListreportFilterResults);
