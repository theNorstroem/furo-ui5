{
  "collection": "1.0.0-rc.1",
  "module": "typerenderer",
  "pkg": {
    "name": "@furo/ui5",
    "description": "SAP UI5 Web Components data bindings for furo",
    "version": "1.0.0-rc.1",
    "homepage": "https://github.com/eclipse/eclipsefuro-web/tree/main/packages/furo-ui5",
    "repository": "git@github.com:eclipse/eclipsefuro-web.git",
    "author": {
      "name": "",
      "email": "",
      "url": ""
    },
    "keywords": [
      "web-components",
      "flow based programming",
      "flowbased",
      "flow"
    ],
    "license": "MIT",
    "main": "src/furo-catalog.js",
    "scripts": {
      "analyze": "cem analyze --globs \"src/**/*.js\" --exclude **/furo-catalog.js --litelement",
      "start": "web-dev-server --app-index demos --open",
      "lint": "eslint --ext .js,.html . --ignore-pattern 'hugo/*' --ignore-pattern 'docs/*' --ignore-path .gitignore && prettier \"**/*.js\" --check  --ignore-path .prettierignore",
      "format": "eslint --ext .js,.html . --fix --ignore-path .prettierignore && prettier \"**/*.js\" --write --ignore-path .prettierignore",
      "test": "web-test-runner  --coverage",
      "test:watch": "web-test-runner  --watch",
      "docs:start": "cd hugo && hugo serve",
      "docs:generate": "npm run analyze:components && npm run analyze:typerenderer && ./scripts/cem.sh",
      "docs:publish": "./scripts/publishDocs.sh",
      "analyze:components": "cem analyze --globs \"src/**/*.js\" --exclude **/typerenderer/* --litelement --outdir tmp/components",
      "analyze:typerenderer": "cem analyze --globs \"src/typerenderer/*.js\" --exclude --litelement --outdir tmp/typerenderer"
    },
    "peerDependencies": {
      "@furo/fbp": "^6.0.0-rc.3",
      "@furo/framework": "^2.0.0-rc.3",
      "@furo/layout": "^2.0.0-rc.4",
      "@furo/data": "^2.0.0-rc.3",
      "@furo/util": "^2.0.0-rc.4",
      "@ui5/webcomponents": "^1.0.1",
      "@ui5/webcomponents-base": "^1.0.1",
      "@ui5/webcomponents-fiori": "^1.0.1",
      "@ui5/webcomponents-icons": "^1.0.1",
      "lit": "^2.0.1"
    },
    "dependencies": {
      "markdown-it": "^9.0.1",
      "apexcharts": "^3.29.0",
      "signature_pad": "3.0.0-beta.4"
    },
    "devDependencies": {
      "@furo/route": "^2.0.0-rc.3",
      "lit-html": "2.0.1",
      "@custom-elements-manifest/analyzer": "^0.5.7",
      "@open-wc/eslint-config": "^7.0.0",
      "@open-wc/testing": "^3.0.3",
      "@web/dev-server": "^0.1.28",
      "@web/test-runner": "^0.13.21",
      "@esm-bundle/chai": "^4.3.4-fix.0",
      "eslint": "^8.2.0",
      "eslint-config-prettier": "^8.3.0",
      "husky": "^7.0.4",
      "lerna": "^4.0.0",
      "lint-staged": "^11.2.6",
      "prettier": "^2.4.1"
    },
    "publishConfig": {
      "access": "public"
    },
    "engines": {
      "node": ">=10.0"
    },
    "customElements": "tmp/typerenderer/custom-elements.json",
    "eslintConfig": {
      "extends": [
        "@open-wc",
        "prettier"
      ]
    },
    "prettier": {
      "singleQuote": true,
      "arrowParens": "avoid"
    },
    "husky": {
      "hooks": {
        "pre-commit": "lint-staged"
      }
    },
    "lint-staged": {
      "*.js": [
        "eslint --fix --ignore-pattern 'hugo/*' --ignore-pattern 'docs/*' --ignore-pattern 'test--/*'",
        "prettier --write",
        "git add"
      ]
    }
  },
  "cem": {
    "schemaVersion": "1.0.0",
    "readme": "",
    "modules": [
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-bool.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-bool`\nThe cell-bool component displays a FieldNode of type `bool` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellBool",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "description": "of type bool, furo.fat.Bool, google.wrapper.BoolValue",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_getTemplate",
                "description": "Template logic",
                "return": {
                  "type": {
                    "text": "*"
                  }
                },
                "privacy": "private"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "cell-bool",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CellBool",
            "declaration": {
              "name": "CellBool",
              "module": "src/typerenderer/cell-bool.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cell-bool",
            "declaration": {
              "name": "CellBool",
              "module": "src/typerenderer/cell-bool.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-double.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-double`\nThe cell-double component displays a FieldNode of type `double` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellDouble",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "cell-double",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CellDouble",
            "declaration": {
              "name": "CellDouble",
              "module": "src/typerenderer/cell-double.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cell-double",
            "declaration": {
              "name": "CellDouble",
              "module": "src/typerenderer/cell-double.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-float.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-float`\nThe cell-float component displays a FieldNode of type `float` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFloat",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "cell-float",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CellFloat",
            "declaration": {
              "name": "CellFloat",
              "module": "src/typerenderer/cell-float.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cell-float",
            "declaration": {
              "name": "CellFloat",
              "module": "src/typerenderer/cell-float.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-furo-fat-bool.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-furo-fat-bool`\nThe cell-furo-fat-bool component displays a FieldNode of type `furo.fat.bool` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFuroFatBool",
            "members": [
              {
                "kind": "method",
                "name": "_getTemplate",
                "description": "Template logic",
                "return": {
                  "type": {
                    "text": "*"
                  }
                },
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellBool",
                  "module": "src/typerenderer/cell-bool.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "description": "of type bool, furo.fat.Bool, google.wrapper.BoolValue",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellBool",
                  "module": "src/typerenderer/cell-bool.js"
                }
              }
            ],
            "superclass": {
              "name": "CellBool",
              "module": "/src/typerenderer/cell-bool.js"
            },
            "tagName": "cell-furo-fat-bool",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-furo-fat-bool",
            "declaration": {
              "name": "CellFuroFatBool",
              "module": "src/typerenderer/cell-furo-fat-bool.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-furo-fat-double.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-furo-fat-double`\nThe cell-furo-fat-double component displays a FieldNode of type `furo.fat.Double` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFuroFatDouble",
            "members": [
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellDouble",
                  "module": "src/typerenderer/cell-double.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellDouble",
                  "module": "src/typerenderer/cell-double.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "CellDouble",
                  "module": "src/typerenderer/cell-double.js"
                }
              }
            ],
            "superclass": {
              "name": "CellDouble",
              "module": "/src/typerenderer/cell-double.js"
            },
            "tagName": "cell-furo-fat-double",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-furo-fat-double",
            "declaration": {
              "name": "CellFuroFatDouble",
              "module": "src/typerenderer/cell-furo-fat-double.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-furo-fat-float.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-furo-fat-float`\nThe cell-furo-fat-float component displays a FieldNode of type `furo.fat.Float` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFuroFatFloat",
            "members": [
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellFloat",
                  "module": "src/typerenderer/cell-float.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellFloat",
                  "module": "src/typerenderer/cell-float.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "default": "''",
                "inheritedFrom": {
                  "name": "CellFloat",
                  "module": "src/typerenderer/cell-float.js"
                }
              }
            ],
            "superclass": {
              "name": "CellFloat",
              "module": "/src/typerenderer/cell-float.js"
            },
            "tagName": "cell-furo-fat-float",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-furo-fat-float",
            "declaration": {
              "name": "CellFuroFatFloat",
              "module": "src/typerenderer/cell-furo-fat-float.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-furo-fat-int32.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-int32`\nThe cell-int32 component displays a FieldNode of type `furo.fat.Int32` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFuroFatInt32",
            "members": [
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              }
            ],
            "superclass": {
              "name": "CellInt32",
              "module": "/src/typerenderer/cell-int32.js"
            },
            "tagName": "cell-furo-fat-int32",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CellFuroFatInt32",
            "declaration": {
              "name": "CellFuroFatInt32",
              "module": "src/typerenderer/cell-furo-fat-int32.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cell-furo-fat-int32",
            "declaration": {
              "name": "CellFuroFatInt32",
              "module": "src/typerenderer/cell-furo-fat-int32.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-furo-fat-int64.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-furo-fat-int64`\nThe cell-furo-fat-int64 component displays a FieldNode of type `furo.fat.int64` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFuroFatInt64",
            "superclass": {
              "name": "CellFuroFatInt32",
              "module": "/src/typerenderer/cell-furo-fat-int32.js"
            },
            "tagName": "cell-furo-fat-int64",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CellFuroFatInt64",
            "declaration": {
              "name": "CellFuroFatInt64",
              "module": "src/typerenderer/cell-furo-fat-int64.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cell-furo-fat-int64",
            "declaration": {
              "name": "CellFuroFatInt64",
              "module": "src/typerenderer/cell-furo-fat-int64.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-furo-fat-string.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-furo-fat-string`\nThe cell-furo-fat-string component displays a FieldNode of type `furo.fat.String` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFuroFatString",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_updateMeta"
              },
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "cell-furo-fat-string",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-furo-fat-string",
            "declaration": {
              "name": "CellFuroFatString",
              "module": "src/typerenderer/cell-furo-fat-string.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-furo-fat-uint32.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-furo-fat-uint32`\nThe cell-furo-fat-uint32 component displays a FieldNode of type `furo.fat.Uint32` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFuroFatUint32",
            "superclass": {
              "name": "CellFuroFatInt32",
              "module": "/src/typerenderer/cell-furo-fat-int32.js"
            },
            "tagName": "cell-furo-fat-uint32",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-furo-fat-uint32",
            "declaration": {
              "name": "CellFuroFatUint32",
              "module": "src/typerenderer/cell-furo-fat-uint32.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-furo-fat-uint64.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-furo-fat-uint64`\nThe cell-furo-fat-uint64 component displays a FieldNode of type `furo.fat.uint64` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFuroFatUint64",
            "superclass": {
              "name": "CellFuroFatInt64",
              "module": "/src/typerenderer/cell-furo-fat-int64.js"
            },
            "tagName": "cell-furo-fat-uint64",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-furo-fat-uint64",
            "declaration": {
              "name": "CellFuroFatUint64",
              "module": "src/typerenderer/cell-furo-fat-uint64.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-furo-integerproperty.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-furo-integerproperty`\nThe cell-furo-integerproperty component displays a FieldNode of type `furo.Integerproperty` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFuroIntegerproperty",
            "members": [
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              }
            ],
            "superclass": {
              "name": "CellInt32",
              "module": "/src/typerenderer/cell-int32.js"
            },
            "tagName": "cell-furo-integerproperty",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CellFuroIntegerproperty",
            "declaration": {
              "name": "CellFuroIntegerproperty",
              "module": "src/typerenderer/cell-furo-integerproperty.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cell-furo-integerproperty",
            "declaration": {
              "name": "CellFuroIntegerproperty",
              "module": "src/typerenderer/cell-furo-integerproperty.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-furo-link.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-furo-link`\nThe cell-furo-link component displays a FieldNode of type `furo.Link` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFuroLink",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "cell-furo-link",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-furo-link",
            "declaration": {
              "name": "CellFuroLink",
              "module": "src/typerenderer/cell-furo-link.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-furo-numberproperty.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-furo-numberproperty`\nThe cell-furo-numberrproperty component displays a FieldNode of type `furo.Numberproperty` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFuroNumberproperty",
            "superclass": {
              "name": "CellFuroIntegerproperty",
              "module": "/src/typerenderer/cell-furo-integerproperty.js"
            },
            "tagName": "cell-furo-numberproperty",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CellFuroNumberproperty",
            "declaration": {
              "name": "CellFuroNumberproperty",
              "module": "src/typerenderer/cell-furo-numberproperty.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cell-furo-numberproperty",
            "declaration": {
              "name": "CellFuroNumberproperty",
              "module": "src/typerenderer/cell-furo-numberproperty.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-furo-property-repeated.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-furo-property-repeats`\nThe cell-furo-property-repeats component displays a FieldNode of type `furo.Property` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFuroPropertyRepeated",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component\nthe cell-furo-property-repeats is a simple proxy element to show\nthe initial state if no data is available."
              },
              {
                "kind": "method",
                "name": "_updateFieldList"
              },
              {
                "kind": "field",
                "name": "elementList",
                "type": {
                  "text": "array"
                },
                "default": "[]"
              },
              {
                "kind": "field",
                "name": "_typeResolved",
                "type": {
                  "text": "boolean"
                },
                "default": "false"
              },
              {
                "kind": "field",
                "name": "noDataText",
                "privacy": "public",
                "description": "Defines the empty state display\nWith a furo.Property type, the effective type is only known when the data is transmitted.\nDefault: ''",
                "attribute": "noDataText"
              }
            ],
            "attributes": [
              {
                "name": "noDataText",
                "description": "Defines the empty state display\nWith a furo.Property type, the effective type is only known when the data is transmitted.\nDefault: ''",
                "fieldName": "noDataText"
              }
            ],
            "mixins": [
              {
                "name": "FBP",
                "package": "@furo/fbp/src/fbp.js"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "cell-furo-property-repeated",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CellFuroPropertyRepeated",
            "declaration": {
              "name": "CellFuroPropertyRepeated",
              "module": "src/typerenderer/cell-furo-property-repeated.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cell-furo-property-repeated",
            "declaration": {
              "name": "CellFuroPropertyRepeated",
              "module": "src/typerenderer/cell-furo-property-repeated.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-furo-property.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-furo-property`\nThe cell-furo-property component displays a FieldNode of type `furo.Property` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFuroProperty",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component\nthe cell-furo-property is a simple proxy element to show\nthe initial state if no data is available."
              },
              {
                "kind": "method",
                "name": "_waitForType",
                "parameters": [
                  {
                    "name": "field",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "furo.Property wait for @type information\nregisters event listener and creates the component as soon as the @type information is available.",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_createConcreteType",
                "description": "Creates the concrete type specific renderer",
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "noDataText",
                "type": {
                  "text": "string"
                },
                "default": "''",
                "privacy": "public",
                "description": "Defines the empty state display\nWith a furo.Property type, the effective type is only known when the data is transmitted.\nDefault: ''",
                "attribute": "noDataText"
              },
              {
                "kind": "field",
                "name": "_typeResolved",
                "type": {
                  "text": "boolean"
                },
                "default": "false"
              }
            ],
            "attributes": [
              {
                "name": "noDataText",
                "description": "Defines the empty state display\nWith a furo.Property type, the effective type is only known when the data is transmitted.\nDefault: ''",
                "fieldName": "noDataText"
              }
            ],
            "mixins": [
              {
                "name": "FBP",
                "package": "@furo/fbp/src/fbp.js"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "cell-furo-property",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CellFuroProperty",
            "declaration": {
              "name": "CellFuroProperty",
              "module": "src/typerenderer/cell-furo-property.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cell-furo-property",
            "declaration": {
              "name": "CellFuroProperty",
              "module": "src/typerenderer/cell-furo-property.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-furo-reference.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-furo-reference`\nThe cell-furo-reference component displays a FieldNode of type `furo.Reference` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFuroReference",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_formatCell",
                "description": "Template logic",
                "return": {
                  "type": {
                    "text": "*"
                  }
                },
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "cell-furo-reference",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-furo-reference",
            "declaration": {
              "name": "CellFuroReference",
              "module": "src/typerenderer/cell-furo-reference.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-furo-stringoptionproperty.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-furo-stringoptionproperty`\nThe cell-furo-numberrproperty component displays a FieldNode of type `furo.Stringoptionproperty` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFuroStringoptionproperty",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellString",
                  "module": "src/typerenderer/cell-string.js"
                }
              }
            ],
            "superclass": {
              "name": "CellFuroStringproperty",
              "module": "/src/typerenderer/cell-furo-stringproperty.js"
            },
            "tagName": "cell-furo-stringoptionproperty",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CellFuroStringoptionproperty",
            "declaration": {
              "name": "CellFuroStringoptionproperty",
              "module": "src/typerenderer/cell-furo-stringoptionproperty.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cell-furo-stringoptionproperty",
            "declaration": {
              "name": "CellFuroStringoptionproperty",
              "module": "src/typerenderer/cell-furo-stringoptionproperty.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-furo-stringproperty.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-furo-stringproperty`\nThe cell-furo-stringproperty component displays a FieldNode of type `furo.Stringproperty` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFuroStringproperty",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellString",
                  "module": "src/typerenderer/cell-string.js"
                }
              }
            ],
            "superclass": {
              "name": "CellString",
              "module": "/src/typerenderer/cell-string.js"
            },
            "tagName": "cell-furo-stringproperty",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CellFuroStringproperty",
            "declaration": {
              "name": "CellFuroStringproperty",
              "module": "src/typerenderer/cell-furo-stringproperty.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cell-furo-stringproperty",
            "declaration": {
              "name": "CellFuroStringproperty",
              "module": "src/typerenderer/cell-furo-stringproperty.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-furo-type-date.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-furo-type-date`\nThe cell-furo-type-date component displays a FieldNode of type `furo.type.Date` in read only mode.\n\nif the field `display_name` is set, the component will use that value for the display.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFuroTypeDate",
            "members": [
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellGoogleTypeDate",
                  "module": "src/typerenderer/cell-google-type-date.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellGoogleTypeDate",
                  "module": "src/typerenderer/cell-google-type-date.js"
                }
              },
              {
                "kind": "method",
                "name": "_convertDateToString",
                "static": true,
                "parameters": [
                  {
                    "name": "fieldNode"
                  },
                  {
                    "name": "date"
                  }
                ],
                "description": "convert date object to String according to Intl DateTimeFormat\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\nExample output: locale de-CH 31.12.2021",
                "return": {
                  "type": {
                    "text": "string"
                  }
                },
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellGoogleTypeDate",
                  "module": "src/typerenderer/cell-google-type-date.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "CellGoogleTypeDate",
                  "module": "src/typerenderer/cell-google-type-date.js"
                }
              }
            ],
            "superclass": {
              "name": "CellGoogleTypeDate",
              "module": "/src/typerenderer/cell-google-type-date.js"
            },
            "tagName": "cell-furo-type-date",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-furo-type-date",
            "declaration": {
              "name": "CellFuroTypeDate",
              "module": "src/typerenderer/cell-furo-type-date.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-furo-type-money.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-furo-type-money`\nThe cell-furo-type-money component displays a FieldNode of type `furo.type.Money` in read only mode.\n\nif the field `display_name` is set, the component will use that value for the display.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellFuroTypeMoney",
            "members": [
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellGoogleTypeMoney",
                  "module": "src/typerenderer/cell-google-type-money.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellGoogleTypeMoney",
                  "module": "src/typerenderer/cell-google-type-money.js"
                }
              },
              {
                "kind": "method",
                "name": "_convertTypeToNumber",
                "static": true,
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "return": {
                  "type": {
                    "text": "number"
                  }
                },
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellGoogleTypeMoney",
                  "module": "src/typerenderer/cell-google-type-money.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "CellGoogleTypeMoney",
                  "module": "src/typerenderer/cell-google-type-money.js"
                }
              },
              {
                "kind": "field",
                "name": "_valueObject",
                "type": {
                  "text": "{amount: number}"
                },
                "privacy": "private",
                "default": "{ amount: Number.NaN }",
                "inheritedFrom": {
                  "name": "CellGoogleTypeMoney",
                  "module": "src/typerenderer/cell-google-type-money.js"
                }
              }
            ],
            "superclass": {
              "name": "CellGoogleTypeMoney",
              "module": "/src/typerenderer/cell-google-type-money.js"
            },
            "tagName": "cell-furo-type-money",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-furo-type-money",
            "declaration": {
              "name": "CellFuroTypeMoney",
              "module": "src/typerenderer/cell-furo-type-money.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-google-protobuf-any.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-google-protobuf-any`\nThe cell-google-protobuf-any component is a wrapper displays of type `google.protobuf.Any` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellGoolgeProtobufAny",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component\nthe cell-google-protobuf-any is a simple proxy element to show\nthe initial state if no data is available."
              },
              {
                "kind": "method",
                "name": "_waitForType",
                "parameters": [
                  {
                    "name": "field",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "google.protobuf.Any wait for @type information\nregisters event listener and creates the component as soon as the @type information is available.",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_createContreteType",
                "description": "Creates the concrete type specific renderer",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_warning",
                "description": "warns if diynamic component is not imported",
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_typeResolved",
                "type": {
                  "text": "boolean"
                },
                "default": "false"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "cell-google-protobuf-any",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-google-protobuf-any",
            "declaration": {
              "name": "CellGoolgeProtobufAny",
              "module": "src/typerenderer/cell-google-protobuf-any.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-google-protobuf-boolvalue.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-google-protobuf-boolvalue`\nThe cell-google-protobuf-boolvalue component displays a FieldNode of type `google.protobuf.BoolValue` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellGoolgeProtobufBoolvalue",
            "superclass": {
              "name": "CellBool",
              "module": "/src/typerenderer/cell-bool.js"
            },
            "tagName": "cell-google-protobuf-boolvalue",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "description": "of type bool, furo.fat.Bool, google.wrapper.BoolValue",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellBool",
                  "module": "src/typerenderer/cell-bool.js"
                }
              },
              {
                "kind": "method",
                "name": "_getTemplate",
                "description": "Template logic",
                "return": {
                  "type": {
                    "text": "*"
                  }
                },
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellBool",
                  "module": "src/typerenderer/cell-bool.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-google-protobuf-boolvalue",
            "declaration": {
              "name": "CellGoolgeProtobufBoolvalue",
              "module": "src/typerenderer/cell-google-protobuf-boolvalue.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-google-protobuf-doublevalue.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-double`\nThe cell-double component displays a FieldNode of type `google.protobuf.DoubleValue` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellGoogleProtobufDoublevalue",
            "superclass": {
              "name": "CellDouble",
              "module": "/src/typerenderer/cell-double.js"
            },
            "tagName": "cell-google-protobuf-doublevalue",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellDouble",
                  "module": "src/typerenderer/cell-double.js"
                }
              },
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellDouble",
                  "module": "src/typerenderer/cell-double.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "CellDouble",
                  "module": "src/typerenderer/cell-double.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-google-protobuf-doublevalue",
            "declaration": {
              "name": "CellGoogleProtobufDoublevalue",
              "module": "src/typerenderer/cell-google-protobuf-doublevalue.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-google-protobuf-floatvalue.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-google-protobuf-floatvalue`\nThe cell-google-protobuf-floatvalue component displays a FieldNode of type `google.protobuf.FloatValue` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellGoolgeProtobufFloatvalue",
            "superclass": {
              "name": "CellFloat",
              "module": "/src/typerenderer/cell-float.js"
            },
            "tagName": "cell-google-protobuf-floatvalue",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellFloat",
                  "module": "src/typerenderer/cell-float.js"
                }
              },
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellFloat",
                  "module": "src/typerenderer/cell-float.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "default": "''",
                "inheritedFrom": {
                  "name": "CellFloat",
                  "module": "src/typerenderer/cell-float.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-google-protobuf-floatvalue",
            "declaration": {
              "name": "CellGoolgeProtobufFloatvalue",
              "module": "src/typerenderer/cell-google-protobuf-floatvalue.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-google-protobuf-int32value.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-google-protobuf-boolvalue`\nThe cell-google-protobuf-boolvalue component displays a FieldNode of type `google.protobuf.BoolValue` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellGoolgeProtobufIn32value",
            "superclass": {
              "name": "CellInt32",
              "module": "/src/typerenderer/cell-int32.js"
            },
            "tagName": "cell-google-protobuf-int32value",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              },
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-google-protobuf-int32value",
            "declaration": {
              "name": "CellGoolgeProtobufIn32value",
              "module": "src/typerenderer/cell-google-protobuf-int32value.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-google-protobuf-int64value.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-google-protobuf-boolvalue`\nThe cell-google-protobuf-boolvalue component displays a FieldNode of type `google.protobuf.BoolValue` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellGoolgeProtobufIn64value",
            "superclass": {
              "name": "CellInt64",
              "module": "/src/typerenderer/cell-int64.js"
            },
            "tagName": "cell-google-protobuf-int64value",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellInt64",
                  "module": "src/typerenderer/cell-int64.js"
                }
              },
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellInt64",
                  "module": "src/typerenderer/cell-int64.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "CellInt64",
                  "module": "src/typerenderer/cell-int64.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-google-protobuf-int64value",
            "declaration": {
              "name": "CellGoolgeProtobufIn64value",
              "module": "src/typerenderer/cell-google-protobuf-int64value.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-google-protobuf-stringvalue.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-google-protobuf-stringvalue`\nThe cell-google-protobuf-stringvalue component displays a FieldNode of type `google.protobuf.Stringvalue` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellGoogleProtobufStringvalue",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_updateValue"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "cell-google-protobuf-stringvalue",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-google-protobuf-stringvalue",
            "declaration": {
              "name": "CellGoogleProtobufStringvalue",
              "module": "src/typerenderer/cell-google-protobuf-stringvalue.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-google-protobuf-timestamp.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-google-protobuf-timestamp`\nThe cell-google-protobuf-timestamp component displays a FieldNode of type `google.prtobuf.Timestamp` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellGoogleProtobufTimestamp",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_convertDateToString",
                "static": true,
                "parameters": [
                  {
                    "name": "fieldValue"
                  },
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "convert date object to String according to Intl DateTimeFormat\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\nExample output: locale de-CH 15.01.2017, 02:30:15",
                "return": {
                  "type": {
                    "text": "string"
                  }
                },
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "cell-google-protobuf-timestamp",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-google-protobuf-timestamp",
            "declaration": {
              "name": "CellGoogleProtobufTimestamp",
              "module": "src/typerenderer/cell-google-protobuf-timestamp.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-google-protobuf-uint32value.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-google-protobuf-boolvalue`\nThe cell-google-protobuf-boolvalue component displays a FieldNode of type `google.protobuf.BoolValue` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellGoolgeProtobufUin32value",
            "superclass": {
              "name": "CellUint32",
              "module": "/src/typerenderer/cell-uint32.js"
            },
            "tagName": "cell-google-protobuf-uint32value",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              },
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-google-protobuf-uint32value",
            "declaration": {
              "name": "CellGoolgeProtobufUin32value",
              "module": "src/typerenderer/cell-google-protobuf-uint32value.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-google-protobuf-uint64value.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-google-protobuf-boolvalue`\nThe cell-google-protobuf-boolvalue component displays a FieldNode of type `google.protobuf.BoolValue` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellGoolgeProtobufUin64value",
            "superclass": {
              "name": "CellUint64",
              "module": "/src/typerenderer/cell-uint64.js"
            },
            "tagName": "cell-google-protobuf-uint64value",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellInt64",
                  "module": "src/typerenderer/cell-int64.js"
                }
              },
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellInt64",
                  "module": "src/typerenderer/cell-int64.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "CellInt64",
                  "module": "src/typerenderer/cell-int64.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-google-protobuf-uint64value",
            "declaration": {
              "name": "CellGoolgeProtobufUin64value",
              "module": "src/typerenderer/cell-google-protobuf-uint64value.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-google-type-color.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-google-type-color`\nThe cell-google-type-color component displays a FieldNode of type `google.type.Color` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellGoolgeTypeColor",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_updateValue",
                "description": "update value properties rgb",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_getTemplate",
                "description": "Template logic",
                "return": {
                  "type": {
                    "text": "*"
                  }
                },
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_red",
                "type": {
                  "text": "string"
                },
                "default": "''"
              },
              {
                "kind": "field",
                "name": "_green",
                "type": {
                  "text": "string"
                },
                "default": "''"
              },
              {
                "kind": "field",
                "name": "_blue",
                "type": {
                  "text": "string"
                },
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "cell-google-type-color",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-google-type-color",
            "declaration": {
              "name": "CellGoolgeTypeColor",
              "module": "src/typerenderer/cell-google-type-color.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-google-type-date.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-google-type-date`\nThe cell-google-type-date component displays a FieldNode of type `google.type.Date` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellGoogleTypeDate",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_convertDateToString",
                "static": true,
                "parameters": [
                  {
                    "name": "fieldNode"
                  },
                  {
                    "name": "date"
                  }
                ],
                "description": "convert date object to String according to Intl DateTimeFormat\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\nExample output: locale de-CH 31.12.2021",
                "return": {
                  "type": {
                    "text": "string"
                  }
                },
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "cell-google-type-date",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CellGoogleTypeDate",
            "declaration": {
              "name": "CellGoogleTypeDate",
              "module": "src/typerenderer/cell-google-type-date.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cell-google-type-date",
            "declaration": {
              "name": "CellGoogleTypeDate",
              "module": "src/typerenderer/cell-google-type-date.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-google-type-money.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-google-type-money`\nThe cell-google-type-money component displays a FieldNode of type `google.type.Money` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellGoogleTypeMoney",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_convertTypeToNumber",
                "static": true,
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "return": {
                  "type": {
                    "text": "number"
                  }
                },
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              },
              {
                "kind": "field",
                "name": "_valueObject",
                "type": {
                  "text": "{amount: number}"
                },
                "privacy": "private",
                "default": "{ amount: Number.NaN }"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "cell-google-type-money",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CellGoogleTypeMoney",
            "declaration": {
              "name": "CellGoogleTypeMoney",
              "module": "src/typerenderer/cell-google-type-money.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cell-google-type-money",
            "declaration": {
              "name": "CellGoogleTypeMoney",
              "module": "src/typerenderer/cell-google-type-money.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-google-type-timeofday.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-google-type-timeofday`\nThe cell-google-type-timeofday component displays a FieldNode of type `google.type.TimeOfDay` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellGoogleTypeTimeofday",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_convertDayTimeToString",
                "static": true,
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "convert date object to String according to local time string\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\nExample output: 1:15:30 AM by en-US",
                "return": {
                  "type": {
                    "text": "string"
                  }
                },
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "cell-google-type-timeofday",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "cell-google-type-timeofday",
            "declaration": {
              "name": "CellGoogleTypeTimeofday",
              "module": "src/typerenderer/cell-google-type-timeofday.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-int32.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-int32`\nThe cell-int32 component displays a FieldNode of type `int32` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellInt32",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "cell-int32",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CellInt32",
            "declaration": {
              "name": "CellInt32",
              "module": "src/typerenderer/cell-int32.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cell-int32",
            "declaration": {
              "name": "CellInt32",
              "module": "src/typerenderer/cell-int32.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-int64.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-int64`\nThe cell-int64 component displays a FieldNode of type `int64` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellInt64",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "cell-int64",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CellInt64",
            "declaration": {
              "name": "CellInt64",
              "module": "src/typerenderer/cell-int64.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cell-int64",
            "declaration": {
              "name": "CellInt64",
              "module": "src/typerenderer/cell-int64.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-string.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-string`\nThe cell-string component displays a FieldNode of type `string` in read only mode.\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellString",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "cell-string",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CellString",
            "declaration": {
              "name": "CellString",
              "module": "src/typerenderer/cell-string.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cell-string",
            "declaration": {
              "name": "CellString",
              "module": "src/typerenderer/cell-string.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-uint32.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-uint32`\nThe cell-uint32 component displays a FieldNode of type `uint64` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellUint32",
            "superclass": {
              "name": "CellInt32",
              "module": "/src/typerenderer/cell-int32.js"
            },
            "tagName": "cell-uint32",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              },
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "CellInt32",
                  "module": "src/typerenderer/cell-int32.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CellUint32",
            "declaration": {
              "name": "CellUint32",
              "module": "src/typerenderer/cell-uint32.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cell-uint32",
            "declaration": {
              "name": "CellUint32",
              "module": "src/typerenderer/cell-uint32.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/cell-uint64.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`cell-uint64`\nThe cell-uint64 component displays a FieldNode of type `uint64` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery cell-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CellUint64",
            "superclass": {
              "name": "CellInt64",
              "module": "/src/typerenderer/cell-int64.js"
            },
            "tagName": "cell-uint64",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "CellInt64",
                  "module": "src/typerenderer/cell-int64.js"
                }
              },
              {
                "kind": "method",
                "name": "_formatCell",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "CellInt64",
                  "module": "src/typerenderer/cell-int64.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "CellInt64",
                  "module": "src/typerenderer/cell-int64.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CellUint64",
            "declaration": {
              "name": "CellUint64",
              "module": "src/typerenderer/cell-uint64.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cell-uint64",
            "declaration": {
              "name": "CellUint64",
              "module": "src/typerenderer/cell-uint64.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-bool.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-bool` is a `celledit` context renderer.\n\nIt uses furo-ui5-checkbox-input as the renderer",
            "name": "CelleditBool",
            "superclass": {
              "name": "FuroUi5CheckboxInput",
              "module": "/src/furo-ui5-checkbox-input.js"
            },
            "summary": "celledit renderer for bool",
            "tagName": "celledit-bool",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CelleditBool",
            "declaration": {
              "name": "CelleditBool",
              "module": "src/typerenderer/celledit-bool.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "celledit-bool",
            "declaration": {
              "name": "CelleditBool",
              "module": "src/typerenderer/celledit-bool.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-double.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-double` is a `celledit` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "CelleditDouble",
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "summary": "celledit renderer for double",
            "tagName": "celledit-double",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CelleditDouble",
            "declaration": {
              "name": "CelleditDouble",
              "module": "src/typerenderer/celledit-double.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "celledit-double",
            "declaration": {
              "name": "CelleditDouble",
              "module": "src/typerenderer/celledit-double.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-float.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-float` is a `celledit` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "CelleditFloat",
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "summary": "celledit renderer for float",
            "tagName": "celledit-float",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CelleditFloat",
            "declaration": {
              "name": "CelleditFloat",
              "module": "src/typerenderer/celledit-float.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "celledit-float",
            "declaration": {
              "name": "CelleditFloat",
              "module": "src/typerenderer/celledit-float.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-furo-fat-bool.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-furo-fat-bool` is a `celledit` context renderer.\n\nIt uses furo-ui5-checkbox-input as the renderer",
            "name": "CelleditFuroFatBool",
            "superclass": {
              "name": "CelleditBool",
              "module": "/src/typerenderer/celledit-bool.js"
            },
            "summary": "celledit renderer for bool",
            "tagName": "celledit-furo-fat-bool",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-furo-fat-bool",
            "declaration": {
              "name": "CelleditFuroFatBool",
              "module": "src/typerenderer/celledit-furo-fat-bool.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-furo-fat-double.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-furo-fat-double` is a `celledit` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "CelleditFuroFatDouble",
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "summary": "celledit renderer for furo.fat.Double",
            "tagName": "celledit-furo-fat-double",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-furo-fat-double",
            "declaration": {
              "name": "CelleditFuroFatDouble",
              "module": "src/typerenderer/celledit-furo-fat-double.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-furo-fat-float.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-furo-fat-float` is a `celledit` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "CelleditFuroFatFloat",
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "summary": "celledit renderer for furo.fat.Float",
            "tagName": "celledit-furo-fat-float",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-furo-fat-float",
            "declaration": {
              "name": "CelleditFuroFatFloat",
              "module": "src/typerenderer/celledit-furo-fat-float.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-furo-fat-int32.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-furo-fat-int32` is a `celledit` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "CelleditFuroFatInt32",
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "summary": "celledit renderer for furo.fat.Int32",
            "tagName": "celledit-furo-fat-int32",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CelleditFuroFatInt32",
            "declaration": {
              "name": "CelleditFuroFatInt32",
              "module": "src/typerenderer/celledit-furo-fat-int32.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "celledit-furo-fat-int32",
            "declaration": {
              "name": "CelleditFuroFatInt32",
              "module": "src/typerenderer/celledit-furo-fat-int32.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-furo-fat-int64.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-furo-fat-int64` is a `celledit` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "CelleditFuroFatInt64",
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "summary": "celledit renderer for furo.fat.Int64",
            "tagName": "celledit-furo-fat-int64",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CelleditFuroFatInt64",
            "declaration": {
              "name": "CelleditFuroFatInt64",
              "module": "src/typerenderer/celledit-furo-fat-int64.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "celledit-furo-fat-int64",
            "declaration": {
              "name": "CelleditFuroFatInt64",
              "module": "src/typerenderer/celledit-furo-fat-int64.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-furo-fat-string.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "CelleditFuroFatString",
            "superclass": {
              "name": "CelleditString",
              "module": "/src/typerenderer/celledit-string.js"
            },
            "tagName": "celledit-furo-fat-string",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-furo-fat-string",
            "declaration": {
              "name": "CelleditFuroFatString",
              "module": "src/typerenderer/celledit-furo-fat-string.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-furo-fat-uint32.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-furo-fat-uint32` is a `celledit` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "CelleditFuroFatUint32",
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "summary": "celledit renderer for furo.fat.Uint32",
            "tagName": "celledit-furo-fat-uint32",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-furo-fat-uint32",
            "declaration": {
              "name": "CelleditFuroFatUint32",
              "module": "src/typerenderer/celledit-furo-fat-uint32.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-furo-fat-uint64.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-furo-fat-uint64` is a `celledit` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "CelleditFuroFatUint64",
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "summary": "celledit renderer for furo.fat.Uint64",
            "tagName": "celledit-furo-fat-uint64",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-furo-fat-uint64",
            "declaration": {
              "name": "CelleditFuroFatUint64",
              "module": "src/typerenderer/celledit-furo-fat-uint64.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-furo-integerproperty.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-furo-integerproperty` is a `celledit` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "CelleditFuroIntegerproperty",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode"
                  }
                ]
              }
            ],
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "summary": "celledit renderer for furo.Integerproperty",
            "tagName": "celledit-furo-integerproperty",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-furo-integerproperty",
            "declaration": {
              "name": "CelleditFuroIntegerproperty",
              "module": "src/typerenderer/celledit-furo-integerproperty.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-furo-link.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-furo-link`\nThe celledit-furo-link component displays a FieldNode of type `furo.Link` in read only mode.\n\nEvery celledit-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CelleditFuroLink",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "celledit-furo-link",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-furo-link",
            "declaration": {
              "name": "CelleditFuroLink",
              "module": "src/typerenderer/celledit-furo-link.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-furo-numberproperty.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-furo-numberproperty` is a `celledit` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "CelleditFuroNumberproperty",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode"
                  }
                ]
              }
            ],
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "summary": "celledit renderer for furo.INumberproperty",
            "tagName": "celledit-furo-numberproperty",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-furo-numberproperty",
            "declaration": {
              "name": "CelleditFuroNumberproperty",
              "module": "src/typerenderer/celledit-furo-numberproperty.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-furo-property-repeated.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-furo-property-repeats`\nThe celledit-furo-property-repeats component displays a FieldNode of type `furo.Property` in read only mode.\n\nEvery celledit-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CelleditFuroPropertyRepeated",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component\nthe celledit-furo-property-repeats is a simple proxy element to show\nthe initial state if no data is available."
              },
              {
                "kind": "method",
                "name": "_updateFieldList"
              },
              {
                "kind": "field",
                "name": "elementList",
                "type": {
                  "text": "array"
                },
                "default": "[]"
              },
              {
                "kind": "field",
                "name": "_typeResolved",
                "type": {
                  "text": "boolean"
                },
                "default": "false"
              },
              {
                "kind": "field",
                "name": "noDataText",
                "privacy": "public",
                "description": "Defines the empty state display\nWith a furo.Property type, the effective type is only known when the data is transmitted.\nDefault: ''",
                "attribute": "noDataText"
              }
            ],
            "attributes": [
              {
                "name": "noDataText",
                "description": "Defines the empty state display\nWith a furo.Property type, the effective type is only known when the data is transmitted.\nDefault: ''",
                "fieldName": "noDataText"
              }
            ],
            "mixins": [
              {
                "name": "FBP",
                "package": "@furo/fbp/src/fbp.js"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "celledit-furo-property-repeated",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CelleditFuroPropertyRepeated",
            "declaration": {
              "name": "CelleditFuroPropertyRepeated",
              "module": "src/typerenderer/celledit-furo-property-repeated.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "celledit-furo-property-repeated",
            "declaration": {
              "name": "CelleditFuroPropertyRepeated",
              "module": "src/typerenderer/celledit-furo-property-repeated.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-furo-property.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-furo-property`\nThe celledit-furo-property component displays a FieldNode of type `furo.Property` in read only mode.\n\nEvery celledit-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CelleditFuroProperty",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component\nthe celledit-furo-property is a simple proxy element to show\nthe initial state if no data is available."
              },
              {
                "kind": "method",
                "name": "_waitForType",
                "parameters": [
                  {
                    "name": "field"
                  }
                ],
                "description": "furo.Property wait for @type information\nregisters event listener and creates the component as soon as the @type information is available.",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_createConcreteType",
                "description": "Creates the concrete type specific renderer",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_warning"
              },
              {
                "kind": "field",
                "name": "noDataText",
                "type": {
                  "text": "string"
                },
                "default": "''",
                "privacy": "public",
                "description": "Defines the empty state display\nWith a furo.Property type, the effective type is only known when the data is transmitted.\nDefault: ''",
                "attribute": "noDataText"
              },
              {
                "kind": "field",
                "name": "_typeResolved",
                "type": {
                  "text": "boolean"
                },
                "default": "false"
              }
            ],
            "attributes": [
              {
                "name": "noDataText",
                "description": "Defines the empty state display\nWith a furo.Property type, the effective type is only known when the data is transmitted.\nDefault: ''",
                "fieldName": "noDataText"
              }
            ],
            "mixins": [
              {
                "name": "FBP",
                "package": "@furo/fbp/src/fbp.js"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "celledit-furo-property",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CelleditFuroProperty",
            "declaration": {
              "name": "CelleditFuroProperty",
              "module": "src/typerenderer/celledit-furo-property.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "celledit-furo-property",
            "declaration": {
              "name": "CelleditFuroProperty",
              "module": "src/typerenderer/celledit-furo-property.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-furo-reference.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "CelleditFuroReference",
            "superclass": {
              "name": "FuroUi5ReferenceSearch",
              "module": "/src/furo-ui5-reference-search.js"
            },
            "tagName": "celledit-furo-reference",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-furo-reference",
            "declaration": {
              "name": "CelleditFuroReference",
              "module": "src/typerenderer/celledit-furo-reference.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-furo-stringoptionproperty.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "CelleditFuroStringoptionproperty",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode"
                  }
                ]
              }
            ],
            "superclass": {
              "name": "FuroUi5Select",
              "module": "/src/furo-ui5-select.js"
            },
            "tagName": "celledit-furo-stringoptionproperty",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-furo-stringoptionproperty",
            "declaration": {
              "name": "CelleditFuroStringoptionproperty",
              "module": "src/typerenderer/celledit-furo-stringoptionproperty.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-furo-stringproperty.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "CelleditFuroStringproperty",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode"
                  }
                ]
              }
            ],
            "superclass": {
              "name": "CelleditString",
              "module": "/src/typerenderer/celledit-string.js"
            },
            "tagName": "celledit-furo-stringproperty",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-furo-stringproperty",
            "declaration": {
              "name": "CelleditFuroStringproperty",
              "module": "src/typerenderer/celledit-furo-stringproperty.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-furo-type-date.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "CelleditFuroTypeDate",
            "superclass": {
              "name": "FuroUi5DatePicker",
              "module": "/src/furo-ui5-date-picker.js"
            },
            "tagName": "celledit-furo-type-date",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-furo-type-date",
            "declaration": {
              "name": "CelleditFuroTypeDate",
              "module": "src/typerenderer/celledit-furo-type-date.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-furo-type-money.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "CelleditFuroTypeMoney",
            "superclass": {
              "name": "FuroUi5MoneyInput",
              "module": "/src/furo-ui5-money-input.js"
            },
            "tagName": "celledit-furo-type-money",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-furo-type-money",
            "declaration": {
              "name": "CelleditFuroTypeMoney",
              "module": "src/typerenderer/celledit-furo-type-money.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-google-protobuf-any.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-google-protobuf-any`\nThe celledit-google-protobuf-any component is a wrapper displays of type `google.protobuf.Any` in read only mode.\n\nEvery celledit-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "CelleditGoolgeProtobufAny",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component\nthe celledit-google-protobuf-any is a simple proxy element to show\nthe initial state if no data is available."
              },
              {
                "kind": "method",
                "name": "_waitForType",
                "parameters": [
                  {
                    "name": "field",
                    "description": "of type google.protobuf.Any",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "google.protobuf.Any wait for @type information\nregisters event listener and creates the component as soon as the @type information is available.",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_createContreteType",
                "description": "Creates the concrete type specific renderer",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_warning",
                "description": "warns if diynamic component is not imported",
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_typeResolved",
                "type": {
                  "text": "boolean"
                },
                "default": "false"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "celledit-google-protobuf-any",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-google-protobuf-any",
            "declaration": {
              "name": "CelleditGoolgeProtobufAny",
              "module": "src/typerenderer/celledit-google-protobuf-any.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-google-protobuf-boolvalue.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-google-protobuf-boolvalue` is a `celledit` context renderer.\n\nIt uses furo-ui5-checkbox-input as the renderer",
            "name": "CelleditGoogleProtobufBoolvalue",
            "superclass": {
              "name": "CelleditBool",
              "module": "/src/typerenderer/celledit-bool.js"
            },
            "summary": "celledit renderer for bool",
            "tagName": "celledit-google-protobuf-boolvalue",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-google-protobuf-boolvalue",
            "declaration": {
              "name": "CelleditGoogleProtobufBoolvalue",
              "module": "src/typerenderer/celledit-google-protobuf-boolvalue.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-google-protobuf-doublevalue.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-google-protobuf-doublevalue` is a `celledit` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "CelleditGoogleProtobufDoublevalue",
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "summary": "celledit renderer for google.protobuf.Double",
            "tagName": "celledit-google-protobuf-doublevalue",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-google-protobuf-doublevalue",
            "declaration": {
              "name": "CelleditGoogleProtobufDoublevalue",
              "module": "src/typerenderer/celledit-google-protobuf-doublevalue.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-google-protobuf-floatvalue.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-google-protobuf-floatvalue` is a `celledit` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "CelleditGoolgeProtobufFloatvalue",
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "summary": "celledit renderer for google.protobuf.Float",
            "tagName": "celledit-google-protobuf-floatvalue",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-google-protobuf-floatvalue",
            "declaration": {
              "name": "CelleditGoolgeProtobufFloatvalue",
              "module": "src/typerenderer/celledit-google-protobuf-floatvalue.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-google-protobuf-int32value.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-google-protobuf-int32value` is a `celledit` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "CelleditGoolgeProtobufIn32value",
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "summary": "celledit renderer for google.protobuf.Int32value",
            "tagName": "celledit-google-protobuf-int32value",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-google-protobuf-int32value",
            "declaration": {
              "name": "CelleditGoolgeProtobufIn32value",
              "module": "src/typerenderer/celledit-google-protobuf-int32value.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-google-protobuf-int64value.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-google-protobuf-int64value` is a `celledit` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "CelleditGoolgeProtobufIn64value",
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "summary": "celledit renderer for google.protobuf.Int64",
            "tagName": "celledit-google-protobuf-int64value",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-google-protobuf-int64value",
            "declaration": {
              "name": "CelleditGoolgeProtobufIn64value",
              "module": "src/typerenderer/celledit-google-protobuf-int64value.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-google-protobuf-stringvalue.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "CelleditGoogleProtobufStringvalue",
            "superclass": {
              "name": "CelleditString",
              "module": "/src/typerenderer/celledit-string.js"
            },
            "tagName": "celledit-google-protobuf-stringvalue",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-google-protobuf-stringvalue",
            "declaration": {
              "name": "CelleditGoogleProtobufStringvalue",
              "module": "src/typerenderer/celledit-google-protobuf-stringvalue.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-google-protobuf-timestamp.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "CelleditGoogleProtobufTimestamp",
            "superclass": {
              "name": "FuroUi5DateTimePicker",
              "module": "/src/furo-ui5-date-time-picker.js"
            },
            "tagName": "celledit-google-protobuf-timestamp",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-google-protobuf-timestamp",
            "declaration": {
              "name": "CelleditGoogleProtobufTimestamp",
              "module": "src/typerenderer/celledit-google-protobuf-timestamp.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-google-protobuf-uint32value.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-google-protobuf-uint32value` is a `celledit` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "CelleditGoolgeProtobufUin32value",
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "summary": "celledit renderer for google.protobuf.Uint32value",
            "tagName": "celledit-google-protobuf-uint32value",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-google-protobuf-uint32value",
            "declaration": {
              "name": "CelleditGoolgeProtobufUin32value",
              "module": "src/typerenderer/celledit-google-protobuf-uint32value.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-google-protobuf-uint64value.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-google-protobuf-uint64value` is a `celledit` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "CelleditGoogleProtobufUint64value",
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "summary": "celledit renderer for google.protobuf.Uint64value",
            "tagName": "celledit-google-protobuf-uint64value",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-google-protobuf-uint64value",
            "declaration": {
              "name": "CelleditGoogleProtobufUint64value",
              "module": "src/typerenderer/celledit-google-protobuf-uint64value.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-google-type-date.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-google-type-date` is a `celledit` context renderer.\n\nIt uses furo-ui5-date-picker as the renderer",
            "name": "CelleditGoogleTypeDate",
            "superclass": {
              "name": "FuroUi5DatePicker",
              "module": "/src/furo-ui5-date-picker.js"
            },
            "summary": "celledit renderer for google.type.Date",
            "tagName": "celledit-google-type-date",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-google-type-date",
            "declaration": {
              "name": "CelleditGoogleTypeDate",
              "module": "src/typerenderer/celledit-google-type-date.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-google-type-money.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-google-type-money` is a `celledit` context renderer.\n\nIt uses furo-ui5-money-input as the renderer",
            "name": "CelleditGoogleTypeMoney",
            "superclass": {
              "name": "FuroUi5MoneyInput",
              "module": "/src/furo-ui5-money-input.js"
            },
            "summary": "celledit renderer for google.type.Money",
            "tagName": "celledit-google-type-money",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-google-type-money",
            "declaration": {
              "name": "CelleditGoogleTypeMoney",
              "module": "src/typerenderer/celledit-google-type-money.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-google-type-timeofday.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`celledit-google-type-timeofday` is a `celledit` context renderer.\n\nIt uses furo-ui5-time-picker as the renderer",
            "name": "CelleditGoogleTypeTimeofday",
            "superclass": {
              "name": "FuroUi5TimePicker",
              "module": "/src/furo-ui5-time-picker.js"
            },
            "summary": "celledit renderer for google.type.TimeOfDay",
            "tagName": "celledit-google-type-timeofday",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "celledit-google-type-timeofday",
            "declaration": {
              "name": "CelleditGoogleTypeTimeofday",
              "module": "src/typerenderer/celledit-google-type-timeofday.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-int32.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "CelleditInt32",
            "superclass": {
              "name": "FuroUi5NumberInput",
              "module": "/src/furo-ui5-number-input.js"
            },
            "tagName": "celledit-int32",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CelleditInt32",
            "declaration": {
              "name": "CelleditInt32",
              "module": "src/typerenderer/celledit-int32.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "celledit-int32",
            "declaration": {
              "name": "CelleditInt32",
              "module": "src/typerenderer/celledit-int32.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-int64.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "CelleditInt64",
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "tagName": "celledit-int64",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CelleditInt64",
            "declaration": {
              "name": "CelleditInt64",
              "module": "src/typerenderer/celledit-int64.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "celledit-int64",
            "declaration": {
              "name": "CelleditInt64",
              "module": "src/typerenderer/celledit-int64.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-string.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "CelleditString",
            "superclass": {
              "name": "FuroUi5TextInput",
              "module": "/src/furo-ui5-text-input.js"
            },
            "tagName": "celledit-string",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CelleditString",
            "declaration": {
              "name": "CelleditString",
              "module": "src/typerenderer/celledit-string.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "celledit-string",
            "declaration": {
              "name": "CelleditString",
              "module": "src/typerenderer/celledit-string.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-uint32.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "CelleditUint32",
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "tagName": "celledit-uint32",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CelleditUint32",
            "declaration": {
              "name": "CelleditUint32",
              "module": "src/typerenderer/celledit-uint32.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "celledit-uint32",
            "declaration": {
              "name": "CelleditUint32",
              "module": "src/typerenderer/celledit-uint32.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/celledit-uint64.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "CelleditUint64",
            "superclass": {
              "name": "CelleditInt32",
              "module": "/src/typerenderer/celledit-int32.js"
            },
            "tagName": "celledit-uint64",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "CelleditUint64",
            "declaration": {
              "name": "CelleditUint64",
              "module": "src/typerenderer/celledit-uint64.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "celledit-uint64",
            "declaration": {
              "name": "CelleditUint64",
              "module": "src/typerenderer/celledit-uint64.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-bool.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-bool`\nThe display-bool component displays a FieldNode of type `bool` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayBool",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_getTemplate",
                "description": "Template logic",
                "return": {
                  "type": {
                    "text": "*"
                  }
                },
                "privacy": "private"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "display-bool",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayBool",
            "declaration": {
              "name": "DisplayBool",
              "module": "src/typerenderer/display-bool.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-bool",
            "declaration": {
              "name": "DisplayBool",
              "module": "src/typerenderer/display-bool.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-double.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-double`\nThe display-double component displays a FieldNode of type `double` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayDouble",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_formatDisplay"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "display-double",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayDouble",
            "declaration": {
              "name": "DisplayDouble",
              "module": "src/typerenderer/display-double.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-double",
            "declaration": {
              "name": "DisplayDouble",
              "module": "src/typerenderer/display-double.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-float.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-float`\nThe display-float component displays a FieldNode of type `float` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFloat",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_formatDisplay"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "display-float",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayFloat",
            "declaration": {
              "name": "DisplayFloat",
              "module": "src/typerenderer/display-float.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-float",
            "declaration": {
              "name": "DisplayFloat",
              "module": "src/typerenderer/display-float.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-fat-bool.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-furo-fat-bool`\nThe display-furo-fat-bool component displays a FieldNode of type `furo.fat.bool` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroFatBool",
            "members": [
              {
                "kind": "method",
                "name": "_getTemplate",
                "description": "Template logic",
                "return": {
                  "type": {
                    "text": "*"
                  }
                },
                "privacy": "private",
                "inheritedFrom": {
                  "name": "DisplayBool",
                  "module": "src/typerenderer/display-bool.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayBool",
                  "module": "src/typerenderer/display-bool.js"
                }
              }
            ],
            "superclass": {
              "name": "DisplayBool",
              "module": "/src/typerenderer/display-bool.js"
            },
            "tagName": "display-furo-fat-bool",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-furo-fat-bool",
            "declaration": {
              "name": "DisplayFuroFatBool",
              "module": "src/typerenderer/display-furo-fat-bool.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-fat-double.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-furo-fat-double`\nThe display-furo-fat-double component displays a FieldNode of type `furo.fat.Double` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroFatDouble",
            "members": [
              {
                "kind": "method",
                "name": "_formatDisplay",
                "inheritedFrom": {
                  "name": "DisplayDouble",
                  "module": "src/typerenderer/display-double.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayDouble",
                  "module": "src/typerenderer/display-double.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "DisplayDouble",
                  "module": "src/typerenderer/display-double.js"
                }
              }
            ],
            "superclass": {
              "name": "DisplayDouble",
              "module": "/src/typerenderer/display-double.js"
            },
            "tagName": "display-furo-fat-double",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-furo-fat-double",
            "declaration": {
              "name": "DisplayFuroFatDouble",
              "module": "src/typerenderer/display-furo-fat-double.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-fat-float.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-furo-fat-float`\nThe display-furo-fat-float component displays a FieldNode of type `furo.fat.Float` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroFatFloat",
            "members": [
              {
                "kind": "method",
                "name": "_formatDisplay",
                "inheritedFrom": {
                  "name": "DisplayFloat",
                  "module": "src/typerenderer/display-float.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayFloat",
                  "module": "src/typerenderer/display-float.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "DisplayFloat",
                  "module": "src/typerenderer/display-float.js"
                }
              }
            ],
            "superclass": {
              "name": "DisplayFloat",
              "module": "/src/typerenderer/display-float.js"
            },
            "tagName": "display-furo-fat-float",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-furo-fat-float",
            "declaration": {
              "name": "DisplayFuroFatFloat",
              "module": "src/typerenderer/display-furo-fat-float.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-fat-int32.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-int32`\nThe display-int32 component displays a FieldNode of type `furo.fat.Int32` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroFatInt32",
            "members": [
              {
                "kind": "method",
                "name": "_formatDisplay",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              }
            ],
            "superclass": {
              "name": "DisplayInt32",
              "module": "/src/typerenderer/display-int32.js"
            },
            "tagName": "display-furo-fat-int32",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayFuroFatInt32",
            "declaration": {
              "name": "DisplayFuroFatInt32",
              "module": "src/typerenderer/display-furo-fat-int32.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-furo-fat-int32",
            "declaration": {
              "name": "DisplayFuroFatInt32",
              "module": "src/typerenderer/display-furo-fat-int32.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-fat-int64.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-furo-fat-int64`\nThe display-furo-fat-int64 component displays a FieldNode of type `furo.fat.int64` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroFatInt64",
            "superclass": {
              "name": "DisplayFuroFatInt32",
              "module": "/src/typerenderer/display-furo-fat-int32.js"
            },
            "tagName": "display-furo-fat-int64",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "_formatDisplay",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayFuroFatInt64",
            "declaration": {
              "name": "DisplayFuroFatInt64",
              "module": "src/typerenderer/display-furo-fat-int64.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-furo-fat-int64",
            "declaration": {
              "name": "DisplayFuroFatInt64",
              "module": "src/typerenderer/display-furo-fat-int64.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-fat-string.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-furo-fat-string`\nThe display-furo-fat-string component displays a FieldNode of type `furo.fat.String` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroFatString",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_updateMeta"
              },
              {
                "kind": "method",
                "name": "_formatDisplay"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "display-furo-fat-string",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-furo-fat-string",
            "declaration": {
              "name": "DisplayFuroFatString",
              "module": "src/typerenderer/display-furo-fat-string.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-fat-uint32.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-furo-fat-uint32`\nThe display-furo-fat-uint32 component displays a FieldNode of type `furo.fat.Uint32` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroFatUint32",
            "superclass": {
              "name": "DisplayFuroFatInt32",
              "module": "/src/typerenderer/display-furo-fat-int32.js"
            },
            "tagName": "display-furo-fat-uint32",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "_formatDisplay",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-furo-fat-uint32",
            "declaration": {
              "name": "DisplayFuroFatUint32",
              "module": "src/typerenderer/display-furo-fat-uint32.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-fat-uint64.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-furo-fat-uint64`\nThe display-furo-fat-uint64 component displays a FieldNode of type `furo.fat.uint64` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroFatUint64",
            "superclass": {
              "name": "DisplayFuroFatInt64",
              "module": "/src/typerenderer/display-furo-fat-int64.js"
            },
            "tagName": "display-furo-fat-uint64",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "_formatDisplay",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-furo-fat-uint64",
            "declaration": {
              "name": "DisplayFuroFatUint64",
              "module": "src/typerenderer/display-furo-fat-uint64.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-integerproperty.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-furo-integerproperty`\nThe display-furo-integerproperty component displays a FieldNode of type `furo.Integerproperty` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroIntegerproperty",
            "members": [
              {
                "kind": "method",
                "name": "_formatDisplay",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              }
            ],
            "superclass": {
              "name": "DisplayInt32",
              "module": "/src/typerenderer/display-int32.js"
            },
            "tagName": "display-furo-integerproperty",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayFuroIntegerproperty",
            "declaration": {
              "name": "DisplayFuroIntegerproperty",
              "module": "src/typerenderer/display-furo-integerproperty.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-furo-integerproperty",
            "declaration": {
              "name": "DisplayFuroIntegerproperty",
              "module": "src/typerenderer/display-furo-integerproperty.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-link.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-furo-link`\nThe display-furo-link component displays a FieldNode of type `furo.Link` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroLink",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "display-furo-link",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-furo-link",
            "declaration": {
              "name": "DisplayFuroLink",
              "module": "src/typerenderer/display-furo-link.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-numberproperty.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-furo-numberproperty`\nThe display-furo-numberrproperty component displays a FieldNode of type `furo.Numberproperty` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroNumberproperty",
            "superclass": {
              "name": "DisplayFuroIntegerproperty",
              "module": "/src/typerenderer/display-furo-integerproperty.js"
            },
            "tagName": "display-furo-numberproperty",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "_formatDisplay",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayFuroNumberproperty",
            "declaration": {
              "name": "DisplayFuroNumberproperty",
              "module": "src/typerenderer/display-furo-numberproperty.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-furo-numberproperty",
            "declaration": {
              "name": "DisplayFuroNumberproperty",
              "module": "src/typerenderer/display-furo-numberproperty.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-property-repeated.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-furo-property-repeats`\nThe display-furo-property-repeats component displays a FieldNode of type `furo.Property` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroPropertyRepeated",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component\nthe display-furo-property-repeats is a simple proxy element to show\nthe initial state if no data is available."
              },
              {
                "kind": "method",
                "name": "_updateFieldList"
              },
              {
                "kind": "field",
                "name": "elementList",
                "type": {
                  "text": "array"
                },
                "default": "[]"
              },
              {
                "kind": "field",
                "name": "_typeResolved",
                "type": {
                  "text": "boolean"
                },
                "default": "false"
              },
              {
                "kind": "field",
                "name": "noDataText",
                "privacy": "public",
                "description": "Defines the empty state display\nWith a furo.Property type, the effective type is only known when the data is transmitted.\nDefault: ''",
                "attribute": "noDataText"
              }
            ],
            "attributes": [
              {
                "name": "noDataText",
                "description": "Defines the empty state display\nWith a furo.Property type, the effective type is only known when the data is transmitted.\nDefault: ''",
                "fieldName": "noDataText"
              }
            ],
            "mixins": [
              {
                "name": "FBP",
                "package": "@furo/fbp/src/fbp.js"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "display-furo-property-repeated",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayFuroPropertyRepeated",
            "declaration": {
              "name": "DisplayFuroPropertyRepeated",
              "module": "src/typerenderer/display-furo-property-repeated.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-furo-property-repeated",
            "declaration": {
              "name": "DisplayFuroPropertyRepeated",
              "module": "src/typerenderer/display-furo-property-repeated.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-property-repeats-labeled.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-furo-property-repeats-labeled`\nThe display-furo-property-repeats-labeled component displays a RepeaterNode of type `furo.Property` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroPropertyRepeatsLabeled",
            "members": [
              {
                "kind": "method",
                "name": "_updateFieldList",
                "description": "Overloaded",
                "privacy": "private",
                "inheritedFrom": {
                  "name": "DisplayFuroPropertyRepeated",
                  "module": "src/typerenderer/display-furo-property-repeated.js"
                }
              },
              {
                "kind": "method",
                "name": "_getPropertyLabel",
                "parameters": [
                  {
                    "name": "item"
                  }
                ],
                "description": "resolve label for furo.Property repeated item",
                "return": {
                  "type": {
                    "text": "string"
                  }
                },
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component\nthe display-furo-property-repeats is a simple proxy element to show\nthe initial state if no data is available.",
                "inheritedFrom": {
                  "name": "DisplayFuroPropertyRepeated",
                  "module": "src/typerenderer/display-furo-property-repeated.js"
                }
              },
              {
                "kind": "field",
                "name": "elementList",
                "type": {
                  "text": "array"
                },
                "default": "[]",
                "inheritedFrom": {
                  "name": "DisplayFuroPropertyRepeated",
                  "module": "src/typerenderer/display-furo-property-repeated.js"
                }
              },
              {
                "kind": "field",
                "name": "_typeResolved",
                "type": {
                  "text": "boolean"
                },
                "default": "false",
                "inheritedFrom": {
                  "name": "DisplayFuroPropertyRepeated",
                  "module": "src/typerenderer/display-furo-property-repeated.js"
                }
              },
              {
                "kind": "field",
                "name": "noDataText",
                "privacy": "public",
                "description": "Defines the empty state display\nWith a furo.Property type, the effective type is only known when the data is transmitted.\nDefault: ''",
                "attribute": "noDataText",
                "inheritedFrom": {
                  "name": "DisplayFuroPropertyRepeated",
                  "module": "src/typerenderer/display-furo-property-repeated.js"
                }
              }
            ],
            "superclass": {
              "name": "DisplayFuroPropertyRepeated",
              "module": "/src/typerenderer/display-furo-property-repeated.js"
            },
            "tagName": "display-furo-property-repeats-labeled",
            "customElement": true,
            "attributes": [
              {
                "name": "noDataText",
                "description": "Defines the empty state display\nWith a furo.Property type, the effective type is only known when the data is transmitted.\nDefault: ''",
                "fieldName": "noDataText",
                "inheritedFrom": {
                  "name": "DisplayFuroPropertyRepeated",
                  "module": "src/typerenderer/display-furo-property-repeated.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayFuroPropertyRepeatsLabeled",
            "declaration": {
              "name": "DisplayFuroPropertyRepeatsLabeled",
              "module": "src/typerenderer/display-furo-property-repeats-labeled.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-furo-property-repeats-labeled",
            "declaration": {
              "name": "DisplayFuroPropertyRepeatsLabeled",
              "module": "src/typerenderer/display-furo-property-repeats-labeled.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-property.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-furo-property`\nThe display-furo-property component displays a FieldNode of type `furo.Property` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroProperty",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component\nthe display-furo-property is a simple proxy element to show\nthe initial state if no data is available."
              },
              {
                "kind": "method",
                "name": "_waitForType",
                "parameters": [
                  {
                    "name": "field"
                  }
                ],
                "description": "furo.Property wait for @type information\nregisters event listener and creates the component as soon as the @type information is available.",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_createConcreteType",
                "description": "Creates the concrete type specific renderer",
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "noDataText",
                "type": {
                  "text": "string"
                },
                "default": "''",
                "privacy": "public",
                "description": "Defines the empty state display\nWith a furo.Property type, the effective type is only known when the data is transmitted.\nDefault: ''",
                "attribute": "noDataText"
              },
              {
                "kind": "field",
                "name": "_typeResolved",
                "type": {
                  "text": "boolean"
                },
                "default": "false"
              }
            ],
            "attributes": [
              {
                "name": "noDataText",
                "description": "Defines the empty state display\nWith a furo.Property type, the effective type is only known when the data is transmitted.\nDefault: ''",
                "fieldName": "noDataText"
              }
            ],
            "mixins": [
              {
                "name": "FBP",
                "package": "@furo/fbp/src/fbp.js"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "display-furo-property",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayFuroProperty",
            "declaration": {
              "name": "DisplayFuroProperty",
              "module": "src/typerenderer/display-furo-property.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-furo-property",
            "declaration": {
              "name": "DisplayFuroProperty",
              "module": "src/typerenderer/display-furo-property.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-reference.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-furo-reference`\nThe display-furo-reference component displays a FieldNode of type `furo.Reference` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroReference",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_formatDisplay",
                "description": "Template logic",
                "return": {
                  "type": {
                    "text": "*"
                  }
                },
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "display-furo-reference",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-furo-reference",
            "declaration": {
              "name": "DisplayFuroReference",
              "module": "src/typerenderer/display-furo-reference.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-stringoptionproperty.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-furo-stringoptionproperty`\nThe display-furo-numberrproperty component displays a FieldNode of type `furo.Stringoptionproperty` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroStringoptionproperty",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayString",
                  "module": "src/typerenderer/display-string.js"
                }
              }
            ],
            "superclass": {
              "name": "DisplayFuroStringproperty",
              "module": "/src/typerenderer/display-furo-stringproperty.js"
            },
            "tagName": "display-furo-stringoptionproperty",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayFuroStringoptionproperty",
            "declaration": {
              "name": "DisplayFuroStringoptionproperty",
              "module": "src/typerenderer/display-furo-stringoptionproperty.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-furo-stringoptionproperty",
            "declaration": {
              "name": "DisplayFuroStringoptionproperty",
              "module": "src/typerenderer/display-furo-stringoptionproperty.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-stringproperty.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-furo-stringproperty`\nThe display-furo-stringproperty component displays a FieldNode of type `furo.Stringproperty` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroStringproperty",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayString",
                  "module": "src/typerenderer/display-string.js"
                }
              }
            ],
            "superclass": {
              "name": "DisplayString",
              "module": "/src/typerenderer/display-string.js"
            },
            "tagName": "display-furo-stringproperty",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayFuroStringproperty",
            "declaration": {
              "name": "DisplayFuroStringproperty",
              "module": "src/typerenderer/display-furo-stringproperty.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-furo-stringproperty",
            "declaration": {
              "name": "DisplayFuroStringproperty",
              "module": "src/typerenderer/display-furo-stringproperty.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-type-date.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-furo-type-date`\nThe display-furo-type-date component displays a FieldNode of type `furo.type.Date` in read only mode.\n\nif the field `display_name` is set, the component will use that value for the display.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroTypeDate",
            "members": [
              {
                "kind": "method",
                "name": "_formatDisplay",
                "inheritedFrom": {
                  "name": "DisplayGoogleTypeDate",
                  "module": "src/typerenderer/display-google-type-date.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayGoogleTypeDate",
                  "module": "src/typerenderer/display-google-type-date.js"
                }
              },
              {
                "kind": "method",
                "name": "_convertDateToString",
                "static": true,
                "parameters": [
                  {
                    "name": "fieldNode"
                  },
                  {
                    "name": "date"
                  }
                ],
                "description": "convert date object to String according to Intl DateTimeFormat\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\nExample output: locale de-CH 31.12.2021",
                "return": {
                  "type": {
                    "text": "string"
                  }
                },
                "privacy": "private",
                "inheritedFrom": {
                  "name": "DisplayGoogleTypeDate",
                  "module": "src/typerenderer/display-google-type-date.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "DisplayGoogleTypeDate",
                  "module": "src/typerenderer/display-google-type-date.js"
                }
              }
            ],
            "superclass": {
              "name": "DisplayGoogleTypeDate",
              "module": "/src/typerenderer/display-google-type-date.js"
            },
            "tagName": "display-furo-type-date",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-furo-type-date",
            "declaration": {
              "name": "DisplayFuroTypeDate",
              "module": "src/typerenderer/display-furo-type-date.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-furo-type-money.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-furo-type-money`\nThe display-furo-type-money component displays a FieldNode of type `furo.type.Money` in read only mode.\n\nif the field `display_name` is set, the component will use that value for the display.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayFuroTypeMoney",
            "members": [
              {
                "kind": "method",
                "name": "_formatDisplay",
                "inheritedFrom": {
                  "name": "DisplayGoogleTypeMoney",
                  "module": "src/typerenderer/display-google-type-money.js"
                }
              },
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayGoogleTypeMoney",
                  "module": "src/typerenderer/display-google-type-money.js"
                }
              },
              {
                "kind": "method",
                "name": "_convertTypeToNumber",
                "static": true,
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "return": {
                  "type": {
                    "text": "number"
                  }
                },
                "privacy": "private",
                "inheritedFrom": {
                  "name": "DisplayGoogleTypeMoney",
                  "module": "src/typerenderer/display-google-type-money.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "DisplayGoogleTypeMoney",
                  "module": "src/typerenderer/display-google-type-money.js"
                }
              },
              {
                "kind": "field",
                "name": "_valueObject",
                "type": {
                  "text": "{amount: number}"
                },
                "privacy": "private",
                "default": "{ amount: Number.NaN }",
                "inheritedFrom": {
                  "name": "DisplayGoogleTypeMoney",
                  "module": "src/typerenderer/display-google-type-money.js"
                }
              }
            ],
            "superclass": {
              "name": "DisplayGoogleTypeMoney",
              "module": "/src/typerenderer/display-google-type-money.js"
            },
            "tagName": "display-furo-type-money",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-furo-type-money",
            "declaration": {
              "name": "DisplayFuroTypeMoney",
              "module": "src/typerenderer/display-furo-type-money.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-google-protobuf-any.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-google-protobuf-any`\nThe display-google-protobuf-any component is a wrapper displays of type `google.protobuf.Any` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayGoolgeProtobufAny",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component\nthe display-google-protobuf-any is a simple proxy element to show\nthe initial state if no data is available."
              },
              {
                "kind": "method",
                "name": "_waitForType",
                "parameters": [
                  {
                    "name": "field"
                  }
                ],
                "description": "google.protobuf.Any wait for @type information\nregisters event listener and creates the component as soon as the @type information is available.",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_createContreteType",
                "description": "Creates the concrete type specific renderer",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_warning",
                "description": "warns if diynamic component is not imported",
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_typeResolved",
                "type": {
                  "text": "boolean"
                },
                "default": "false"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "display-google-protobuf-any",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-google-protobuf-any",
            "declaration": {
              "name": "DisplayGoolgeProtobufAny",
              "module": "src/typerenderer/display-google-protobuf-any.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-google-protobuf-boolvalue.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-google-protobuf-boolvalue`\nThe display-google-protobuf-boolvalue component displays a FieldNode of type `google.protobuf.BoolValue` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayGoolgeProtobufBoolvalue",
            "superclass": {
              "name": "DisplayBool",
              "module": "/src/typerenderer/display-bool.js"
            },
            "tagName": "display-google-protobuf-boolvalue",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayBool",
                  "module": "src/typerenderer/display-bool.js"
                }
              },
              {
                "kind": "method",
                "name": "_getTemplate",
                "description": "Template logic",
                "return": {
                  "type": {
                    "text": "*"
                  }
                },
                "privacy": "private",
                "inheritedFrom": {
                  "name": "DisplayBool",
                  "module": "src/typerenderer/display-bool.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-google-protobuf-boolvalue",
            "declaration": {
              "name": "DisplayGoolgeProtobufBoolvalue",
              "module": "src/typerenderer/display-google-protobuf-boolvalue.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-google-protobuf-doublevalue.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-double`\nThe display-double component displays a FieldNode of type `google.protobuf.DoubleValue` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayGoogleProtobufDoublevalue",
            "superclass": {
              "name": "DisplayDouble",
              "module": "/src/typerenderer/display-double.js"
            },
            "tagName": "display-google-protobuf-doublevalue",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayDouble",
                  "module": "src/typerenderer/display-double.js"
                }
              },
              {
                "kind": "method",
                "name": "_formatDisplay",
                "inheritedFrom": {
                  "name": "DisplayDouble",
                  "module": "src/typerenderer/display-double.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "DisplayDouble",
                  "module": "src/typerenderer/display-double.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-google-protobuf-doublevalue",
            "declaration": {
              "name": "DisplayGoogleProtobufDoublevalue",
              "module": "src/typerenderer/display-google-protobuf-doublevalue.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-google-protobuf-floatvalue.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-google-protobuf-floatvalue`\nThe display-google-protobuf-floatvalue component displays a FieldNode of type `google.protobuf.FloatValue` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayGoolgeProtobufFloatvalue",
            "superclass": {
              "name": "DisplayFloat",
              "module": "/src/typerenderer/display-float.js"
            },
            "tagName": "display-google-protobuf-floatvalue",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayFloat",
                  "module": "src/typerenderer/display-float.js"
                }
              },
              {
                "kind": "method",
                "name": "_formatDisplay",
                "inheritedFrom": {
                  "name": "DisplayFloat",
                  "module": "src/typerenderer/display-float.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "DisplayFloat",
                  "module": "src/typerenderer/display-float.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-google-protobuf-floatvalue",
            "declaration": {
              "name": "DisplayGoolgeProtobufFloatvalue",
              "module": "src/typerenderer/display-google-protobuf-floatvalue.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-google-protobuf-int32value.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-google-protobuf-boolvalue`\nThe display-google-protobuf-boolvalue component displays a FieldNode of type `google.protobuf.BoolValue` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayGoolgeProtobufIn32value",
            "superclass": {
              "name": "DisplayInt32",
              "module": "/src/typerenderer/display-int32.js"
            },
            "tagName": "display-google-protobuf-int32value",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              },
              {
                "kind": "method",
                "name": "_formatDisplay",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-google-protobuf-int32value",
            "declaration": {
              "name": "DisplayGoolgeProtobufIn32value",
              "module": "src/typerenderer/display-google-protobuf-int32value.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-google-protobuf-int64value.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-google-protobuf-boolvalue`\nThe display-google-protobuf-boolvalue component displays a FieldNode of type `google.protobuf.BoolValue` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayGoolgeProtobufIn64value",
            "superclass": {
              "name": "DisplayInt64",
              "module": "/src/typerenderer/display-int64.js"
            },
            "tagName": "display-google-protobuf-int64value",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayInt64",
                  "module": "src/typerenderer/display-int64.js"
                }
              },
              {
                "kind": "method",
                "name": "_formatDisplay",
                "inheritedFrom": {
                  "name": "DisplayInt64",
                  "module": "src/typerenderer/display-int64.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "DisplayInt64",
                  "module": "src/typerenderer/display-int64.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-google-protobuf-int64value",
            "declaration": {
              "name": "DisplayGoolgeProtobufIn64value",
              "module": "src/typerenderer/display-google-protobuf-int64value.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-google-protobuf-stringvalue.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-google-protobuf-stringvalue`\nThe display-google-protobuf-stringvalue component displays a FieldNode of type `google.protobuf.Stringvalue` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayGoogleProtobufStringvalue",
            "superclass": {
              "name": "DisplayString",
              "module": "/src/typerenderer/display-string.js"
            },
            "tagName": "display-google-protobuf-stringvalue",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayString",
                  "module": "src/typerenderer/display-string.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-google-protobuf-stringvalue",
            "declaration": {
              "name": "DisplayGoogleProtobufStringvalue",
              "module": "src/typerenderer/display-google-protobuf-stringvalue.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-google-protobuf-timestamp.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-google-protobuf-timestamp`\nThe display-google-protobuf-timestamp component displays a FieldNode of type `google.prtobuf.Timestamp` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayGoogleProtobufTimestamp",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_convertDateToString",
                "static": true,
                "parameters": [
                  {
                    "name": "fieldValue"
                  },
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "convert date object to String according to Intl DateTimeFormat\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\nExample output: locale de-CH 15.01.2017, 02:30:15",
                "return": {
                  "type": {
                    "text": "string"
                  }
                },
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_formatDisplay"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "display-google-protobuf-timestamp",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-google-protobuf-timestamp",
            "declaration": {
              "name": "DisplayGoogleProtobufTimestamp",
              "module": "src/typerenderer/display-google-protobuf-timestamp.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-google-protobuf-uint32value.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-google-protobuf-boolvalue`\nThe display-google-protobuf-boolvalue component displays a FieldNode of type `google.protobuf.BoolValue` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayGoolgeProtobufUin32value",
            "superclass": {
              "name": "DisplayUint32",
              "module": "/src/typerenderer/display-uint32.js"
            },
            "tagName": "display-google-protobuf-uint32value",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              },
              {
                "kind": "method",
                "name": "_formatDisplay",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-google-protobuf-uint32value",
            "declaration": {
              "name": "DisplayGoolgeProtobufUin32value",
              "module": "src/typerenderer/display-google-protobuf-uint32value.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-google-protobuf-uint64value.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-google-protobuf-boolvalue`\nThe display-google-protobuf-boolvalue component displays a FieldNode of type `google.protobuf.BoolValue` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayGoolgeProtobufUin64value",
            "superclass": {
              "name": "DisplayUint64",
              "module": "/src/typerenderer/display-uint64.js"
            },
            "tagName": "display-google-protobuf-uint64value",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayInt64",
                  "module": "src/typerenderer/display-int64.js"
                }
              },
              {
                "kind": "method",
                "name": "_formatDisplay",
                "inheritedFrom": {
                  "name": "DisplayInt64",
                  "module": "src/typerenderer/display-int64.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "DisplayInt64",
                  "module": "src/typerenderer/display-int64.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-google-protobuf-uint64value",
            "declaration": {
              "name": "DisplayGoolgeProtobufUin64value",
              "module": "src/typerenderer/display-google-protobuf-uint64value.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-google-type-color.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-google-type-color`\nThe display-google-type-color component displays a FieldNode of type `google.type.Color` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayGoolgeTypeColor",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_updateValue",
                "description": "update value properties rgb",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_getTemplate",
                "description": "Template logic",
                "return": {
                  "type": {
                    "text": "*"
                  }
                },
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_red",
                "type": {
                  "text": "string"
                },
                "default": "''"
              },
              {
                "kind": "field",
                "name": "_green",
                "type": {
                  "text": "string"
                },
                "default": "''"
              },
              {
                "kind": "field",
                "name": "_blue",
                "type": {
                  "text": "string"
                },
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "display-google-type-color",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-google-type-color",
            "declaration": {
              "name": "DisplayGoolgeTypeColor",
              "module": "src/typerenderer/display-google-type-color.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-google-type-date.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-google-type-date`\nThe display-google-type-date component displays a FieldNode of type `google.type.Date` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayGoogleTypeDate",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_formatDisplay"
              },
              {
                "kind": "method",
                "name": "_convertDateToString",
                "static": true,
                "parameters": [
                  {
                    "name": "fieldNode"
                  },
                  {
                    "name": "date"
                  }
                ],
                "description": "convert date object to String according to Intl DateTimeFormat\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\nExample output: locale de-CH 31.12.2021",
                "return": {
                  "type": {
                    "text": "string"
                  }
                },
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "display-google-type-date",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayGoogleTypeDate",
            "declaration": {
              "name": "DisplayGoogleTypeDate",
              "module": "src/typerenderer/display-google-type-date.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-google-type-date",
            "declaration": {
              "name": "DisplayGoogleTypeDate",
              "module": "src/typerenderer/display-google-type-date.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-google-type-money.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-google-type-money`\nThe display-google-type-money component displays a FieldNode of type `google.type.Money` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayGoogleTypeMoney",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_convertTypeToNumber",
                "static": true,
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "return": {
                  "type": {
                    "text": "number"
                  }
                },
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_formatDisplay"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              },
              {
                "kind": "field",
                "name": "_valueObject",
                "type": {
                  "text": "{amount: number}"
                },
                "privacy": "private",
                "default": "{ amount: Number.NaN }"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "display-google-type-money",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayGoogleTypeMoney",
            "declaration": {
              "name": "DisplayGoogleTypeMoney",
              "module": "src/typerenderer/display-google-type-money.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-google-type-money",
            "declaration": {
              "name": "DisplayGoogleTypeMoney",
              "module": "src/typerenderer/display-google-type-money.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-google-type-timeofday.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-google-type-timeofday`\nThe display-google-type-timeofday component displays a FieldNode of type `google.type.TimeOfDay` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayGoogleTypeTimeofday",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_convertDayTimeToString",
                "static": true,
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "convert date object to String according to local time string\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\nExample output: 1:15:30 AM by en-US",
                "return": {
                  "type": {
                    "text": "string"
                  }
                },
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_formatDisplay"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "display-google-type-timeofday",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "display-google-type-timeofday",
            "declaration": {
              "name": "DisplayGoogleTypeTimeofday",
              "module": "src/typerenderer/display-google-type-timeofday.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-int32.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-int32`\nThe display-int32 component displays a FieldNode of type `int32` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayInt32",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_formatDisplay"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "display-int32",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayInt32",
            "declaration": {
              "name": "DisplayInt32",
              "module": "src/typerenderer/display-int32.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-int32",
            "declaration": {
              "name": "DisplayInt32",
              "module": "src/typerenderer/display-int32.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-int64.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-int64`\nThe display-int64 component displays a FieldNode of type `int64` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayInt64",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              },
              {
                "kind": "method",
                "name": "_formatDisplay"
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "display-int64",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayInt64",
            "declaration": {
              "name": "DisplayInt64",
              "module": "src/typerenderer/display-int64.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-int64",
            "declaration": {
              "name": "DisplayInt64",
              "module": "src/typerenderer/display-int64.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-string.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-string`\nThe display-string component displays a FieldNode of type `string` in read only mode.\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayString",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component"
              }
            ],
            "superclass": {
              "name": "LitElement",
              "package": "lit"
            },
            "tagName": "display-string",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayString",
            "declaration": {
              "name": "DisplayString",
              "module": "src/typerenderer/display-string.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-string",
            "declaration": {
              "name": "DisplayString",
              "module": "src/typerenderer/display-string.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-uint32.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-uint32`\nThe display-uint32 component displays a FieldNode of type `uint64` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayUint32",
            "superclass": {
              "name": "DisplayInt32",
              "module": "/src/typerenderer/display-int32.js"
            },
            "tagName": "display-uint32",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              },
              {
                "kind": "method",
                "name": "_formatDisplay",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "DisplayInt32",
                  "module": "src/typerenderer/display-int32.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayUint32",
            "declaration": {
              "name": "DisplayUint32",
              "module": "src/typerenderer/display-uint32.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-uint32",
            "declaration": {
              "name": "DisplayUint32",
              "module": "src/typerenderer/display-uint32.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/display-uint64.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`display-uint64`\nThe display-uint64 component displays a FieldNode of type `uint64` in read only mode.\n\nThe component uses locale from the environment to display the date value accordingly.\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n\nEvery display-xxx component should implement the following API:\n- function: bindData(fieldNode){...}",
            "name": "DisplayUint64",
            "superclass": {
              "name": "DisplayInt64",
              "module": "/src/typerenderer/display-int64.js"
            },
            "tagName": "display-uint64",
            "customElement": true,
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode",
                    "type": {
                      "text": "FieldNode"
                    }
                  }
                ],
                "description": "Binds a field node to the component",
                "inheritedFrom": {
                  "name": "DisplayInt64",
                  "module": "src/typerenderer/display-int64.js"
                }
              },
              {
                "kind": "method",
                "name": "_formatDisplay",
                "inheritedFrom": {
                  "name": "DisplayInt64",
                  "module": "src/typerenderer/display-int64.js"
                }
              },
              {
                "kind": "field",
                "name": "_displayValue",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "''",
                "inheritedFrom": {
                  "name": "DisplayInt64",
                  "module": "src/typerenderer/display-int64.js"
                }
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "DisplayUint64",
            "declaration": {
              "name": "DisplayUint64",
              "module": "src/typerenderer/display-uint64.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "display-uint64",
            "declaration": {
              "name": "DisplayUint64",
              "module": "src/typerenderer/display-uint64.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-bool.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`form-bool` is a `form` context renderer.\n\nIt uses furo-ui5-checkbox-input as the renderer",
            "name": "FormBool",
            "superclass": {
              "name": "FuroUi5CheckboxInputLabeled",
              "module": "/src/furo-ui5-checkbox-input-labeled.js"
            },
            "summary": "form renderer for bool",
            "tagName": "form-bool",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "FormBool",
            "declaration": {
              "name": "FormBool",
              "module": "src/typerenderer/form-bool.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "form-bool",
            "declaration": {
              "name": "FormBool",
              "module": "src/typerenderer/form-bool.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-double.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "FormDouble",
            "superclass": {
              "name": "FormInt32",
              "module": "/src/typerenderer/form-int32.js"
            },
            "tagName": "form-double",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "FormDouble",
            "declaration": {
              "name": "FormDouble",
              "module": "src/typerenderer/form-double.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "form-double",
            "declaration": {
              "name": "FormDouble",
              "module": "src/typerenderer/form-double.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-float.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "FormFloat",
            "superclass": {
              "name": "FormInt32",
              "module": "/src/typerenderer/form-int32.js"
            },
            "tagName": "form-float",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "FormFloat",
            "declaration": {
              "name": "FormFloat",
              "module": "src/typerenderer/form-float.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "form-float",
            "declaration": {
              "name": "FormFloat",
              "module": "src/typerenderer/form-float.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-furo-fat-bool.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`form-furo-fat-bool` is a `form` context renderer.\n\nIt uses furo-ui5-checkbox-input as the renderer",
            "name": "FormFuroFatBool",
            "superclass": {
              "name": "FormBool",
              "module": "/src/typerenderer/form-bool.js"
            },
            "summary": "form renderer for bool",
            "tagName": "form-furo-fat-bool",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-furo-fat-bool",
            "declaration": {
              "name": "FormFuroFatBool",
              "module": "src/typerenderer/form-furo-fat-bool.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-furo-fat-double.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`form-furo-fat-double` is a `form` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "FormFuroFatDouble",
            "superclass": {
              "name": "FormInt32",
              "module": "/src/typerenderer/form-int32.js"
            },
            "summary": "form renderer for furo.fat.Double",
            "tagName": "form-furo-fat-double",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-furo-fat-double",
            "declaration": {
              "name": "FormFuroFatDouble",
              "module": "src/typerenderer/form-furo-fat-double.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-furo-fat-float.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`form-furo-fat-float` is a `form` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "FormFuroFatFloat",
            "superclass": {
              "name": "FormInt32",
              "module": "/src/typerenderer/form-int32.js"
            },
            "summary": "form renderer for furo.fat.Float",
            "tagName": "form-furo-fat-float",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-furo-fat-float",
            "declaration": {
              "name": "FormFuroFatFloat",
              "module": "src/typerenderer/form-furo-fat-float.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-furo-fat-int32.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`form-furo-fat-int32` is a `form` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "FormFuroFatInt32",
            "superclass": {
              "name": "FormInt32",
              "module": "/src/typerenderer/form-int32.js"
            },
            "summary": "form renderer for furo.fat.Int32",
            "tagName": "form-furo-fat-int32",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "FormFuroFatInt32",
            "declaration": {
              "name": "FormFuroFatInt32",
              "module": "src/typerenderer/form-furo-fat-int32.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "form-furo-fat-int32",
            "declaration": {
              "name": "FormFuroFatInt32",
              "module": "src/typerenderer/form-furo-fat-int32.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-furo-fat-int64.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`form-furo-fat-int64` is a `form` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "FormFuroFatInt64",
            "superclass": {
              "name": "FormInt32",
              "module": "/src/typerenderer/form-int32.js"
            },
            "summary": "form renderer for furo.fat.Int64",
            "tagName": "form-furo-fat-int64",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "FormFuroFatInt64",
            "declaration": {
              "name": "FormFuroFatInt64",
              "module": "src/typerenderer/form-furo-fat-int64.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "form-furo-fat-int64",
            "declaration": {
              "name": "FormFuroFatInt64",
              "module": "src/typerenderer/form-furo-fat-int64.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-furo-fat-string.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "FormFuroFatString",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode"
                  }
                ]
              }
            ],
            "superclass": {
              "name": "FuroUi5TextInputLabeled",
              "module": "/src/furo-ui5-text-input-labeled.js"
            },
            "tagName": "form-furo-fat-string",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-furo-fat-string",
            "declaration": {
              "name": "FormFuroFatString",
              "module": "src/typerenderer/form-furo-fat-string.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-furo-fat-uint32.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`form-furo-fat-uint32` is a `form` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "FormFuroFatUint32",
            "superclass": {
              "name": "FormInt32",
              "module": "/src/typerenderer/form-int32.js"
            },
            "summary": "form renderer for furo.fat.Uint32",
            "tagName": "form-furo-fat-uint32",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-furo-fat-uint32",
            "declaration": {
              "name": "FormFuroFatUint32",
              "module": "src/typerenderer/form-furo-fat-uint32.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-furo-fat-uint64.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`form-furo-fat-uint64` is a `form` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "FormFuroFatUint64",
            "superclass": {
              "name": "FormInt32",
              "module": "/src/typerenderer/form-int32.js"
            },
            "summary": "form renderer for furo.fat.Uint64",
            "tagName": "form-furo-fat-uint64",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-furo-fat-uint64",
            "declaration": {
              "name": "FormFuroFatUint64",
              "module": "src/typerenderer/form-furo-fat-uint64.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-furo-integerproperty.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`form-furo-integerproperty` is a `form` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "FormFuroIntegerproperty",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode"
                  }
                ]
              }
            ],
            "superclass": {
              "name": "FormInt32",
              "module": "/src/typerenderer/form-int32.js"
            },
            "summary": "form renderer for furo.Integerproperty",
            "tagName": "form-furo-integerproperty",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-furo-integerproperty",
            "declaration": {
              "name": "FormFuroIntegerproperty",
              "module": "src/typerenderer/form-furo-integerproperty.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-furo-numberproperty.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`form-furo-integerproperty` is a `form` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "FormFuroNumberproperty",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode"
                  }
                ]
              }
            ],
            "superclass": {
              "name": "FormInt32",
              "module": "/src/typerenderer/form-int32.js"
            },
            "summary": "form renderer for furo.Integerproperty",
            "tagName": "form-furo-numberproperty",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-furo-numberproperty",
            "declaration": {
              "name": "FormFuroNumberproperty",
              "module": "src/typerenderer/form-furo-numberproperty.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-furo-reference.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "FormFuroReference",
            "superclass": {
              "name": "FuroUi5ReferenceSearchLabeled",
              "module": "/src/furo-ui5-reference-search-labeled.js"
            },
            "tagName": "form-furo-reference",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-furo-reference",
            "declaration": {
              "name": "FormFuroReference",
              "module": "src/typerenderer/form-furo-reference.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-furo-stringoptionproperty.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "FormFuroStringoptionproperty",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode"
                  }
                ]
              }
            ],
            "superclass": {
              "name": "FuroUi5SelectLabeled",
              "module": "/src/furo-ui5-select-labeled.js"
            },
            "tagName": "form-furo-stringoptionproperty",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-furo-stringoptionproperty",
            "declaration": {
              "name": "FormFuroStringoptionproperty",
              "module": "src/typerenderer/form-furo-stringoptionproperty.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-furo-stringproperty.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "FormFuroStringproperty",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode"
                  }
                ]
              }
            ],
            "superclass": {
              "name": "FuroUi5TextInputLabeled",
              "module": "/src/furo-ui5-text-input-labeled.js"
            },
            "tagName": "form-furo-stringproperty",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "FormFuroStringproperty",
            "declaration": {
              "name": "FormFuroStringproperty",
              "module": "src/typerenderer/form-furo-stringproperty.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "form-furo-stringproperty",
            "declaration": {
              "name": "FormFuroStringproperty",
              "module": "src/typerenderer/form-furo-stringproperty.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-furo-type-date.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "FormFuroTypeDate",
            "superclass": {
              "name": "FuroUi5DatePickerLabeled",
              "module": "/src/furo-ui5-date-picker-labeled.js"
            },
            "tagName": "form-furo-type-date",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-furo-type-date",
            "declaration": {
              "name": "FormFuroTypeDate",
              "module": "src/typerenderer/form-furo-type-date.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-furo-type-money.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "FormFuroTypeMoney",
            "superclass": {
              "name": "FuroUi5MoneyInputLabeled",
              "module": "/src/furo-ui5-money-input-labeled.js"
            },
            "tagName": "form-furo-type-money",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-furo-type-money",
            "declaration": {
              "name": "FormFuroTypeMoney",
              "module": "src/typerenderer/form-furo-type-money.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-google-protobuf-boolvalue.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`form-google-protobuf-boolvalue` is a `form` context renderer.\n\nIt uses furo-ui5-checkbox-input as the renderer",
            "name": "FormGoogleProtobufBoolvalue",
            "superclass": {
              "name": "FormBool",
              "module": "/src/typerenderer/form-bool.js"
            },
            "summary": "form renderer for bool",
            "tagName": "form-google-protobuf-boolvalue",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-google-protobuf-boolvalue",
            "declaration": {
              "name": "FormGoogleProtobufBoolvalue",
              "module": "src/typerenderer/form-google-protobuf-boolvalue.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-google-protobuf-doublevalue.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`form-google-protobuf-doublevalue` is a `form` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "FormGoogleProtobufDoublevalue",
            "superclass": {
              "name": "FormInt32",
              "module": "/src/typerenderer/form-int32.js"
            },
            "summary": "form renderer for google.protobuf.Double",
            "tagName": "form-google-protobuf-doublevalue",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-google-protobuf-doublevalue",
            "declaration": {
              "name": "FormGoogleProtobufDoublevalue",
              "module": "src/typerenderer/form-google-protobuf-doublevalue.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-google-protobuf-floatvalue.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`form-google-protobuf-floatvalue` is a `form` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "FormGoolgeProtobufFloatvalue",
            "superclass": {
              "name": "FormInt32",
              "module": "/src/typerenderer/form-int32.js"
            },
            "summary": "form renderer for google.protobuf.Float",
            "tagName": "form-google-protobuf-floatvalue",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-google-protobuf-floatvalue",
            "declaration": {
              "name": "FormGoolgeProtobufFloatvalue",
              "module": "src/typerenderer/form-google-protobuf-floatvalue.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-google-protobuf-int32value.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`form-google-protobuf-int32value` is a `form` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "FormGoolgeProtobufIn32value",
            "superclass": {
              "name": "FormInt32",
              "module": "/src/typerenderer/form-int32.js"
            },
            "summary": "form renderer for google.protobuf.Int32value",
            "tagName": "form-google-protobuf-int32value",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-google-protobuf-int32value",
            "declaration": {
              "name": "FormGoolgeProtobufIn32value",
              "module": "src/typerenderer/form-google-protobuf-int32value.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-google-protobuf-int64value.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`form-google-protobuf-int64value` is a `form` context renderer.\n\nIt uses furo-ui5-number-input as the renderer",
            "name": "FormGoolgeProtobufIn64value",
            "superclass": {
              "name": "FormInt32",
              "module": "/src/typerenderer/form-int32.js"
            },
            "summary": "form renderer for google.protobuf.Int64",
            "tagName": "form-google-protobuf-int64value",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-google-protobuf-int64value",
            "declaration": {
              "name": "FormGoolgeProtobufIn64value",
              "module": "src/typerenderer/form-google-protobuf-int64value.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-google-protobuf-stringvalue.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "FormGoogleProtobufStringvalue",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode"
                  }
                ]
              }
            ],
            "superclass": {
              "name": "FuroUi5TextInputLabeled",
              "module": "/src/furo-ui5-text-input-labeled.js"
            },
            "tagName": "form-google-protobuf-stringvalue",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-google-protobuf-stringvalue",
            "declaration": {
              "name": "FormGoogleProtobufStringvalue",
              "module": "src/typerenderer/form-google-protobuf-stringvalue.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-google-protobuf-timestamp.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "FormGoogleProtobufTimestamp",
            "superclass": {
              "name": "FuroUi5DateTimePickerLabeled",
              "module": "/src/furo-ui5-date-time-picker-labeled.js"
            },
            "tagName": "form-google-protobuf-timestamp",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-google-protobuf-timestamp",
            "declaration": {
              "name": "FormGoogleProtobufTimestamp",
              "module": "src/typerenderer/form-google-protobuf-timestamp.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-google-type-date.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`form-google-type-date` is a `form` context renderer.\n\nIt uses furo-ui5-date-picker as the renderer",
            "name": "FormGoogleTypeDate",
            "superclass": {
              "name": "FuroUi5DatePickerLabeled",
              "module": "/src/furo-ui5-date-picker-labeled.js"
            },
            "summary": "form renderer for google.type.Date",
            "tagName": "form-google-type-date",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-google-type-date",
            "declaration": {
              "name": "FormGoogleTypeDate",
              "module": "src/typerenderer/form-google-type-date.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-google-type-money.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`form-google-type-money` is a `form` context renderer.\n\nIt uses furo-ui5-money-input as the renderer",
            "name": "FormGoogleTypeMoney",
            "superclass": {
              "name": "FuroUi5MoneyInputLabeled",
              "module": "/src/furo-ui5-money-input-labeled.js"
            },
            "summary": "form renderer for google.type.Money",
            "tagName": "form-google-type-money",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-google-type-money",
            "declaration": {
              "name": "FormGoogleTypeMoney",
              "module": "src/typerenderer/form-google-type-money.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-google-type-timeofday.js",
        "declarations": [
          {
            "kind": "class",
            "description": "`form-google-type-timeofday` is a `form` context renderer.\n\nIt uses furo-ui5-time-picker as the renderer",
            "name": "FormGoogleTypeTimeofday",
            "superclass": {
              "name": "FuroUi5TimePickerLabeled",
              "module": "/src/furo-ui5-time-picker-labeled.js"
            },
            "summary": "form renderer for google.type.TimeOfDay",
            "tagName": "form-google-type-timeofday",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "custom-element-definition",
            "name": "form-google-type-timeofday",
            "declaration": {
              "name": "FormGoogleTypeTimeofday",
              "module": "src/typerenderer/form-google-type-timeofday.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-int32.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "FormInt32",
            "superclass": {
              "name": "FuroUi5NumberInputLabeled",
              "module": "/src/furo-ui5-number-input-labeled.js"
            },
            "tagName": "form-int32",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "FormInt32",
            "declaration": {
              "name": "FormInt32",
              "module": "src/typerenderer/form-int32.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "form-int32",
            "declaration": {
              "name": "FormInt32",
              "module": "src/typerenderer/form-int32.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-int64.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "FormInt64",
            "superclass": {
              "name": "FormInt32",
              "module": "/src/typerenderer/form-int32.js"
            },
            "tagName": "form-int64",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "FormInt64",
            "declaration": {
              "name": "FormInt64",
              "module": "src/typerenderer/form-int64.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "form-int64",
            "declaration": {
              "name": "FormInt64",
              "module": "src/typerenderer/form-int64.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-string.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "FormString",
            "members": [
              {
                "kind": "method",
                "name": "bindData",
                "parameters": [
                  {
                    "name": "fieldNode"
                  }
                ]
              }
            ],
            "superclass": {
              "name": "FuroUi5TextInputLabeled",
              "module": "/src/furo-ui5-text-input-labeled.js"
            },
            "tagName": "form-string",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "FormString",
            "declaration": {
              "name": "FormString",
              "module": "src/typerenderer/form-string.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "form-string",
            "declaration": {
              "name": "FormString",
              "module": "src/typerenderer/form-string.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-uint32.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "FormUint32",
            "superclass": {
              "name": "FormInt32",
              "module": "/src/typerenderer/form-int32.js"
            },
            "tagName": "form-uint32",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "FormUint32",
            "declaration": {
              "name": "FormUint32",
              "module": "src/typerenderer/form-uint32.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "form-uint32",
            "declaration": {
              "name": "FormUint32",
              "module": "src/typerenderer/form-uint32.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/form-uint64.js",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "FormUint64",
            "superclass": {
              "name": "FormInt32",
              "module": "/src/typerenderer/form-int32.js"
            },
            "tagName": "form-uint64",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "FormUint64",
            "declaration": {
              "name": "FormUint64",
              "module": "src/typerenderer/form-uint64.js"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "form-uint64",
            "declaration": {
              "name": "FormUint64",
              "module": "src/typerenderer/form-uint64.js"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/furo-catalog.js",
        "declarations": [],
        "exports": []
      },
      {
        "kind": "javascript-module",
        "path": "src/typerenderer/registry.js",
        "declarations": [],
        "exports": []
      }
    ]
  }
}
