{
  "kind": "javascript-module",
  "path": "src/furo-ui5-time-picker.js",
  "declarations": [
    {
      "kind": "class",
      "description": "The furo-ui5-time-picker component allows the user to bind a field of type google.type.TimeOfDay.\nRepresents a time of day. The date and time zone are either not significant\nor are specified elsewhere.\n\nhttps://sap.github.io/ui5-webcomponents/playground/components/TimePicker/\n\nSupported format options are pattern-based on Unicode LDML Date Format notation. For more information, see\nUTS #35: Unicode Locale Data Markup Language.\n\nFor example, if the format-pattern is \"hh:mm:ss\", a valid value string is \"11:42:35\" and the same is displayed in the input.\n\nThe text field can be editable or read-only (readonly property), and it can be enabled or disabled (enabled property).\nTo visualize semantic states, such as \"error\" or \"warning\", the valueState property is provided.\nWhen the user makes changes to the time, the change event is fired, which enables you to react on any time change.\n\nYou can bind a `string` or `google.type.TimeOfDay` (https://github.com/googleapis/googleapis/blob/master/google/type/timeofday.proto).\n\n```html\n <furo-ui5-time-picker\n    Æ’-bind-data=\"--data(*.start_time)\">\n </furo-ui5-time-picker>\n```\n\n## supported meta and constraints\n- **readonly: true** , set the element to readonly\n- **placeholder:\"some string\"** set the placeholder for the element\n- **min:\"11:42:35\"** set the minDate for the element (use iso date in the constraint)\n- **max:\"23:59:59\"** set the maxDate for the element (use iso date in the constraint)\n- **pattern:\"HH:mm:ss\"** set the pattern for the element\n\nThe constraint **required** will mark the element as required\n\n## Methods\n**bind-data(fieldNode)**\nBind a entity field. You can use the entity even when no data was received.\n\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with --entity(*.fields.fieldname)",
      "name": "FuroUi5TimePicker",
      "members": [
        {
          "kind": "method",
          "name": "_updateFNA",
          "parameters": [
            {
              "name": "event",
              "type": {
                "text": "Event"
              }
            }
          ],
          "description": "update of the bound FieldNode",
          "privacy": "private"
        },
        {
          "kind": "field",
          "name": "valueStateMessage",
          "description": "Workaround for language request",
          "privacy": "private"
        },
        {
          "kind": "method",
          "name": "onFnaFieldValueChanged",
          "parameters": [
            {
              "name": "value"
            }
          ],
          "description": "FieldNodeAdapter callback function to\nhandle changes on the model."
        },
        {
          "kind": "method",
          "name": "readAttributes"
        },
        {
          "kind": "method",
          "name": "onFnaFieldNodeBecameInvalid",
          "parameters": [
            {
              "name": "validity"
            }
          ],
          "description": "overwrite onFnaFieldNodeBecameInvalid function"
        },
        {
          "kind": "method",
          "name": "onFnaFieldNodeBecameValid",
          "description": "overwrite onFnaFieldNodeBecameValid function",
          "privacy": "private"
        },
        {
          "kind": "method",
          "name": "_setValueStateMessage",
          "parameters": [
            {
              "name": "valueState"
            },
            {
              "name": "message"
            }
          ],
          "description": "update the value state and the value state message on demand",
          "privacy": "private"
        },
        {
          "kind": "method",
          "name": "_resetValueStateMessage",
          "description": "reset to previous value state",
          "privacy": "private"
        },
        {
          "kind": "method",
          "name": "onFnaPlaceholderChanged",
          "parameters": [
            {
              "name": "placeholder"
            }
          ],
          "description": "overwrite onFnaPlaceholderChanged function",
          "privacy": "private"
        },
        {
          "kind": "method",
          "name": "onFnaReadonlyChanged",
          "parameters": [
            {
              "name": "readonly"
            }
          ],
          "description": "overwrite onFnaReadonlyChanged function",
          "privacy": "private"
        },
        {
          "kind": "method",
          "name": "onFnaConstraintsChanged",
          "parameters": [
            {
              "name": "constraints"
            }
          ],
          "description": "overwrite onFnaConstraintsChanged function",
          "privacy": "private"
        },
        {
          "kind": "field",
          "name": "formatPattern",
          "type": {
            "text": "string"
          },
          "default": "''"
        },
        {
          "kind": "field",
          "name": "_previousValueState",
          "type": {
            "text": "object"
          },
          "default": "{ state: 'None', message: '' }"
        },
        {
          "kind": "field",
          "name": "_attributesFromFNA",
          "type": {
            "text": "object"
          },
          "default": "{\n      readonly: undefined,\n      placeholder: undefined,\n      min: undefined,\n      max: undefined,\n      pattern: undefined,\n    }"
        },
        {
          "kind": "field",
          "name": "_constraintsFromFNA",
          "type": {
            "text": "object"
          },
          "default": "{\n      required: undefined,\n    }"
        },
        {
          "kind": "field",
          "name": "_privilegedAttributes",
          "type": {
            "text": "object"
          },
          "default": "{\n      readonly: null,\n      placeholder: null,\n      required: null,\n      disabled: null,\n      maxDate: null,\n      minDate: null,\n      formatPattern: null,\n    }"
        }
      ],
      "events": [
        {
          "type": {
            "text": "String"
          },
          "description": "Fires the field value when it changes in ISO 8601 format.",
          "name": "value-changed"
        },
        {
          "description": "Fired when the input operation has finished by pressing Enter or on focusout.",
          "name": "change"
        }
      ],
      "mixins": [
        {
          "name": "FieldNodeAdapter",
          "package": "@furo/data/src/lib/FieldNodeAdapter.js"
        }
      ],
      "superclass": {
        "module": "src/furo-ui5-time-picker.js"
      },
      "summary": "furo data time picker field",
      "tagName": "furo-ui5-time-picker",
      "customElement": true
    }
  ],
  "exports": [
    {
      "kind": "js",
      "name": "FuroUi5TimePicker",
      "declaration": {
        "name": "FuroUi5TimePicker",
        "module": "src/furo-ui5-time-picker.js"
      }
    },
    {
      "kind": "custom-element-definition",
      "name": "furo-ui5-time-picker",
      "declaration": {
        "name": "FuroUi5TimePicker",
        "module": "src/furo-ui5-time-picker.js"
      }
    }
  ]
}
