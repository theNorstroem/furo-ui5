{
  "kind": "class",
  "description": "The furo-ui5-date-picker component allows the user to bind an date object like google.type.Date or a date string\nwith ISO 8061 format like \"2020-12-31\" to the ui5 datepicker and edit it.\n\nIt supports all features from the [SAP ui5 DatePicker element](https://sap.github.io/ui5-webcomponents/playground/components/DatePicker/).\n\n\nyou can define the formatPattern (e.g. 'dd.MM.yyyy' ) to show the date according to format pattern.\n\nYou can bind a `string`, `furo.type.Date` or `google.type.Date`.\n\n```html\n <furo-ui5-date-picker\n    Æ’-bind-data=\"--data(*.validity_to)\">\n </furo-ui5-date-picker>\n```\n\nThe text field can be editable or read-only (readonly property), and it can be enabled or disabled (enabled property).\nTo visualize semantic states, such as \"error\" or \"warning\", the valueState property is provided.\nWhen the user makes changes to the date, the change event is fired, which enables you to react on any date change.\n\n## supported meta and constraints\n- **readonly: true** , set the element to readonly\n- **placeholder:\"some string\"** set the placeholder for the element\n- **min:\"1999-12-31\"** set the minDate for the element (use iso date in the constraint)\n- **max:\"1999-12-31\"** set the maxDate for the element (use iso date in the constraint)\n- **pattern:\"1999-12-31\"** set the pattern for the element\n\nThe constraint **required** will mark the element as required\n\n## Methods\n**bind-data(fieldNode)**\nBind a entity field. You can use the entity even when no data was received.\n\nWhen you use @-object-ready from a furo-data-object which emits a EntityNode, just bind the field with --entity(*.fields.fieldname)",
  "name": "FuroUi5DatePicker",
  "members": [
    {
      "kind": "field",
      "name": "valueStateMessage",
      "description": "Workaround for language request",
      "privacy": "private"
    },
    {
      "kind": "method",
      "name": "onFnaFieldValueChanged",
      "parameters": [
        {
          "name": "value"
        }
      ],
      "privacy": "private"
    },
    {
      "kind": "method",
      "name": "readAttributes",
      "description": "Reads the attributes which are set on the component dom.\nAttributes that can be se are  `value-state`,  `placeholder`, `required`,`readonly`,`disabled` `max-date`,  `min-date`,  `format-pattern`,\nUse this after manual or scripted update of the attributes."
    },
    {
      "kind": "method",
      "name": "onFnaFieldNodeBecameInvalid",
      "parameters": [
        {
          "name": "validity"
        }
      ],
      "description": "overwrite onFnaFieldNodeBecameInvalid function",
      "privacy": "private"
    },
    {
      "kind": "method",
      "name": "onFnaFieldNodeBecameValid",
      "description": "overwrite onFnaFieldNodeBecameValid function",
      "privacy": "private"
    },
    {
      "kind": "method",
      "name": "_setValueStateMessage",
      "parameters": [
        {
          "name": "valueState"
        },
        {
          "name": "message"
        }
      ],
      "description": "update the value state and the value state message on demand",
      "privacy": "private"
    },
    {
      "kind": "method",
      "name": "_resetValueStateMessage",
      "description": "reset to previous value state",
      "privacy": "private"
    },
    {
      "kind": "method",
      "name": "onFnaPlaceholderChanged",
      "parameters": [
        {
          "name": "placeholder"
        }
      ],
      "description": "overwrite onFnaPlaceholderChanged function",
      "privacy": "private"
    },
    {
      "kind": "method",
      "name": "onFnaReadonlyChanged",
      "parameters": [
        {
          "name": "readonly"
        }
      ],
      "description": "overwrite onFnaReadonlyChanged function",
      "privacy": "private"
    },
    {
      "kind": "method",
      "name": "onFnaConstraintsChanged",
      "parameters": [
        {
          "name": "constraints"
        }
      ],
      "description": "overwrite onFnaConstraintsChanged function",
      "privacy": "private"
    },
    {
      "kind": "field",
      "name": "metadata",
      "static": true
    },
    {
      "kind": "field",
      "name": "formatPattern",
      "type": {
        "text": "string"
      },
      "description": "The format pattern for the date.",
      "default": "''"
    },
    {
      "kind": "field",
      "name": "_previousValueState",
      "type": {
        "text": "{state: string, message: string}"
      },
      "description": "used to restore the state after a invalidation -> validation change",
      "privacy": "private",
      "default": "{ state: 'None', message: '' }"
    },
    {
      "kind": "field",
      "name": "_attributesFromFNA",
      "type": {
        "text": "{min: undefined, readonly: undefined, max: undefined, pattern: undefined, placeholder: undefined}"
      },
      "privacy": "private",
      "default": "{\n      readonly: undefined,\n      placeholder: undefined,\n      min: undefined,\n      max: undefined,\n      pattern: undefined,\n    }"
    },
    {
      "kind": "field",
      "name": "_constraintsFromFNA",
      "type": {
        "text": "{required: undefined}"
      },
      "privacy": "private",
      "default": "{\n      required: undefined,\n    }"
    },
    {
      "kind": "field",
      "name": "_privilegedAttributes",
      "type": {
        "text": "{minDate: null, readonly: null, formatPattern: null, disabled: null, maxDate: null, placeholder: null, required: null}"
      },
      "description": "a list of privileged attributes. when those attributes are set in number-input components initially.\nthey can not be modified later via response or spec\nnull is used because getAttribute returns null or value",
      "privacy": "private",
      "default": "{\n      readonly: null,\n      placeholder: null,\n      required: null,\n      disabled: null,\n      maxDate: null,\n      minDate: null,\n      formatPattern: null,\n    }"
    }
  ],
  "events": [
    {
      "type": {
        "text": "Date"
      },
      "description": " Fired when the input operation has finished by pressing Enter or on focusout.",
      "name": "value-changed"
    },
    {
      "type": {
        "text": "Date"
      },
      "description": "-Fired when the input operation has finished by pressing Enter or on focusout.",
      "name": "change"
    }
  ],
  "mixins": [
    {
      "name": "FieldNodeAdapter",
      "package": "@furo/data/src/lib/FieldNodeAdapter.js"
    }
  ],
  "superclass": {
    "module": "src/furo-ui5-date-picker.js"
  },
  "summary": "furo data datepicker field"
}
